# Quarto入門 {#sec-quarto}

```{r}
#| include: false
source("_common.R")
```

## Quartoとは {#sec-quarto-intro}

以下のように、QuartoとR Markdownは同じやり方でHTML/PDF/Wordファイルを生成する。

* R Markdown
   * `.Rmd` $\rightarrow$ knitr $\rightarrow$ `.md` $\rightarrow$ pandoc $\rightarrow$ HTML/PDF/Word...
* Quarto
   * `.qmd` $\rightarrow$ (knitr / Jupyter / Observable) $\rightarrow$ `.md` $\rightarrow$ pandoc $\rightarrow$ HTML/PDF/Word...

* R Markdownの場合、コードがRに限定されている（むろん、今はpythonなども使用可能）。
   * 一方、Quartoはマルチリンガル（R、Pyhton、Juliaなど）
* R Markdownのエンジンはknitr
   * 一方、Quartoはknitr、Jupyter、Observableが使用可能であり、今後も追加予定
* 文書作成のための{rmarkdown}、ホームページ作成のための{blogdown}、スライド作成のための{xaringan}など
   * Quartoはこれらを全て一つに統合
   * Quarto Extensionという拡張機能を追加する形式
* QuartoはRStudio以外にもVS Code、Jupyterなどでも使用可能
* QuartoはR Markdownの上位互換でもなく、R Markdownを代替するものでもない（[参考](https://yihui.org/en/2022/04/quarto-r-markdown/)）。
   * つまり、既存のR Markdownを問題なく使っているのであれば、Quartoへの移行は不要
   * 現在のところ、QuartoはR Markdown生態系を一つに統合したものに近く、文法などもほぼ同じであるため、移行のために新しい事をゼロベースから勉強する必要はほぼない

## セットアップ {#sec-quarto-setup}

1. Quartoのインストール
2. RStudioのアップデート

Quartoのインストール

* <https://quarto.org/docs/get-started/>
   * 自分のOSに合わせてダウンロード&インストール

{quarto}のインストール（インストールしておくだけで良い）

```{r}
#| eval: false
pacman::p_install("quarto") # または、install.packages("quarto")
```

## 簡単な使い方 {#sec-quarto-howtouse}

　Quartoは基本的にR Markdownと同じ感覚で使える。たとえば、R Markdownで新しい文書を作成する際はRStudioのFile > New File > **R Markdown...**を選択するが、QuartoはFile > New File > **Quarto Document...**を選択する[^newfile]くらいの違いだ。ただし、作成したファイルを文書に変換するときにはR Markdownだと「Knit」ボタンをクリックしたが、QuartoはKnit以外にもJupyterやObservableなども使用可能であるため、代わりに「Render」ボタンをクリック[^render-button]しよう。

[^newfile]: もし、「Quarto Document...」が表示されない場合はRStudioが古いバージョンである可能性が高いため、予め最新バージョンにアップデートしておこう。

[^render-button]: Knitボタンと同じ位置であり、ショートカットキーも同じく「Cmd + Shift + K (macOS)」、または「Ctrl + Shift + K (Windows)」である。

　以下ではR MarkdownとQuartoの書き方の違いについて解説する。すべてを列挙することはできないため、よく使う機能の相違点のみを紹介する。より詳しく知りたい場合はQuartoの[公式ホームページ](https://quarto.org/docs/guide/)を参照すること。

### チャンクオプションの付け方

　現時点においてR Markdownと同じ書き方でも問題ない。つまり、```` ```{r} ````の`r`の後ろにチャンクのラベル、オプションを付けても問題なく作動する。

````md
```{r fig-scatter1, fig.height = 5, fig.width = 7, fig.cap = "図の例", cache = TRUE}`r ''`
iris %>%
  mutate(Species2 = recode(Species,
                           "setosa"     = "セトナ",
                           "versicolor" = "バーシクル",
                           "virginica"  = "バージニカ")) %>%
  ggplot() +
  geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) +
  labs(x = "萼片の長さ (cm)", y = "萼片の幅 (cm)", color = "品種")
```
````

　しかし、Quarto特有の書き方として、チャンクオプションを`{r}`内に書かず、チャンク内に`#|`で書く方法がある。`#|`とオプションの間には半角スペースを入れる必要がある。チャンクオプションが多くなると、コードが非常に長くなることもあるので、こちらの書き方が読みやすいだろう（しかも、`{r}`内のオプションは改行もできない）。ちなみに、チャンクのラベルのオプションは`label:`で指定する必要がある。

````md
```{r}`r ''`
#| label: fig-scatter1
#| fig-cap: "図の例"
#| fig-height: 5
#| fig-width: 7
#| fig-align: "center"
#| cache: true
iris %>%
  mutate(Species2 = recode(Species,
                           "setosa"     = "セトナ",
                           "versicolor" = "バーシクル",
                           "virginica"  = "バージニカ")) %>%
  ggplot() +
  geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) +
  labs(x = "萼片の長さ (cm)", y = "萼片の幅 (cm)", color = "品種")
```
````

　これらのチャンクオプションはR Markdownとほぼ同じであるものの、一部名称が異なるオプションがある。たとえば、図の幅を指定するR Markdownの`fig.width`は、Quartoだと`fig-width`を使う。また、実引数として`TRUE`と`FALSE`は、通常のYAMLと同様、`true`と`false`を使用する。これはYAMLヘッダーでも同じだ。他にも`仮引数 = 実引数`でなく、`仮引数: 実引数`で書くことにも注意しよう。

### 相互参照について

　図表の相互参照も方法もやや異なる。たとえば、チャンクのラベルが`fig-scatter1`という図がある場合、R Markdownでは`図 \@ref(fig-scatter1)`、または`Figure \@ref(fig-scatter1)`と書く必要があった。しかし、Quartoだと`@fig-scatter1`だけで十分である。以下の例を見てみよう。

**Input:**

````md
以下の @fig-scatter1 は萼片の長さと幅を品種ごとに分けて示した散布図である。

```{r}`r ''`
#| label: fig-scatter1
#| echo: false
#| fig-cap: "萼片の長さと幅の関係（品種別）"
iris %>%
  mutate(Species2 = recode(Species,
                           "setosa"     = "セトナ",
                           "versicolor" = "バーシクル",
                           "virginica"  = "バージニカ")) %>%
  ggplot() +
  geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) +
  labs(x = "萼片の長さ (cm)", y = "萼片の幅 (cm)", color = "品種")
```
````

**Output:**

　以下の @fig-scatter1 は萼片の長さと幅を品種ごとに分けて示した散布図である。

```{r}
#| label: fig-scatter1
#| echo: false
#| fig-cap: "萼片の長さと幅の関係（品種別）"
iris %>%
  mutate(Species2 = recode(Species,
                           "setosa"     = "セトナ",
                           "versicolor" = "バーシクル",
                           "virginica"  = "バージニカ")) %>%
  ggplot() +
  geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) +
  labs(x = "萼片の長さ (cm)", y = "萼片の幅 (cm)", color = "品種")
```

　図だけでなく、表や章でも同じやり方で相互参照ができる。ただし、一点注意が必要である。相互参照に使うチャンクのラベルに制約があることだ。R Markdownではチャンクラベルの制限がなかったものの、Quartoの場合ラベルは`sec-`（章・節など）、`fig-`（図）、`tbl-`（表）で始まる必要がある。図表はチャンクラベルで指定できるが、章や節などの見出しの場合、以下のようにラベルを指定する。この書き方はチャンク以外の図表にラベルを付ける時も同様だ（後述）。

```md
## Rの素晴らしさについて {#sec-aboutR}
```

　また、Quartoの既定値のままだと「Figure X」と出力される。これを「図 X」の形式にしたい場合はYAMLヘッダーに`lang: ja`を追加するか、`language:`で別途指定する必要がある[^lang-sec]。

[^lang-sec]: 一つややこしいのが見出しの相互参照である。英語のままだと「Section 1」のように出力されるが、`lang:ja`で日本語化すると「セクション 1」のように表示される。これを「第1章」にしたい場合は、`第[-@sec-aboutR]章`のように書く必要がある。`[-@ラベル名]`にすると「Section」、「セクション」、「Figure」、「図」などを出力せず番号のみが出力される。

### コールアウト

　Quartoでは5種類のコールアウト（callout）が提供される。以下はコールアウト作成のコードとその結果である。

::::{.columns}
:::{.column width=49%}
**Input:**

```md
:::{.callout-note}
## Rはみんなの友達!

末永くよろしくね!
:::
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
**Output:**

:::{.callout-note}
## Rはみんなの友達!

末永くよろしくね!
:::
:::
::::

::::{.columns}
:::{.column width=49%}
**Input:**

```md
:::{.callout-warning}
## Rはみんなの友達!

末永くよろしくね!
:::
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
**Output:**

:::{.callout-warning}
## Rはみんなの友達!

末永くよろしくね!
:::
:::
::::

::::{.columns}
:::{.column width=49%}
**Input:**

```md
:::{.callout-important}
## Rはみんなの友達!

末永くよろしくね!
:::
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
**Output:**

:::{.callout-important}
## Rはみんなの友達!

末永くよろしくね!
:::
:::
::::

::::{.columns}
:::{.column width=49%}
**Input:**

```md
:::{.callout-tip}
## Rはみんなの友達!

末永くよろしくね!
:::
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
**Output:**

:::{.callout-tip}
## Rはみんなの友達!

末永くよろしくね!
:::
:::
::::

::::{.columns}
:::{.column width=49%}
**Input:**

```md
:::{.callout-caution}
## Rはみんなの友達!

末永くよろしくね!
:::
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
**Output:**

:::{.callout-caution}
## Rはみんなの友達!

末永くよろしくね!
:::
:::
::::

　`.callout-*`の後に`collapse="true"`を付けるとコールアウトの本文を隠すことができる（見出しをクリックすると本文が表示される）。

::::{.columns}
:::{.column width=49%}
**Input:**

```md
:::{.callout-note collapse="true"}
## Rはみんなの友達!（クリック）

末永くよろしくね!
:::
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
**Output:**

:::{.callout-note collapse="true"}
## Rはみんなの友達!（クリック）

末永くよろしくね!
:::
:::
::::

　また、`.callout-*`の後に`icon="false"`を付けると見出しの左にあるアイコンを消すことができる。

::::{.columns}
:::{.column width=49%}
**Input:**

```md
:::{.callout-warning icon="false"}
## Rはみんなの友達!

末永くよろしくね!
:::
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
**Output:**

:::{.callout-warning icon="false"}
## Rはみんなの友達!

末永くよろしくね!
:::
:::
::::

### 段組み

　Quartoの段組みは非常に簡単だ。`::::{.columns}`と`::::`で囲まれた領域内の内容が段組みの対象となり、`:::{.column}`と`:::`で囲まれた領域が一つ一つの段となる。また、`.column`の次に`width`引数を追加することで、段の幅を指定することもできる。以下はコードのその結果を2段構成で示した例だ。

**Input:**

````md
::::{.columns}
:::{.column width=56%}
**コード:**

```{r}`r ''`
#| eval: false
x <- c(1, 2, 3, 1, 2)
y <- c("A", "A", "A", "B", "B")

paste0(x, y)
```
:::

:::{.column width=2%}
:::

:::{.column width=42%}
**結果:**

```{r}`r ''`
#| echo: false
x <- c(1, 2, 3, 1, 2)
y <- c("A", "A", "A", "B", "B")

paste0(x, y)
```
:::
::::
````

**Output:**

::::{.columns}
:::{.column width=56%}
**コード**

```{r}
#| eval: false
x <- c(1, 2, 3, 1, 2)
y <- c("A", "A", "A", "B", "B")

paste0(x, y)
```
:::

:::{.column width=2%}
:::

:::{.column width=42%}
**結果**

```{r}
#| echo: false
x <- c(1, 2, 3, 1, 2)
y <- c("A", "A", "A", "B", "B")

paste0(x, y)
```
:::
::::

### パネル

:::{.panel-tabset}
## タブ1

タブ1

## タブ2

タブ2

:::

### 図表について

* 大きさの調整
* キャプション

### ハイパーリンクのターゲット

　Markdownのハイパーリンクは以下のように書く。

```md
[ここ](https://www.jaysong.net)をクリックすると宋のホームページへ移動します。
```

　「ここ」の文字をクリックすると宋のホームページへ飛ばされるコードである、R Markdownも、Quartoもデフォルトではそのウィンドウ/タブを使うことになる[^new-window]。これを新しいウィンドウ/タブで開かせるためにはやむを得ずHTMLタグを使う必要がある。

[^new-window]: むろん、QuartoだとYAMLヘッダーに`link-external-newwindow: true`追加することで**外部**ページは新しいウィンドウ/タブで開くように設定できる。

```html
<a href="https://www.jaysong.net" target="_blank">ここ</a>をクリックすると宋のホームページへ移動します。
```

　しかし、Quartoだと通常のMarkdown記法を使うことができる。`[]()`の後ろに`{target="_blank"}`を付けるだけだ。実は書く手間としては若干軽減された程度であるが、地味に嬉しい機能だ。

```md
[ここ](https://www.jaysong.net){target="_blank"}をクリックすると宋のホームページへ移動します。
```

## Quartoを知り尽くす

* Quarto公式HP：<https://quarto.org/docs/guide/>

* rstudio::conf 2022 Workshopの資料：<https://rstudio-conf-2022.github.io/get-started-quarto/>