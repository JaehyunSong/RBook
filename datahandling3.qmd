# データハンドリング [拡張] {#sec-datahandling3}

```{r}
#| include: false
source("_common.R")
pacman::p_load(tidyverse, gt, gtExtras)
```

これまでデータの一部（subset）を抽出したり、要約する方法について説明しましたが、本章はデータの拡張について解説します。具体的にはデータ内の変数に基づき、指定された計算を行った結果を新しい列として追加する、または既存の変数を更新する方法です。そして2つ以上のデータセットを1つに結合する方法についても解説します。今回も[前章と同じデータ](Data/Ramen.csv)を使用します。

```{r}
#| message: false
pacman::p_load(tidyverse)
# データのパスは適宜修正すること
# 文字化けが生じる場合、以下のコードに書き換える。
# df <- read_csv("Data/Ramen.csv", locale = locale(encoding = "utf8"))
df <- read_csv("Data/Ramen.csv")
```

データの詳細については第[-@sec-handling1-select]章を参照してください。

## 変数の計算 {#sec-handling3-mutate}

### `mutate()`関数の使い方

データフレーム（ティブル）内の変数を用いて計算を行い、その結果を新しい列として格納する`mutate()`関数について紹介します。まず、`mutate()`関数の書き方からです。

```{r}
#| eval: false
# mutate()関数の使い方
データフレーム名 |>
  mutate(新しい変数名 = 処理内容)
```

これは何らかの処理を行い、その結果を新しい変数としてデータフレームに追加することを意味します。新しく出来た変数は、基本的に最後の列になります。ここでは分単位である`Walk`を時間単位に変換した`Walk_Hour`変数を作成するとします。処理内容は`Walk / 60`です。最後に、都府県名、店舗名、徒歩距離 (分)、徒歩距離 (時間)のみを残し、遠い順にソートします。

```{r}
df |>
  filter(!is.na(Walk)) |>
  mutate(Walk_Hour = Walk / 60) |>
  select(Pref, Name, Walk, Walk_Hour) |>
  arrange(desc(Walk_Hour))
```

`mutate()`は3行目に登場しますが、これは`Walk`を60に割った結果を`Walk_Hour`としてデータフレームの最後の列として格納することを意味します。もし、最後の列でなく、ある変数の前、または後にしたい場合は、`.before`または`.after`引数を追加します。これは`select()`関数の`.before`と`.after`と同じ使い方です。たとえば、新しく出来た`Walk_Hour`を`ID`と`Name`の間に入れたい場合は

```{r}
#| eval: false
# コードの3行名を修正 (.before使用)
mutate(Walk_Hour = Walk / 60,
       .before   = Name)

# コードの3行名を修正 (.after使用)
mutate(Walk_Hour = Walk / 60,
       .after    = ID)
```

のようにコードを修正します。

むろん、変数間同士の計算も可能です。たとえば、以下のような`df2`があり、1店舗当たりの平均口コミ数を計算し、`ScoreN_Mean`という変数名で`ScoreN_Sum`の後に格納うするとします。この場合、`ScoreN_Sum`変数を`N`で割るだけです。

```{r}
df2 <- df |>
  group_by(Pref) |>
  summarise(Budget_Mean = mean(Budget, na.rm = TRUE),
            ScoreN_Sum  = sum(ScoreN, na.rm = TRUE),
            Score_Mean  = mean(Score, na.rm = TRUE),
            N           = n(),
            .groups     = "drop")
```

```{r}
df2 |>
  mutate(ScoreN_Mean = ScoreN_Sum / N,
         .after      = ScoreN_Sum)
```

このように、データ内の変数を用いた計算結果を新しい列として追加する場合は、`mutate()`が便利です。これを`mutate()`を使わずに処理する場合、以下のようなコードになりますが、可読性が相対的に低いことが分かります。

```{r}
#| eval: false
df2$ScoreN_Mean <- df2$ScoreN_Sum / df2$N
df2 <- df2[, c("Pref", "Budget_Mean", "Walk_Mean", 
               "ScoreN_Sum", "ScoreN_Mean", "Score_Mean", "N")]
```

むろんですが、計算には`+`や`/`のような演算子だけでなく、関数を使うことも可能です。たとえば、`Budget`が1000円未満なら`"Cheap"`、1000円以上なら`"Expensive"`と示す変数`Budget2`を作成する場合は`ifelse()`関数が使えます。

```{r}
df |> 
  mutate(Budget2 = ifelse(Budget < 1000, "Cheap", "Expensive")) |>
  filter(!is.na(Budget2)) |> # Budget2が欠損した店舗を除外
  group_by(Pref, Budget2) |> # PrefとBudget2でグループ化
  summarise(N = n(),         # 店舗数を表示
            .groups = "drop")
```

これは各都府県ごとの予算1000円未満の店と以上の店の店舗数をまとめた表となります。もし、500円未満なら`"Cheap"`、500円以上~1000円未満なら`"Reasonable"`、1000円以上なら`"Expensive"`になる`Budget3`変数を作るにはどうすればよいでしょうか。第[-@sec-programming]章で紹介しました`ifelse()`を重ねることも出来ますが、ここでは`case_when()`関数が便利です。まずは、`ifelse()`を使ったコードは以下の通りです。

```{r}
#| eval: false
# ifelse()を使う場合
df |> 
  mutate(Budget3 = ifelse(Budget < 500, "Cheap", 
                          ifelse(Budget >= 500 & Budget < 1000, "Reasonable",
                                 "Expensive"))) |>
  filter(!is.na(Budget3)) |>
  group_by(Pref, Budget3) |>
  summarise(N = n(),         
            .groups = "drop")
```

`case_when()`を使うと以下のような書き方になります。

```{r}
#| eval: false
# case_when()を使う場合
df |> 
  mutate(Budget3 = case_when(Budget < 500                  ~ "Cheap",
                             Budget >= 500 & Budget < 1000 ~ "Reasonable",
                             Budget >= 1000                ~ "Expensive"),
         # 新しく出来た変数をfactor型にその場で変換することも可能
         Budget3 = factor(Budget3, 
                          levels = c("Cheap", "Reasonable", "Expensive"))) |>
  filter(!is.na(Budget3)) |>
  group_by(Pref, Budget3) |>
  summarise(N = n(),         
            .groups = "drop")
```

書く手間の観点では`case_when()`は`ifelse()`と大きく違いはないかも知れませんが、コードが非常に読みやすくなっています。`case_when()`関数の書き方は以下の通りです。

```{r}
#| eval: false
# case_when()の使い方
データフレーム名 |>
  mutate(新変数名 = case_when(条件1 ~ 条件1を満たす場合の結果値, 
                             条件2 ~ 条件2を満たす場合の結果値, 
                             条件3 ~ 条件3を満たす場合の結果値, 
                             ...))
```

似たような機能をする関数として`recode()`関数があります[^handling3-recode]。これは変数の値を単純に置換したい場合に便利な関数です。たとえば、都府県名をローマ字に変換するケースを考えてみましょう。

[^handling3-recode]: `recode()`関数は他にも{car}パッケージでも提供されています。{car}も広く使われている依存パッケージの一つであるため、`dplyr::recode()`と明示した方が良いかも知れません。

```{r}
# recode()を使う場合
df2 |> 
  mutate(Pref2 = recode(Pref,
                        "東京都"   = "Tokyo",
                        "神奈川県" = "Kanagawa",
                        "千葉県"   = "Chiba",
                        "埼玉県"   = "Saitama",
                        "大阪府"   = "Osaka",
                        "京都府"   = "Kyoto",
                        "兵庫県"   = "Hyogo",
                        "奈良県"   = "Nara",
                        "和歌山県" = "Wakayama",
                        .default  = "NA"))
```

使い方は非常に直感的です。

```{r}
#| eval: false
# recode()の使い方
データフレーム名 |>
  mutate(新変数名 = recode(元の変数名,
                            元の値1 =  新しい値1, 
                            元の値2 =  新しい値2, 
                            元の値3 =  新しい値3, 
                            ...,
                            .default = 該当しない場合の値))
```

最後の`.default`引数は、もし該当する値がない場合に返す値を意味し、長さ1のベクトルを指定します。もし、指定しない場合は`NA`が表示されます。また、ここには紹介しておりませんでしたが、`.missing`引数もあり、これは欠損値の場合に返す値を意味します。

もう一つ注意すべきところは、今回はcharacter型変数をcharacter型へ変換したため、「`"東京都" = "Tokyo"`」のような書き方をしました。しかし、numeric型からcharacter型に変換する場合は数字の部分を`` ` ``で囲む必要があります。たとえば、「`` `1` = "Tokyo"``」といった形式です。ただし、character型からnumeric型への場合は「`"東京都" = 1`」で構いません。

`recode()`は値をまとめる際にも便利です。たとえば、`EastJapan`という変数を作成し、関東なら`1`を、それ以外なら`0`を付けるとします。そして、これは`Pref`変数の後に位置づけます。

```{r}
# 都府県を関東か否かでまとめる
df2 |> 
  mutate(EastJapan = recode(Pref,
                            "東京都"   = 1,
                            "神奈川県" = 1,
                            "千葉県"   = 1,
                            "埼玉県"   = 1,
                            "大阪府"   = 0,
                            "京都府"   = 0,
                            "兵庫県"   = 0,
                            "奈良県"   = 0,
                            "和歌山県" = 0,
                            .default  = 0),
         .after = Pref)
```

ただし、関東以外は全て0になるため、以下のように省略することも可能です。

```{r}
# .default引数を指定する場合
df3 <- df2 |> 
  mutate(EastJapan = recode(Pref,
                            "東京都"   = 1,
                            "神奈川県" = 1,
                            "千葉県"   = 1,
                            "埼玉県"   = 1,
                            .default  = 0),
         .after = Pref)

df3
```

新しく出来た`EastJapan`のデータ型はなんでしょうか。

```{r}
class(df3$EastJapan)
```

`EastJapan`はnumeric型ですね。もし、これをfactor型にしたい場合はどうすればよいでしょうか。それは`mutate()`内で`EastJapan`を生成した後に`factor()`関数を使うだけです。

```{r}
# EastJapan変数をfactor型にする
df3 <- df2 |> 
  mutate(EastJapan = recode(Pref,
                            "東京都"   = 1,
                            "神奈川県" = 1,
                            "千葉県"   = 1,
                            "埼玉県"   = 1,
                            .default  = 0),
         EastJapan = factor(EastJapan, levels = c(0, 1)),
         .after = Pref)

df3$EastJapan
```

`EastJapan`がfactor型になりました。実は、`recode`は再コーディングと同時にfactor化をしてくれる機能があります。ただし、`recode()`関数でなく、`recode_factor()`関数を使います。

```{r}
# recode_factor()を使う方法
df3 <- df2 |> 
  mutate(EastJapan = recode_factor(Pref,
                                   "東京都"   = 1,
                                   "神奈川県" = 1,
                                   "千葉県"   = 1,
                                   "埼玉県"   = 1,
                                   .default  = 0),
         .after = Pref)

df3$EastJapan
```

ただし、levelの順番は`recode_factor()`内で定義された順番になることに注意してください。factor型のより詳細な扱いについては第[-@sec-factor]章で解説します。

## 行単位の操作 {#sec-handling3-rowwise}

ここでは行単位の操作について考えたいと思います。第[-@sec-handling1-select]章で使った`myDF1`を見てみましょう。

```{r}
myDF1 <- data.frame(
  ID  = 1:5,
  X1  = c(2, 4, 6, 2, 7),
  Y1  = c(3, 5, 1, 1, 0),
  X1D = c(4, 2, 1, 6, 9),
  X2  = c(5, 5, 6, 0, 2),
  Y2  = c(3, 3, 2, 3, 1),
  X2D = c(8, 9, 5, 0, 1),
  X3  = c(3, 0, 3, 0, 2),
  Y3  = c(1, 5, 9, 1, 3),
  X3D = c(9, 1, 3, 3, 8)
)

myDF1
```

ここで`X1`と`X2`と`X3`の平均値を計算し、`X_Mean`という名の変数にする場合、以下のような書き方が普通でしょう。

```{r}
myDF1 |>
  mutate(X_Mean = mean(c(X1, X2, X3)))
```

あら、なんかおかしくありませんか。1行目の場合、`X1`と`X2`、`X3`それぞれ2、5、3であり、平均値は3.333であるはずなのに3.133になりました。これは2行目以降も同じです。なぜでしょうか。

実は{dplyr}は行単位の計算が苦手です。実際、データフレームというのは既に説明したとおり、縦ベクトルを横に並べたものです。列をまたがる場合、データ型が異なる場合も多いため、そもそも使う場面も多くありません。したがって、以下のような書き方が必要でした。

```{r}
myDF1 |>
  mutate(X_Mean = (X1 + X2 + X3) / 3)
```

先ほどの`mean(c(X1, X2, X3))`は(`X1`列と`X2`列、`X3`列)の平均値です。`X1`は長さ1のベクトルではなく、その列全体を指すものです。つまり、`mean(c(X1, X2, X3))`は`mean(c(myD1F$X1, myDF1$X2, myDF1$X3))`と同じことになります。だから全て3.133という結果が得られました。ただし、後者はベクトル同士の加減乗除になるため問題ありません。実際`c(1, 2, 3) + c(3, 5, 0)`は同じ位置の要素同士の計算になることを既に第[-@sec-datastructure_vector]章で説明しました。

ここで`mean()`関数を使う場合には全ての演算を、一行一行に分けて行う必要があります。ある一行のみに限定する場合、`mean(c(X1, X2, X3))`の`X1`などは長さ1のベクトルになるため、`(X1 + X2 + X3) / 3`と同じことになります。この「一行単位で処理を行う」ことを指定する関数が`rowwise()`関数です。これは行単位の作業を行う前に指定するだけです。

```{r}
myDF1 |>
  rowwise() |>
  mutate(X_Mean = mean(c(X1, X2, X3)))
```

これで問題なく行単位の処理ができるようになりました。今回は変数が3つのみだったので、これで問題ありませんが、変数が多くなると`:`や`starts_with()`、`num_range()`などを使って変数を選択したくなります。この場合は計算する関数内に`c_across()`を入れます。ここでは`X1`列から`X3D`列までの平均値を求めてみましょう。

```{r}
myDF1 |>
  rowwise() |>
  mutate(X_Mean = mean(X1:X3D))
```

実は`rowwise()`関数、2020年6月に公開されたdplyr 1.0.0で注目された関数ですが、昔のdplyrにも`rowwise()`関数はありました。ただし、{purrr}パッケージや{tidyr}パッケージの`nest()`関数などにより使い道がなくなりましたが、なぜか華麗に復活しました。データ分析に使うデータは基本単位は列であるため、実際に`rowwise()`が使われる場面は今の段階では多くないでしょう。また、簡単な作業なら`X1 + X2`のような演算でも対応できます。それでも、覚えておけば便利な関数であることには間違いありません。

## データの結合 {#sec-handling3-merge}

### 行の結合

まずは、複数のデータフレームまたはtibbleを縦に結合する方法について解説します。イメージとしては @fig-handling3_merge_row のようなものです。

![行の結合](Figs/Handling3/Merge1.png){#fig-handling3_merge_row width="75%" fig-align="center"}

行を結合する際には{dplyr}パッケージの`bind_rows()`関数を使います。この関数の使い方は以下の通りです。

```{r}
#| eval: false
# 新しいデータ名ではなく、既にあるデータ名にすると上書きとなる
新しいデータ名 <-  bind_rows(データ1, データ2, ...)
```

それでは早速実際に使ってみましょう。実習のために、4つのtibbleを作成します (tibbleでなくデータフレームでも問題ありません)。

```{r}
# tibble()の代わりにdata.frame()も可
rbind_df1 <- tibble(X1 = 1:3,
                    X2 = c("A", "B", "C"),
                    X3 = c(T, T, F)) # TRUEとFALSEはTはFと省略可能

rbind_df2 <- tibble(X1 = 4:6,
                    X2 = c("D", "E", "F"),
                    X3 = c(F, T, F))

rbind_df3 <- tibble(X1 = 7:9,
                    X3 = c(T, T, T),
                    X2 = c("G", "H", "I"))

rbind_df4 <- tibble(X1 = 10:12,
                    X2 = c("J", "K", "L"),
                    X5 = c("Song", "Yanai", "Hadley"))

rbind_df1 # rbind_df1を出力
rbind_df2 # rbind_df2を出力
rbind_df3 # rbind_df3を出力
rbind_df4 # rbind_df4を出力
```

まずは、`rbind_df1`と`rbind_df2`を結合してみます。この2つのデータは同じ変数が同じ順番で並んでいますね。

```{r}
Binded_df1 <- bind_rows(rbind_df1, rbind_df2)
Binded_df1
```

2つのデータが結合されたことが確認できます。それでは`rbind_df1`と`rbind_df2`、`rbind_df3`はどうでしょうか。確かに3つのデータは同じ変数を持ちますが、`rbind_df3`は変数の順番が`X1`、`X3`、`X2`になっています。このまま結合するとエラーが出るでしょうか。とりあえず、やってみます。

```{r}
Binded_df2 <- bind_rows(rbind_df1, rbind_df2, rbind_df3)
Binded_df2
```

このように変数の順番が異なっても、先に指定したデータの変数順で問題なく結合できました。これまでの作業は{dplyr}パッケージの`bind_rows()`を使わずに、R内蔵関数の`rbind()`でも同じやり方でできます。`bind_rows()`の特徴は、変数名が一致しない場合、つまり今回の例だと`rbind_df4`が含まれる場合です。`rbind_df1`から`rbind_df3`までは順番が違っても`X1`、`X2`、`X3`変数で構成されていました。一方、`rbind_dr4`には`X3`がなく、新たに`X4`という変数があります。これを`rbind()`関数で結合するとエラーが出力されます。

```{r}
#| error: true
# rbind()を使う場合
rbind(rbind_df1, rbind_df2, rbind_df3, rbind_df4)
```

一方、`bind_rows()`はどうでしょうか。

```{r}
Binded_df3 <- bind_rows(rbind_df1, rbind_df2, rbind_df3, rbind_df4)
Binded_df3
```

`X1`から`X4`まで全ての列が生成され、元のデータにはなかった列に関しては`NA`で埋められています。

他にも`bind_rows()`には`.id`という便利な引数があります。これは結合の際に新しい列を追加し、結合前のデータごとの固有の値を割り当ててくれます。たとえば、`rbind_df1`と`rbind_df2`を結合し、それぞれ`"Data1"`、`"Data2"`という値を割り当てるとしましょう。この場合、2つの表を`list()`関数でまとめ、`.id`には新しく追加される列名を指定します。

```{r}
bind_rows(list("Data1" = rbind_df1, "Data2" = rbind_df2),
          .id = "Data")
```

予めリストを作っておいて、それを`bind_rows()`に渡すこともできます。

```{r}
rbind_list <- list("Data1" = rbind_df1, "Data2" = rbind_df2)

bind_rows(rbind_list, .id = "Data")
```

このように`bind_rows()`は`rbind()`よりも便利です。しかし、`bind_rows()`の完全勝利かというと、そうとは限りません。自分で架空した複数のデータフレーム、またはtibbleを結合する際、「このデータは全て同じ変数を持っているはず」と事前に分かっているなら`rbind()`の方が効果的です。なぜなら、変数名が異なる場合、エラーが出力されるからです。`bind_rows()`を使うと、コーディングミスなどにより、列名の相違がある場合でも結合してくれてしまうので、分析の結果を歪ませる可能性があります。

### 列の結合

実はデータ分析においてデータの結合といえば、列の結合が一般的です。これは @fig-handling3_merge_col のような操作を意味します。

![列の結合](Figs/Handling3/Merge2.png){#fig-handling3_merge_col width="75%" fig-align="center"}

まずは、本章で作成した`df2`をもう一回作ってみます。

```{r}
df2 <- df |>
  group_by(Pref) |>
  summarise(Budget_Mean = mean(Budget, na.rm = TRUE),
            ScoreN_Sum  = sum(ScoreN, na.rm = TRUE),
            Score_Mean  = mean(Score, na.rm = TRUE),
            N           = n(),
            .groups     = "drop")

df2
```

ラーメン屋の店舗ですが、たしかにデータには埼玉、東京、大阪などは1000店舗しか入っておりません。実はもっと多いですが、ぐるなびAPIの仕様上、最大1000店舗しか情報取得が出来ないからです。ここに実際の店舗数が入っている新しいデータセット、[Ramen2.csv](Data/Ramen2.csv)があります。これを読み込み、`df3`という名で格納しましょう。

```{r}
df3 <- read_csv("Data/Ramen2.csv")

df3
```

```{r}
#| label: tbl-handling2_dataset
#| echo: false
#| tbl-cap: "`Ramen2.csv`の詳細"
tibble(Var = c("`Pref`", "`Pop`", "`Area`", "`RamenN`", "`Turnout`", 
               "`LDP`", "`CDP`", "`DPFP`", "`Komei`", "`JIP`", 
               "`JCP`", "`SDP`", "`Reiwa`", "`NHK`", "`HRP`"),
       Desc = c("都道府県名",
                "日本人人口 (2015年国勢調査)",
                "面積 (2015年国勢調査)",
                "ぐるなびに登録されたラーメン屋の店舗数",
                "2019年参院選: 投票率 (比例)",
                "2019年参院選: 自民党の得票率 (比例)",
                "2019年参院選: 立憲民主党の得票率 (比例)",
                "2019年参院選: 国民民主党の得票率 (比例)",
                "2019年参院選: 公明党の得票率 (比例)",
                "2019年参院選: 日本維新の会の得票率 (比例)",
                "2019年参院選: 日本共産党の得票率 (比例)",
                "2019年参院選: 社会民主党の得票率 (比例)",
                "2019年参院選: れいわ新選組の得票率 (比例)",
                "2019年参院選: NHKから国民を守る党の得票率 (比例)",
                "2019年参院選: 幸福実現党の得票率 (比例)")) |>
  gt() |> 
  cols_label("Var" = "変数名", "Desc" = "説明") |> 
  fmt_markdown(columns = 1)
```

本データは都道府県ごとの人口、面積、ぐるなびに登録されたラーメン屋の店舗数、2019年参議院議員通常選挙の結果が格納されています。人口と面積は2015年国勢調査、ぐるなびの情報は2020年6月時点での情報です。

`df2`にデータ上の店舗数ではなく、実際の店舗数を新しい列として追加したい場合はどうすれば良いでしょうか。簡単な方法としては`df3`から情報を取得し、それを自分で入れる方法です。

```{r}
df3 |>
  filter(Pref %in% df2$Pref) |> # <1>
  select(Pref, RamenN)          # <2>
```

1. df2のPrefベクトルの要素と一致するものに絞る
2. 都道府県名とラーメン屋の店舗数のみ抽出

そして、この情報を`df2$RamenN <- c(415, 1106, 1254, ...)`のように追加すればいいですね。

しかし、このような方法は非効率的です。そもそも`df3`から得られた結果の順番と`df2`の順番も一致しないので、一々対照しながらベクトルを作ることになります。ここで登場する関数が{dplyr}の`*_join()`関数群です。この関数群には4つの関数が含まれており、以下のような使い方になります。

```{r}
#| eval: false
# 新しいデータ名ではなく、データ1またはデータ2の名前に格納すると上書きとなる

# 1. データ1を基準に結合
新しいデータ名 <-  left_join(データ1, データ2, by = "共通変数名")

# 2. データ2を基準に結合
新しいデータ名 <- right_join(データ1, データ2, by = "共通変数名")

# 3. データ1とデータ2両方に共通するケースのみ結合
新しいデータ名 <- inner_join(データ1, データ2, by = "共通変数名")

# 4. データ1とデータ2、どれかに存在するケースを結合
新しいデータ名 <-  full_join(データ1, データ2, by = "共通変数名")
```

4つの関数の違いについて説明する前に、`by`引数について話したいと思います。これは主にキー (key)変数と呼ばれる変数で、それぞれのデータに同じ名前の変数がある必要があります。`df2`と`df3`だとそれが`Pref`変数です。どの`*_join()`関数でも、`Pref`の値が同じもの同士を結合することになります。

データのキー変数名が異なる場合もあります。たとえば、データ1の都道府県名は`Pref`という列に、データ2の都道府県名は`Prefecture`という列になっている場合、`by = "Pref"`でなく、`by = c("データ1のキー変数名" = "データ2のキー変数名")`、つまり、`by = c("Pref" = "Prefecture")`と指定します。

それでは、`df3`から都道府県名とラーメン屋の店舗数だけ抽出し、`df4`として格納しておきます。

```{r}
df4 <- df3 |>
  select(Pref, RamenN)

df4
```

これから共通変数名の値をキー (key)と呼びます。今回の例だと`Pref`が`df2`と`df4`のキー変数であり、その値である`"東京都"`、`"北海道"`などがキーです。

まずは、`inner_join()`の仕組みについて考えます。これは`df2`と`df4`に共通するキーを持つケースのみ結合する関数です。`df4`には`"北海道"`というキーがありますが、`df2`にはありません。したがって、キーが`"北海道"`のケースは結合から除外されます。これをイメージにしたものが @fig-handling3_merge_inner です[^merge1]。それぞれ3 $\times$ 2 (3行2列)のデータですが、キーが一致するケースは2つしかないため、結合後のデータは3 $\times$ 2となります。

[^merge1]: これらの図は @Grolemund_Wickham:2016 を参考にしました。

![`inner_join()`の仕組み](Figs/Handling3/Merge_Inner.png){#fig-handling3_merge_inner width="75%" fig-align="center"}

実際にやってみましょう。

```{r}
inner_join(df2, df4, by = "Pref")
```

共通するキーは9つのみであり、結果として返されたデータの大きさも9 $\times$ 6です。`df2`に足された`df4`は2列のデータですが、キー変数である`Pref`は共通するため、1列のみ足されました。キー変数を両方残す場合は`keep = TRUE`引数を追加してください。

一方、`full_join()`は、すべてのキーに対して結合を行います ( @fig-handling3_merge_full )。たとえば、`df2`には`"北海道"`というキーがありません。それでも新しく出来上がるデータには北海道の列が追加されます。ただし、道内店舗の平均予算、口コミ数などの情報はないため、欠損値が代入されます。

![`full_join()`の仕組み](Figs/Handling3/Merge_Full.png){#fig-handling3_merge_full width="75%" fig-align="center"}

それでは実際、結果を確認してみましょう。今回は結合後、`RamenN`が大きい順で出力します。

```{r}
full_join(df2, df4, by = "Pref") |>
  arrange(desc(RamenN)) # ぐるなびに登録された店舗の多い都道府県から出力
```

`df2`にはなかった北海道や愛知県などの行ができました。そして、`df2`にはない情報はすべて欠損値 (`NA`)となりました。

続いて、`left_join()`ですが、これは先に指定したデータに存在するキーのみで結合を行います ( @fig-handling3_merge_left )。今回は`df2`が先に指定されていますが、`df2`のキーは`df4`のキーの部分集合であるため、`inner_join()`と同じ結果が得られます。

![`left_join()`の仕組み](Figs/Handling3/Merge_Left.png){#fig-handling3_merge_left width="75%" fig-align="center"}

一方、`right_join()`は`left_join()`と逆の関数であり、後に指定したデータに存在するキーを基準に結合を行います（ @fig-handling3_merge_right ）。後に指定された`df4`のキーは`df2`のキーを完全に含むので、`full_join()`と同じ結果が得られます。

![`right_join()`の仕組み](Figs/Handling3/Merge_Right.png){#fig-handling3_merge_right width="75%" fig-align="center"}

これからは`df2`と`df4`を結合することになりますが、この2つのtibbleの大きさが異なります。`df2`は9つの都府県のみであるに対し、`df4`は47都道府県全てのデータが入っているからです。

ここまではキー変数が一つである場合についてのみ考えましたが、複数のキー変数が必要な場合もあります。たとえば、市区町村の人口・面積データと市区町村の投票率データを結合するとします。各自治体に与えられている「[全国地方公共団体コード](https://www.soumu.go.jp/denshijiti/code.html)」が両データに含まれている場合は、このコードをキー変数として使えば問題ありませんが、市区町村名をキー変数として使わざる得ないケースもあるでしょう。しかし、キー変数が複数ある場合もあります。たとえば、府中市は東京都と広島県にありますし、太子町は大阪府と兵庫県にあります。この場合、市区町村名のみでケースをマッチングすると、重複されてマッチングされる恐れがあります。この場合はキー変数を増やすことで対処できます。たとえば、同じ都道府県なら同じ市区町村は存在しないでしょう[^merge2]。キー変数を複数指定する方法は簡単です。たとえば、市区町村名変数が`Munip`、都道府県名変数が`Pref`なら`by = c("Munip", "Pref")`と指定するだけです。

[^merge2]: 行政区も含むなら多くの政令指定都市にある「南区」とか「北区」が重複しますが、ここでは考えないことにしましょう。

最後に、キー変数以外の変数名が重複する場合について考えましょう。これはパネルデータを結合する時によく直面する問題です。同じ回答者に2回の調査を行った場合、回答者のIDでデータを結合することになります。ただし、それぞれのデータにおいて回答者の性別に関する変数が`F1`という名前の場合、どうなるでしょうか。同じデータの同じ名前の変数が複数あると、非常に扱いにくくなります。実際の結果を見てみましょう。

```{r}
Wave1_df <- tibble(ID = c(1, 2, 3, 4, 5),
                   F1 = c(1, 1, 0, 0, 1),
                   F2 = c(18, 77, 37, 50, 41),
                   Q1 = c(1, 5, 2, 2, 3))

Wave2_df <- tibble(ID = c(1, 3, 4, 6, 7),
                   F1 = c(1, 0, 0, 0, 1),
                   F2 = c(18, 37, 50, 20, 62),
                   Q1 = c(1, 2, 2, 5, 4))

full_join(Wave1_df, Wave2_df, by = "ID")
```

それぞれの変数名の後に`.x`と`.y`が付きます。この接尾辞（suffix）は`suffix`引数を指定することで、分析側からカスタマイズ可能です。たとえば、接尾辞を`_W1`、`_W2`にしたい場合は

```{r}
full_join(Wave1_df, Wave2_df, by = "ID", suffix = c("_W1", "_W2"))
```

のように、データ1とデータ2それぞれの接尾辞を指定するだけです。

### キー変数のない列の結合

`*_join()`関数群は`by`引数でキー変数を指定する必要がある。一方、キー変数がなく、単純に2つの表を横に結合するケースも稀ながらあろう。以下の`my_data1`と`my_data2`は共通するキー変数がなく、単純に横に並べれば良い。

::::{.columns}
:::{.column width=49%}
```{r}
my_data1 <- tibble(ID = c("Tokyo", "Osaka", "Kochi"),
                   X1 = c("A", "B", "C"),
                   X2 = c(TRUE, TRUE, FALSE))

my_data1
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
```{r}
my_data2 <- tibble(X3 = c(1, 3, 2),
                   X4 = c("Ramen", "Sauce", "Katsuo"))

my_data2
```
:::
::::

　この場合は`bind_cols()`関数を使用する。`()`内には結合するtibble、またはdata.frameのオブジェクト名を入れるだけだ（3つ以上でも良い）。

```{r}
bind_cols(my_data1, my_data2)
```

　ちなみに`bind_cols()`と同じ機能を持つ`cbind()`関数もあり、こちらはR内蔵関数だ。違いがあるとすれば、`cbind()`の場合、**必ず**data.frameクラスで結果を返す点だ。`my_data1`と`my_data2`はtibbleクラスを持つが、`cbind()`で結合するとdata.frameクラスになる。一方、`bind_cols()`の場合、先に指定したオブジェクトのクラスと同じクラスが返される。

```{r}
# cbind()
cbind(my_data1, my_data2) |> class()

# bind_cols(data.frame, data.frame)
bind_cols(as.data.frame(my_data1), as.data.frame(my_data2)) |> class()
# bind_cols(data.frame, tibble)
bind_cols(as.data.frame(my_data1), my_data2) |> class()
# bind_cols(tibble, data.frame)
bind_cols(my_data1, as.data.frame(my_data2)) |> class()
# bind_cols(tibble, tibble)
bind_cols(my_data1, my_data2) |> class()
```