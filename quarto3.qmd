# Quarto [3]

:::{.callout-important}
## 本項目は執筆途中です！

本章は完成後、既存のR MarkdownとQuartoの内容の一部を代替しますが、現時点では参考程度にしてください。
:::

## YAMLヘッダー

　まず、簡単なスライドから作ってみよう。適宜プロジェクトを作成し、File > New File > Quarto Presentationを選択する。表示されるダイアログでUse visual markdown editorのチェックを**外し**、Createをクリックする。Quarto PresentationとQuarto Documentの違いは、YAMLヘッダーの内容であり、`.qmd`ファイルを使うという点では同じだ。もう少し具体的に言うと、`format: html`が`fotmat: revealjs`に代わり、サンプルがスライドの例になっている程度だ。極めて単純なスライドじゃない限り、どうせYAMLヘッダーを大幅に修正することになるので、Quarto Documentを選択しても良い。

　続いて、YAMLヘッダーをとりあえず以下の内容で置き換えてから保存し、レンダーしてみよう。スライドを全体画面で表示する場合はキーボードの{{< kbd F >}}キー（**F**ull screen）を押せば良い。

:::{.panel-tabset}
## コード

```{.yaml}
---
title: "ほとんど無害な『私たちのR』"
subtitle: "『私たちのR』をR教の聖典にすべき"
date: "2024/6/22"
author: "<ruby>羽鳥<rt>ハドリー</rt></ruby>ウィッカム"
institute: "整然大学"
format:
  revealjs: 
    width: 1600
    height: 900
    slide-number: true
    footer: <https://www.jaysong.net/RBook/>
    theme: white
---
```

## 結果

```{=html}
<iframe class="slide-deck" src="reveal_demo/01/index.html" width="100%" style="aspect-ratio: 16 / 9.5;"></iframe>
```
:::

　ここでは`revealjs:`以降の項目について説明する。まず、スライドの大きさは`width`と`height`で指定できる。デフォルトはそれぞれ800と600であるが、使用するプロジェクターやモニターの縦横比が4:3ならこれでも良いだろう。しかし、16:9なら横を長めに設定すると空間に無駄がなくなる。また、あまりないだろうが、UWQHDモニターとかでプレゼンテーションするなら21:9でも良いだろう。続いて、`slide-number: true`（または、`true`の代わりに`c`）でスライド番号も付けよう。デフォルトは`false`になっているため、スライド番号を出したい場合は必ず指定する必要がある。最後に`footer`でスライドの中央下段のテキストを指定する。

　とりあえずこれくらいで通常のスライドは作成できる。もし、見た目（テーマ）を変更したいなら`theme:`から変えよう。デフォルトは`white`だが、他にも`black`、`sky`、`night`などいくつかの既定テーマがある。ポジティブに言えばシンプルなテーマではあるが、お世辞でも綺麗なテーマとは言い難い。自分でテーマをいじったり、修正したい場合は`.scss`ファイルを追加してテーマをカスタマイズする必要があるが、これらについては次章で解説する。

　また、よく使いそうな機能がフォントサイズの指定だが、残念ながらフォントサイズの調整はできない。ただ、フォントサイズが固定されていることを考えると、`width`と`height`の調整することで間接的にサイズの調整はできる。つまり、`width`と`height`を小さくすればするほど、フォントサイズは（相対的に）大きくなる。厳密に調整したい場合は、別途の`.scss`ファイルを用意し、`theme: [default, ほにゃほにゃ.scss]`のようにスタイルを修正する必要があるが、SCSSの使い方については次章で解説する。


## スライドの作り方

　YAMLヘッダーを設定すると表紙スライドは自動的に生成される。重要なのは本文の方だが、これは通常のHTML文書と同じ感覚で使える。大事なのはページの区切りとセクション（章）の区切りだろう。この区切りに使用するのは見出し（`#`や`###`など）だ。ページは`##`で、セクションは`#`で区切られる。つまり、ちゃんと構造化した文書を意識しながらHTML文書を作ったら`format: html`を`format: revealjs`に変更するだけで、そこそこ悪くないスライドが出来たりもする。

　その他の書き方は通常のHTML文書と同じだ。図表の挿入、段組み、タブセット、コールアウトなどHTML文書で使えた文法はここでも全て使えると思っても良いだろう。

:::{.panel-tabset}
## コード

```{.yaml}
---
title: "ほとんど無害な『私たちのR』"
subtitle: "『私たちのR』をR教の聖典にすべき"
date: "2024/6/22"
author: "<ruby>羽鳥<rt>ハドリー</rt></ruby>ウィッカム"
institute: "整然大学"
format:
  revealjs: 
    width: 1600
    height: 900
    slide-number: true
    footer: <https://www.jaysong.net/RBook/>
    theme: white
    embed-resources: true
---

## 概要

::::{.columns}
:::{.column width=30%}
![](https://jaysong.net/RBook/Figs/Cover.png)
:::

:::{.column width=70%}
- 近年、爆発的に売り上げを伸ばした『私たちR』の紹介
   - 2.7秒に1冊売れているらしい。
- メリットとデメリットの紹介
:::
::::

# 『私たちのR』のここがすごい!

## ネコが書いた本格R入門書

- 世界人口を8割を占めているネコのための本格R入門書
- ネコの、ネコによる、ネコのためのR入門書

## ふざけた例が満載

- 世界各国の社会経済的データなどふざけた例が多い
- ラーメン屋データのような真面目な例も少なめではあるが、一応ある。

# 『私たちのR』のここがダメ!

## ネコしか読めない

- にゃーにゃにゃーにゃーにゃーにゃにゃにゃ
- にゃーにゃーにゃーにゃにゃーにゃにゃ
- にゃーにゃにゃーにゃーにゃーにゃにゃ

## ふざけた例しかない

- にゃーにゃにゃーにゃーにゃーわん！わん！わん！
- にゃーにゃーわんーにゃにゃーにゃにゃ
- にゃーにゃにゃーにゃーわんーにゃにゃ
```

## 結果

```{=html}
<iframe class="slide-deck" src="reveal_demo/02/index.html" width="100%" style="aspect-ratio: 16 / 9.5;"></iframe>
```

:::


　スライドの見た目をカスタマイズしないのであれば、以上の内容だけで立派なスライドが作成できる。以下ではスライド（reveal.js）ならではの機能をいくつか紹介する。

## 各種機能

* 行の強調
* incremental list / fragments
* 右下のロゴ
* ホワイトボード
* ペン機能
* スピーカービュー（{{< kbd S >}}キー）

```{.markdown}
## 高知のおすすめラーメン（順不同）

宋が訪問したことのある店のみ紹介（**太字**は大阪支店あり）

1. 蔵木（牛モツつけ麺）
1. **まんしゅう**（じゃんめん+白ご飯）
1. 鶏と魚（メニューがよく変わる）
1. チョンマゲ（ラーメン零）
1. **とさの家**（ラーメン+のり多め+硬め濃いめ少なめ）
1. 呑兵衛屋台（しじみラーメン）
1. 谷口食堂（鍋焼きラーメン）

::: {.notes}
- 鶏と魚はドライトマトが乗っているやつがあれば間違いない
- チョンマゲはラーメンよりも玉子焼き飯がうまいことも言っておく
- 谷口食堂は鍋焼きラーメン発祥の店だが、そもそも鍋焼きラーメンが宋の好みではない
:::
```

## スライドの配付

　Quartoで作成可能なスライドのフォーマットは[reveal.js](https://revealjs.com/)ベースの`.html`、$\LaTeX$（Beamer）ベースの`.pdf`、Microsoft Powerpointの`.pptx`である。`.pdf`や`.pptx`は図表を含む全ての内容が一つのファイルに保存されているため、そのファイルだけ共有すれば良い。しかし、多くの人が利用するであろう`.html`ファイルを他の人に共有したり、学会発表のためにUSBメモリに入れる際は注意が必要だ。

`ほにゃほにゃ_files`フォルダーも忘れずに共有する

ネットにアップロードして共有する（Quarto Pub、GitHub Pagesなど）。

### 一つのHTMLファイルに統合する

自己完結型（self-contained）HTML

```yaml
format:
  html:
    embed-resources: true
```

数式をレンダリングする数式ライブラリ（MathJaxとKaTeX）がサイズが大きいため、`embed-resources: true`でも自己完結型HTMLに含まれず、ネット経由で取得することになる。しかし、インターネットが使えない環境になるとせっかくの数式がレンダリングされない。この場合、`self-contained-math: true`を追加すると、数式ライブラリもHTMLファイルに保存される。ただ、この場合、スライドとは思えないサイズのHTMLになるため、注意が必要だ。

```yaml
format:
  html:
    embed-resources: true
    self-contained-math: true
```

### PDF出力

　HTMLファイルを一つにまとめた場合、ファイルのサイズが大きくなる。大量の図が使用されたり、数式ライブラリまでHTMLファイルに含めると数十MBになる可能性もある。この場合、PDF形式で出力すればサイズを大幅に減らせることができよう。この場合、タブセット[^pdf-tabset]、スクロールのような**インタラクティブ（動的）な機能はすべて無効になる**が、そういった要素がないスライドであれば、自己完結型HTMLよりもPDFの方が合理的だろう。

[^pdf-tabset]: 2つ以上のタブで構成されたタブセットの場合、最初のタブのみが印刷される。

　しかし、残念ながら2024年5月現在、HTML形式スライドをPDFに変換する方法は限られており、見た目もお世辞でも綺麗とは言えない。むろん、内容が変わったり、本来見えたものが見えなくなったりすることはない。それでも構わないという読者は以下のやり方でHTMLスライドをPDFに変換できる。用意するものはBlinkベースのウェブブラウザーだ。代表的にはGoogle社のChromeとChromiumがあり、Microsoft EdgeやOperaもBlinkエンジンを使用している。

　HTMLファイルのPDF変換は言い換えれば、PDF形式で印刷することを意味する。

1. Blinkエンジンを使用するブラウザーでスライドを開く。
2. スライドが表示されたらキーボードの「E」、または「e」キーを押す。
3. macOSならCommand（⌘） + P、WindowsならControl（Ctrl）+ Pを押す。
4. 出力先をPDFにする。
5. 用紙のレイアウトを横向き（Landscape）に指定する。
6. 余白をなしにする。
7. 背景画像のオプションにチェックを入れる。
8. 「保存」をクリックする（ブラウザーによっては「印刷」と表示される）。

　このやり方だと最後に余計な白紙のページが現れるが、これは手動で消そう（無害なのでほっといてもOK）。

### Beamer

　以上の方法は「HTMLファイルをPDFに変換する」方法だ。HTML上で見やすいスライドをPDFに変換したからといってそのスライドが見やすいとは限らない。ベストは最初からスライドをPDFで作ることだろう。

```yaml
---
title: "ほとんど無害な『私たちのR』"
subtitle: "『私たちのR』をR教の聖典にすべき"
date: "2024/6/22"
author: "\\ltjruby{羽鳥}{ハドリー}ウィッカム"
institute: "整然大学"
format: 
  beamer:
    pdf-engine: lualatex
    theme: metropolis
    classoption:
      - 10pt
    mainfont: "Noto Sans JP"
    CJKmainfont: "Noto Sans JP"
    include-in-header: 
      text: |
        \usepackage{luatexja-ruby}
knitr: 
  opts_chunk: 
    dev: "ragg_png"
    dpi: 300
    fig.align: "center"
    echo: false
    message: false
    warning: false
---
```

　日本語フォントは`mainfont`と`CJKmainfont`で指定できるため、適宜修正すること。UbuntuでNotoフォントを入れた場合、高確率で`"Noto Sans CJK JP"`になるし、macOSならヒラギノ（`"Hiragino Sans"`）、Windowsなら游ゴシック（`"Yu Gothic"`）で良いだろう。また、ルビを使いたい場合は`luatexja-ruby`パッケージの読み込みも忘れないこと。テーマは[Metroplis](https://github.com/matze/mtheme)を指定したが（ちなみに`Metroplis`にするとエラーが発生する。）、省略した場合デフォルトテーマになる。他にも`CambridgeUS`、`Singapore`など様々なテーマが使える。

### まとめ

* PDF形式にこだわりたい：最初からBeamer
* HTMLのまま配りたい：全てのリソースを格納する
* とりあえず印刷がしたい：Chromeで印刷