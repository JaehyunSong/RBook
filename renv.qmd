# 分析環境の管理 {#sec-renv}

```{r}
#| label: common
#| include: false
source("_common.R")
```

　分析結果を再生する際に最も重要なのは**データ**と**コード**だろう。この2つがあれば、多くの場合、分析結果を再生することができる[^seed]。しかし、データとコード以外にも再生に欠かせない要素があり、それが**パッケージ**だ。現在において、R内臓の関数のみで構成されたファイルは極めて稀であり、外部のパッケージを用いることが多い。しかし、パッケージは時間の流れにつれ、徐々に改善されていく。この改善の段階において、既存の関数がなくなったり、関数名が変わったり、推定のアルゴリズムが変わったりするケースもある。この場合、データとコードだけでは再生ところか、エラーが発生してしまうかも知れない。したがって、分析を再生するためには分析時の環境そのものも同じにすることが望ましい。本章では{renv}による分析環境の管理/共有について紹介する。

[^seed]: ただし、乱数を発生させる場合はシード（seed）を固定する必要がある。多くの場合はコード内にシード固定の関数が（`sed.seed()`）含まれている。乱数発生の関数が含まれているにも関わらず、シード固定の関数がコード内に含まれていない場合、100%再生することはできないものの**ほぼ**同じ結果が再生できる。

## 分析環境と再生可能な研究

{renv}: **r**eproducible **env**ironments

* 例1: 古いパッケージではできなかったものが、今はできるようになっている
   * {ggplot2}の`geom_pointrange()`の場合、昔は点と垂直線のみが引けた（マッピングは`x`、`y`、`ymin`、`ymax`のみ可能）。
   * 点と水平線の描きたい場合は、`coord_flip()`で座標系を回転する必要があった。
   * 今の{ggplot2}だと、`xmin`と`xmax`にもマッピングができるため、`coord_flip()`不要
   * 多分いないと思うが、現在の仕様でコードを古い{ggplot2}で走らせるとエラーが出る。
* 例2: 昔はできたものの、今はできない
   * 華麗に復活した{dplyr}の`rowwise()`は、無くなりかけていた関数
   * {tidyr}の`gather()`と`spread()`は近い将来、無くなる
* 例3: 仕様が変わり、関数名、仮引数名、実引数の使用可能なクラスが異なる場合
   * 開発途上のパッケージだとあり得る。

{revn}のインストール

```r
pacman::p_load(renv)
```

## 分析環境の保存

プロジェクトの使用を強く推奨 (第[-@sec-rbasic-project]章を参照)

分析を始める前: コンソールに

```r
renv::init()
```

分析が終わった後: コンソールに

```r
renv::snapshot()
```

## 分析環境の再生

```r
renv::restore()
```

## より詳しく知るために

　{renv}の詳細は{renv}[開発者のページ](https://rstudio.github.io/renv/articles/renv.html)を参照されたい。

* <https://rstudio.github.io/renv/articles/renv.html>

{pacman}との相性は大丈夫だろうか。また、GitHubから導入したパッケージの場合は?
