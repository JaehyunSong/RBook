# Rパッケージ {#sec-packages}

```{r packages-common}
#| include: false
source("_common.R")
knitr::opts_chunk$set(eval = FALSE)
```

## パッケージとは {#sec-packages_intro}

　Rには様々な関数 (functions) が用意されている。少しだけ例を挙げると、平均値を求める`mean()`、合計を求める`sum()`、線形回帰分析を行う`lm()`、平均値の検定を行う`t.test()`などがある。他にも多くの関数があり、ここにすべてを列挙することはできない。

　Rの関数は、誰にでも作ることができる。データ分析の方法は日々進歩し、Rがあらかじめ提供する関数だけでは数百行のコードが必要で、不便なときもある。そんな分析を、たった1行のコードで実行できるようにする便利な関数を、Rユーザはたくさん作ってきた。そのような関数をひとまとめにして他のユーザと共有できるようにしたものが**パッケージ**である。
　
　これまでに、グラフ作成に特化したパッケージ、機械学習に特化したパッケージ、テキスト分析に特化したパッケージなど、数千のRパッケージが開発されてきた。新たなパッケージの開発が、Rが幅広い問題に対応することを容易にしている。パッケージの豊富さがR最大のメリットであると言ってもよい。誰かが新しい分析手法を提案したら、数日内、あるいは提案と同時に（ときには、論文が公式に出版される前に！）Rパッケージとして公開されるケースが多い。

　本章ではパッケージをインストールし、読み込む方法について説明する。また、パッケージの管理をアシストするパッケージ、{pacman}の使い方についても紹介する。


## パッケージのインストール {#sec-packages_install}

　Rの環境は何かを作るための作業台に似ている。作業台にはモノを作るための材料だけでなく、工具・道具セットなども置かれる。この作業台がRにおける「環境 (environment) 」であり、材料がベクトルや行列、データフレームなどのオブジェクト、工具セットがパッケージである。オブジェクトについては後で説明することにして、ここではパッケージについて考えよう。

　何かを作るとき、素材・材料だけでなく、なんらかの道具が必要となることが多い。Rにはあらかじめいくつかの必須道具セットが用意されているが、さらに様々な道具セットを追加して使うこともできる。そして、それらの道具セットの各々には、複数の道具が含まれている。道具セット（Rのパッケージ）に含まれるひとつひとつの道具のことを、Rでは「関数 (function) 」と呼ぶ。それらの道具セットを購入し、作業台の近くの棚に収納することがパッケージをインストールすることにあたる。

```{r packages-install-1}
install.packages("パッケージ名")
```

　これらのパッケージは、[CRAN](https://cran.r-project.org)というRの公式道具屋[^cran-free]からダウンロードし、インストールすることができる。もう一つの大きな道具屋として、[GitHub](https://github.com)がある[^repo_etc]。[GitHub](https://github.com)は個人経営の道具屋が集まっているモールのようなものである。[GitHub](https://github.com)を利用するためには、あらかじめ[CRAN](https://cran.r-project.org)から{devtools}、または{remotes}というパッケージをインストールしておく必要がある。

[^cran-free]: 道具「屋」とは言っても、パッケージは無料である。

[^repo_etc]: 他にも[GitLab](https://about.gitlab.com)、[Bitbucket](https://bitbucket.org/product/)などがある。

　ここでは{devtools}というパッケージをインストールしてみよう。CRANからパッケージをインストールするには、`install.packages()` という関数を使う。{devtools}はCRANに登録されているので、`install.packages()`関数でインストールする。パッケージ名を`"`（引用符）で囲む必要があるので、注意されたい。

```{r packages-install-2}
install.packages("devtools")
```

　[CRAN](https://cran.r-project.org)に登録されていないパッケージを[GitHub](https://github.com)からインストールするときは、{devtools}または{remotes}の`install_github()`関数を使う。

```{r packages-install-3}
# あらかじめ{devtools}、または{remotes}をインストールしておく
# {remotes}をインストールした場合は、remotes::install_github()を使用する
devtools::install_github("作成者のGitHubのID/パッケージ名")
```

　たとえば、筆者 (Song) が作成した{[BalanceR](https://github.com/JaehyunSong/BalanceR)}パッケージをインストールするために、以下のコードを入力して実行する。

```{r packages-install-4}
# {remotes}をインストールした場合は、
# remotes::install_github("JaehyunSong/BalanceR")
devtools::install_github("JaehyunSong/BalanceR")
```

　ここで`JaehyunSong`はSongのGitHub IDであり、`BalanceR`はパッケージ名である。


## パッケージの読み込み {#sec-packages_library}

　先ほど述べたように、パッケージのインストールは道具セットの購入と収納に似ている。ただし、実際に道具セットを使うためには、それを自分の作業台に乗せなければならない[^default-pacakge] [^load_direct]。この作業がパッケージの読み込み (load) である。インストールしたパッケージを読み込むには`library()`または`require()`関数を使う。`require()`は関数内に使う目的で設計された関数だが、パッケージを読み込むという点ではどちらを使っても大差ない。

![Rパッケージと作業環境](Figs/Packages/Package_Workbench.jpg){#fig-packages-load-1 fig-align="center" width="800px"}

[^default-pacakge]: `mean()`や`sum()`、`lm()`のようによく使われる関数（=工具） はRの起動と同時に作業台の上に乗せられる。

[^load_direct]: 作業台上に乗せずに、収納棚から必要なときだけ道具を取り出して使うこともできる。この場合、`パッケージ名::関数名()`のように関数を使う。頻繁に使うパッケージなら読み込む方が効率的だが、1、2回くらいしか使わないパッケージなら、このような使い方をしてもよいだろう。

```{r packages-load-2}
library(パッケージ名)
#または
require(パッケージ名)
```

　読み込まれたパッケージはセッションが開かれている間のみ有効である。一通りの作業が終わり、作業部屋から退出すると、作業台上の道具セットは収納棚に自動的に戻される。つまり、RまたはRStudioを閉じると、どのパッケージを読み込んでいたかという情報がリセットされる。したがって、次にRStudio を使うときに同じパッケージを利用するなら、それを読み込む作業をあらためて行う必要がある。

　もしかすると、作業の途中に読み込んだパッケージを作業台から取り除きたいときがあるかもしれない。そんなときは、`detach()`関数を使う。対象となるパッケージ名の前に `package:` と付け加える必要があることに注意されたい。

```{r packages-load-3}
detach("package:パッケージ名")
```


## パッケージのアップデート {#sec-packages_update}

　Rパッケージはバグが修正されたり、新しい機能 (=関数) が追加されるなど、日々更新される。基本的には[^ex-packs]、利用するパッケージを最新版に更新（アップデート）した方が良いだろう。パッケージの更新方法は、パッケージのインストール方法と同じである。{dplyr}というパッケージを最新版にアップデートしたい場合、`install.packages("dplyr")`を実行すればよい。
　
[^ex-packs]: ただし、分析の再生性 (reproducibility) という観点から、パッケージを更新したくない（古いバーションを維持したい）ということもあり得る。分析過程を記録する際には、どのバージョンを使ったかということまで含めて記録をとるべきである。

　しかし、Rを使い続けるとインストール済みのパッケージの数はどんどん増える。そうなると、ひとつひとつのパッケージを個別にアップデートするのは面倒になってくる。そもそも既に最新版が入っていて（または開発休止/中止により）アップデートが不要なパッケージもあるかもしれない。そんなときは、RStudioでアップデートが必要なパッケージのリストを表示し、それらを一挙にアップデートすることができる。RStudioのPackagesペインにある "Update" をクリックすると、アップデート可能なパッケージの一覧が表示される。ここでアップデートしたいパッケージの左にチェックをするか、下段の "Select All" を選択して "Install Updates" をクリックすれば、チェックされているすべてのパッケージがアップデートされる。

　ただし、場合によってはアップデート時に以下のようなメッセージがコンソールに表示されるかも知れない。

```
  There are binary versions available but the source versions
  are later:
      binary source needs_compilation
terra 1.5-17 1.5-21              TRUE
yaml   2.2.2  2.3.4              TRUE

Do you want to install from sources the packages which need compilation? (Yes/no/cancel)
```

このようなメッセージが表示されたら、**コンソール** (Console) にYes、no、cancelのいずれかを入力してReturn (Enter) キーを押す必要がある。どうしても最新のパッケージが欲しい場合は`Yes`を入力すれば良いが、インストールに時間がかかる場合がある。一方、`no`を入力した場合は、若干古いバージョンがインストールされるが、インストールに必要な時間が短いため、基本的には`no`で問題ないだろう。`cancel`を入力した場合はアップデートがすべてキャンセルされる。



## {pacman}によるパッケージ管理 {#sec-packages_pacman}

　CRANとGitHubを合わせると、数千のRパッケージが公開されている。Rの使用歴が長くなればインストール済みパッケージの数は増え、1つのスクリプト内で使用するパッケージも多くなるだろう。あるパッケージが他のパッケージの機能に依存することもよくあるので、自分が想像するよりも多くのパッケージがインストールされているかもしれない[^pack-dep]。このように膨大な数のパッケージを管理するためのパッケージが{pacman}である。{pacman}はCRANから入手可能である。

[^pack-dep]: AというパッケージがBというパッケージに依存する場合、Aをインストール際にBもインストールされる。

```{r packages-pacman-1}
install.packages("pacman")
```

### インストール

　パッケージをCRANからインストールには`p_install()`関数を使用する。使い方は`install.packages()`と同じであり、複数のパッケージをインストールしたい場合はパッケージ名の箇所に`c(パッケージ名1, パッケージ名2, ...)`を入れる。パッケージ名は`"`で囲んでも、囲まなくても良い。GitHubに公開されているパッケージは`p_install_gh()`関数を使用する。これは{devtools}、または{remotes}の`install_github()`と同じ使い方となり、必ず`"`で囲む必要がある。

　{pacman}の関数は、通常1つのファイルのなかで1度か2度しか使わないので、わざわざ`library(pacman)`で読み込まなくてもよい。{pacman}を読み込む代わりに、`pacman::関数名()`で使うことができる。

```{r packages-pacman-2}
# CRANからインストール
pacman::p_install(パッケージ名)
# githubからインストール
pacman::p_install_gh("作成者のGitHubのID/パッケージ名") 
```


### 読み込み

　パッケージの読み込みには`p_load()`関数を使う。実はこの関数が{pacman}を使う最大の利点である。`p_load()`関数の使い方は以下の通りである。

```{r packages-pacman-3}
pacman::p_load(パッケージ名)
```

　`p_load()`の便利なところは (1) 複数のパッケージが指定可能であることと、 (2) インストールされていないパッケージを指定するとそれをCRANから自動的にインストールして読み込んでくれることだ。たとえば、{tidyverse}と{broom}、{estimatr}という3つのパッケージを読み込む場合、`library()`関数を使うと次のコードを使うことになる。

```{r packages-pacman-4}
# library() を使う場合
library(tidyverse)
library(broom)
library(estimatr)
```

それに対して{pacman}の`p_load()`を使えば、以下のようになる。

```{r packages-pacman-5}
# {pacman}のp_load() を使う場合
pacman::p_load(tidyverse,
               broom, 
               estimatr)
```

　また、`p_load()`内のパッケージがインストールされていない場合、CRANのパッケージリストから検索し、そのパッケージをインストールしてくれる。したがって、上で紹介した`p_install()`を使うケースはほぼない。

　ただし、GitHub上のパッケージは自動的にインストールしてくれない。たとえば、GitHubのみで公開されている{BalanceR}パッケージがインストールされていない場合、`p_load(BalanceR)`を実行しても{BalanceR}はインストールされない。あらかじめ`p_install_gh()`でインストールしておく必要がある。しかし、GitHub上のパッケージを検索し、インストールしてから読み込みをする`p_load_gh()`という関数もある。ユーザー名JaehyunSongのBalanceRレポジトリーのパッケージを読み込む場合は以下のように入力する。

```{r packages-pacman-6}
pacman::p_load_gh("JaehyunSong/BalanceR")
```

　このコードは{BalanceR}パッケージがインストールされていると読み込みのみ行い、インストールされていない場合はJaehyunSongのBalanceRレポジトリからパッケージをインストールし、読み込む。書くのがやや面倒であるが、便利な関数である。

### アップデート

　{pacman}には、アップデートが可能なパッケージをすべてアップデートしてくれる`p_update()`という関数も用意されている。使い方は簡単で、コンソール上に`p_update()`のみの入力すれば良い。ただし、一部のパッケージのみをアップデートしたいのであれば、RStudioが提供するアップデート機能を使う方が簡単かもしれない[^pacman_update]。

[^pacman_update]: `p_update(ask = TRUE)`を実行すれば個々のパッケージに対してアップデートするかどうかを決めることができるが、ひとつひとつのパッケージについて回答を求められるので、かえって面倒である。

　また、同じ機能の関数として`p_up()`があるが、`p_update()`の方がアップデートしていることがわかりやすいので`p_update()`の使用を推奨する[^sh-tradeoff]。

[^sh-tradeoff]: コードの長さとわかりやすさの間にはトレードオフがある。短いほうがタイプが楽だが何を表しているかがわかりにくい一方で、長いとタイプするのは面倒だが何を表しているかはわかりやすい。


```{r packages-pacman-7}
pacman::p_update()
```



## 必須パッケージのインストール {#sec-packages_tidyverse}

　ここでは、現在Rでデータ分析をするにあたって必須のパッケージであるといえる{tidyverse}をインストールする。{tidyverse}は{dplyr}、{ggplot2}、{tidyr}など、Rにおいて不可欠なパッケージを含むパッケージ**群**である。また、上で紹介した{devtools}も今のうちにインストールしておこう。既に導入済みの読者は、以下のコードを実行しなくてよい。

```{r packages-tidyverse}
install.packages("tidyverse")
install.packages("devtools")
```
