# 表の作成 {#sec-table}

```{r table-common}
#| include: false
source("_common.R")
```

```{r table-setup}
#| message: false
#| warning: false
pacman::p_load(tidyverse, kableExtra, gt, DT)

country_df <- read_csv("Data/Countries.csv")
```

　記述統計や推定結果を示す場合は図表が用いられることが多い。図に関しては{ggplot2}が最もポピュラーなパッケージである（Base Rもまた根強い人気を誇る）。一方、表の場合、現時点において2つの選択肢がある。一つはこれまで長らく使われてきた{knitr}パッケージの`kable()`と{kabelExtra}パッケージの組み合わせ、もう一つがRStudioチームで開発し、近年注目を集めている{gt}パッケージだ。

　{gt}は**G**rammar of **T**ablesの略であり、**G**rammar of **G**raphicsの具現化した{ggplot2}の影響を受けたものである。つまり、一つの表を独立した要素に分解し、それぞれのレイヤーを重ねていくイメージだ。{ggplot2}の**考え方**（$\neq$使い方）に慣れている読者なら{gt}にもすぐ慣れるだろう。ただし、{gt}は開発途上であり、PDF出力との相性が現在 (`r format(Sys.Date(), "%Y年%m月%d日")`; {gt} `r packageVersion("gt")`)、優れているとはいい難い。表をPDF形式に出力したいのであれば{knitr}の`kable()` + {kableExtra}を推奨する。

　ここでは{knitr} + {kableExtra}と{gt}パッケージ両方について簡単に解説する。また、どのパッケージもHTML出力とLaTeX出力両方に対応しているが、ここではHTML出力のみ紹介する。ただし、LaTeX出力に関しては引数の追加などで簡単にできるため、詳細は各パッケージの公式ページやヴィネット等を参考されたい。

* [{knitr} + {kableExtra}のヴィネット](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html)
* [{gt}の公式ホームページ](https://gt.rstudio.com/)

## {kableExtra}の使い方 {#sec-table-kbl}

`country_df`の`Population` (100万で割った値)、`Area` (1万で割った値)、`GPP_per_capita` (1万で割った値)、`PPP_per_capita` (1万で割った値)、`HDI_2018`、`Polity_Score`、`FH_Total`の記述統計

コード入力が面倒であれば、コピペでOK

```{r table-kbl-1}
country_desc <- country_df %>%
    mutate(Population     = Population / 1000000,
           Area           = Area / 10000,
           GDP_per_capita = GDP_per_capita / 10000,
           PPP_per_capita = PPP_per_capita / 10000) %>%
    select(Population, Area, GDP_per_capita, PPP_per_capita, 
           HDI_2018, Polity_Score, FH_Total) %>%
    summarise(across(everything(),
                     .fns = list("Mean" = ~mean(.x, na.rm = TRUE),
                                 "SD"   = ~sd(.x, na.rm = TRUE),
                                 "Min"  = ~min(.x, na.rm = TRUE),
                                 "Max"  = ~max(.x, na.rm = TRUE),
                                 "Obs"  = ~sum(!is.na(.x))),
                     .names = "{.col}-{.fn}")) %>%
    pivot_longer(cols = everything(),
                 names_to = "Label",
                 values_to = "Value") %>%
    separate(col  = "Label",
             into = c("Variable", "Stat"),
             sep  = "-") %>%
    pivot_wider(names_from  = Stat,
                values_from = Value)
```

```{r table-kbl-2}
country_desc
```

{summarytools}の`descr()`を使う場合

```{r table-kbl-3}
#| message: FALSE
pacman::p_load(summarytools)

country_desc <- country_df %>%
    mutate(Population     = Population / 1000000,
           Area           = Area / 10000,
           GDP_per_capita = GDP_per_capita / 10000,
           PPP_per_capita = PPP_per_capita / 10000) %>%
    select(Population, Area, GDP = GDP_per_capita, PPP = PPP_per_capita, 
           HDI = HDI_2018, Polity = Polity_Score, FreedomHouse = FH_Total) %>%
    descr(stats = c("mean", "sd", "min", "max", "n.valid"),
          order = "preserve", transpose = TRUE) %>%
    as.data.frame() %>%
    rownames_to_column("Variable") %>%
    rename(SD = Std.Dev, Obs = N.Valid) %>%
    as_tibble()
```

```{r table-kbl-4}
country_desc
```

### 表の出力

```{r table-kbl-5}
kbl(country_desc)
```

小数点桁数の調整

```{r table-kbl-6}
country_desc %>%
    kbl(digits = 3)
```

表の幅 (HTML限定)

```{r table-kbl-7}
#| eval = knitr::is_html_output()
country_desc %>%
    kbl(digits = 3) %>%
    kable_styling(full_width = FALSE)
```

### 列の操作

列名の修正

全ての列を指定する必要がある

```{r table-kbl-8}
country_desc %>%
    kbl(col.names = c("変数", "平均値", "標準偏差", 
                      "最小値", "最大値", "観察数"),
        digits = 3)
```

列の揃え

全ての列を指定する必要がある

```{r table-kbl-9}
# 不要だが、あえてVariable列を中央揃えにする
country_desc %>%
    kbl(align = c("crrrrr"),
        digits = 3)
```

### タイトル、フットノート

```{r table-kbl-10}
country_desc %>%
    kbl(caption = "記述統計表", digits = 3)
```

```{r table-kbl-11}
country_desc %>%
    kbl(caption = "記述統計表", digits = 3) %>%
    footnote(general       = "『私たちのR』のサンプルデータ",
             general_title = "出典:")
```

```{r table-kbl-12}
country_desc2 <- country_desc

names(country_desc2)[4:5] <- paste0(names(country_desc2)[4:5],
                                    footnote_marker_number(1))
names(country_desc2)[6] <- paste0(names(country_desc2)[6],
                                  footnote_marker_number(2))

country_desc2 %>%
    kbl(caption = "記述統計表", escape = FALSE, digits = 3) %>%
    footnote(general = "出典: 『私たちのR』のサンプルデータ",
             number  = c("欠損値を除く", "欠損していないケース数"))
```

### グループ化

列のグループ化

グループ化しない列のラベルは`""`でなく、`" "`にする。

```{r table-kbl-13}
country_desc %>%
    kbl(digits = 3) %>%
    add_header_above(c(" " = 3, "Range" = 2, " " = 1))
```

行のグループ化

```{r table-kbl-14}
country_desc %>%
    kbl(digits = 3) %>%
    pack_rows("Demographic factors", 1, 2) %>%
    pack_rows("Economic factors", 3, 5) %>%
    pack_rows("Political factors", 6, 7)
```

```{r table-kbl-15}
country_desc3 <- country_desc %>%
    mutate(Factor  = c(rep("Demographic", 2),
                       rep("Economic", 3),
                       rep("Political", 2)),
           .before = Variable)

country_desc3 %>%
    kbl(digits = 3)
```

```{r table-kbl-16}
country_desc3 %>%
    kbl(digits = 3) %>%
    collapse_rows(columns = 1, valign = "top")
```


### セルの色分け（HTML限定）

{formattable}パッケージ使用

```{r table-kbl-17}
#| eval = knitr::is_html_output()
country_desc4 <- country_df %>%
    mutate(Population     = Population / 1000000,
           Area           = Area / 10000,
           GDP_per_capita = GDP_per_capita / 10000,
           PPP_per_capita = PPP_per_capita / 10000) %>%
    select(HDI_2018, 
           Population, Area, GDP = GDP_per_capita, PPP = PPP_per_capita, 
           Polity = Polity_Score, FreedomHouse = FH_Total) %>%
    drop_na() %>%
    cor() %>%
    as.data.frame() %>%
    rownames_to_column("Variable") %>%
    select(Variable, Cor = HDI_2018) %>%
    filter(Variable != "HDI_2018")
```

```{r table-kbl-18}
#| eval = knitr::is_html_output()
country_desc4 %>%
    kbl(digits = 3)
```

```{r table-kbl-19}
#| eval = knitr::is_html_output()
pacman::p_load(formattable)

country_desc4$Cor2 <- color_text("blue", "red")(sprintf("%.3f", country_desc4$Cor))
country_desc4$Cor3 <- color_tile("white", "mistyrose")(sprintf("%.3f", country_desc4$Cor))

country_desc4 %>%
    kbl(col.names = c("変数", "数字のみ", "文字色", "色塗り"),
        digits = 3, escape = FALSE) %>%
    add_header_above(c(" " = 1, "人間開発指数との相関係数" = 3))
```

### テーマ

```{r table-kbl-20}
#| eval = knitr::is_html_output()
country_desc %>%
    kbl(digits = 3) %>%
    kable_paper()
```

```{r table-kbl-21}
#| eval = knitr::is_html_output()
country_desc %>%
    kbl(digits = 3) %>%
    kable_classic()
```

```{r table-kbl-22}
#| eval = knitr::is_html_output()
country_desc %>%
    kbl(digits = 3) %>%
    kable_classic_2()
```

```{r table-kbl-23}
#| eval = knitr::is_html_output()
country_desc %>%
    kbl(digits = 3) %>%
    kable_minimal()
```

```{r table-kbl-24}
#| eval = knitr::is_html_output()
country_desc %>%
    kbl(digits = 3) %>%
    kable_material()
```

```{r table-kbl-25}
#| eval = knitr::is_html_output()
country_desc %>%
    kbl(digits = 3) %>%
    kable_paper(bootstrap_options = "striped",
                full_width        = FALSE)
```

```{r table-kbl-26}
#| eval: knitr::is_html_output()
country_desc %>%
    kbl(digits = 3) %>%
    kable_paper(bootstrap_options = c("striped", "condensed"),
                full_width        = FALSE)
```

他にも`"hover"`や`"responsive"`、`"bordered"`あり

テーマを変更せずにスタイルを変更したい場合は`kable_styling()`を使用

### LaTeX形式への出力

RMarkdownの出力形式がHTMLでなく、PDFの場合

* `kable_style()`やテーマ関数 (`kable_*()`)内に`full_width = FALSE`の指定は不要
* 縦線を無くしたい場合は`kbl()`内に`booktabs = TRUE`を指定

```{r table-kbl-27}
#| eval: !expr "knitr::is_latex_output()"
country_desc %>%
    kbl(digits = 3, booktabs = TRUE)
```

表を中央に位置づけたい場合は`kable_style()`内に`position = "center"`を指定

```{r table-kbl-28}
#| eval: !expr "knitr::is_latex_output()"
country_desc %>%
    kbl(digits = 3, booktabs = TRUE) %>%
    kable_styling(position = "center")
```

LaTeX用表のコードが必要な場合、`format = "latex"`を指定

```{r table-kbl-29}
#| eval: false
country_desc %>%
    kbl(format = "latex", digits = 3, booktabs = TRUE)
```

## {gt}の使い方 {#sec-table-gt}

　{gt}では、表がタイトル、列ラベル、ホディ―などの要素で構成されている考え（ @fig-gt-structure ）、それぞれの要素を追加したり、修正する形で表を作成する。

![{gt}テーブルの構成要素](https://gt.rstudio.com/reference/figures/gt_parts_of_a_table.svg){#fig-gt-structure}

　まず、これまで使ってきた`country_desc`を使ってHTML形式の表を出力してみよう。使用する関数は`gt()`であり、data.frameまたはtibbleオブジェクト名が第1引数である。

```{r table-gt-1}
country_desc %>%
    gt()
```

　これだけでも十分に綺麗な表が出来上がった。それではこちらの表を少しずつ修正してみよう。まず、Mean列からMax列だが、これを小数点3桁で丸めてみよう。これらの数字は @fig-gt-structure のTable Bodyに該当する。このTable Bodyのフォーマットに関わる調整は`fmt_*()`関数を使用する。`Mean`列から`Max`列までの**数値**に関する調整は`fmt_number()`関数を使用する。`gt()`で作成された表オブジェクトをそのまま`fmt_number()`に渡し、`columns`引数で何列に当該内容を適用するかを指定する。たとえば、Mean列からMax列までは2〜5列目に相当するので`columns = 2:5`、または`columns = c(2, 3, 4, 5)`で良い。続いて、小数点の桁数を指定する`decimals`に3を指定してみよう。

```{r table-gt-2}
country_desc %>%
    gt() %>%
    fmt_number(columns = 2:5, decimals = 3)
```

　`columns`は列の番号じゃなく、列名そのままでも指定できる。

```{r table-gt-3}
country_desc %>%
    gt() %>%
    fmt_number(columns = c("Mean", "SD", "Min", "Max"), decimals = 3)
```

　また、HTMLのCSSによって異なるが、{gt}で作成された表の幅がページの幅に強制的に調整される場合がある。本書は[Quarto](quarto.qmd)で執筆されているが、まさにそのケースである。この場合は、`as_raw_html()`を使えば良い。一つ注意すべき点は`as_raw_html()`は必ず最後のレイヤーにする必要がある。`as_raw_html()`の後ろにレイヤーが足される場合はエラーが発生する。

```{r table-gt-4}
country_desc %>%
    gt() %>%
    fmt_number(columns = 2:5, decimals = 3) %>%
    as_raw_html()
```

## データの出力 {#sec-table-dataout}

通常の出力の場合

```{r table-dataout-1}
country_df
```

{DT}パッケージの`datatable()`関数を使用した場合

```{r table-dataout-2}
#| eval: false
datatable(country_df)
```

`r if (knitr::is_latex_output()) '<!--'` 

```{r table-dataout-3}
#| echo: false
datatable(country_df)
```

`r if (knitr::is_latex_output()) '-->'`

`r if (knitr::is_html_output()) '<!--'` 

![](Figs/Table/DT.png)

`r if (knitr::is_html_output()) '-->'`