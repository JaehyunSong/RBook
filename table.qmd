# 表の作成 {#sec-table}

```{r}
#| label: table-common
#| include: false
source("_common.R")
options(width = 120)
```

　記述統計や推定結果を示す場合は図表が用いられることが多い。図に関しては{ggplot2}が最もポピュラーなパッケージである（Base Rもまた根強い人気を誇る）。一方、表の場合、現時点において2つの選択肢がある[^ft]。一つはこれまで長らく使われてきた{knitr}パッケージの`kable()`と{kabelExtra}パッケージの組み合わせ、もう一つが近年注目を集めている{gt}パッケージだ。

[^ft]: 他にも{[flextable](https://davidgohel.github.io/flextable/index.html)} + {ftExtra}という有力な選択肢もある。

　{gt}は**G**rammar of **T**ablesの略であり、**G**rammar of **G**raphicsの具現化した{ggplot2}の影響を受けたものである。つまり、一つの表を独立した要素に分解し、それぞれのレイヤーを重ねていくイメージだ。{ggplot2}の**考え方**（$\neq$使い方）に慣れている読者なら{gt}にもすぐ慣れるだろう。ただし、{gt}は開発途上であり、PDF出力との相性が現在 (`r format(Sys.Date(), "%Y年%m月%d日")`; {gt} `r packageVersion("gt")`)、優れているとはいい難い。表をPDF形式に出力したいのであれば{knitr}の`kable()` + {kableExtra}を推奨する。また、{gt}単体での機能は`kable()` + {kableExtra}より貧弱ではあったものの、現在は{gtExtras}の登場により、ほぼ同じことが行えるようになった。

　ここではRStudio社が開発をサポートしている{gt}パッケージについて簡単に解説する[^kableextra]。また、どのパッケージもHTML出力とLaTeX出力両方に対応しているが、ここではHTML出力のみ紹介する。ただし、LaTeX出力に関しては引数の追加などで簡単にできるため、詳細は各パッケージの公式ページやヴィネット等を参考されたい。

[^kableextra]: `kable()` + {kableExtra}の使い方については、[インターネット上のヴィネット](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html)を参考されたい。

* [{gt}の公式ホームページ](https://gt.rstudio.com/)

　それではまず、実習に使用するパッケージとデータを読み込でおこう。

```{r}
#| label: table-setup
#| message: false
#| warning: false
pacman::p_load(tidyverse, gt, gtExtras, DT)

df1 <- read_csv("Data/countries_desc1.csv")
df2 <- read_csv("Data/countries_desc2.csv")
df3 <- read_csv("Data/countries_desc3.csv")
df4 <- read_csv("Data/countries_ppp.csv")
df5 <- read_csv("Data/package_download.csv")
```

:::{.panel-tabset}
## `df1`の中身

```{r}
#| label: table-dataset-1
df1
```

## `df2`の中身

```{r}
#| label: table-dataset-2
df2
```

## `df3`の中身

```{r}
#| label: table-dataset-3
df3
```

## `df4`の中身

```{r}
#| label: table-dataset-4
df4
```

## `df5`の中身

```{r}
#| label: table-dataset-5
df5
```
:::

## 表の出力 {#sec-gt-intro}

　{gt}では、表がタイトル、列ラベル、ホディ―などの要素で構成されている考え（ @fig-gt-structure ）、それぞれの要素を追加したり、修正する形で表を作成する。

![{gt}テーブルの構成要素](https://gt.rstudio.com/reference/figures/gt_parts_of_a_table.svg){#fig-gt-structure}

　まず、これまで使ってきた`df1`を使ってHTML形式の表を出力してみよう。使用する関数は`gt()`であり、data.frameまたはtibbleオブジェクト名が第1引数である。

```{r}
#| label: table-intro-1
#| class-source: gt_table_full
df1 |>
    gt()
```

## 列の操作 {#sec-gt-columns}

　これだけでも十分に綺麗な表が出来上がった。それではこちらの表を少しずつ修正してみよう。まず、Mean列からMax列だが、これを小数点3桁で丸めてみよう。これらの数字は @fig-gt-structure のTable Bodyに該当する。このTable Bodyのフォーマットに関わる調整は`fmt_*()`関数を使用する。`Mean`列から`Max`列までの**数値**に関する調整は`fmt_number()`関数を使用する。`gt()`で作成された表オブジェクトをそのまま`fmt_number()`に渡し、`columns`引数で何列に当該内容を適用するかを指定する。たとえば、Mean列からMax列までは2〜5列目に相当するので`columns = 2:5`、または`columns = c(2, 3, 4, 5)`で良い。続いて、小数点の桁数を指定する`decimals`に3を指定してみよう。

```{r}
#| label: table-column-1
df1 |>
    gt() |>
    fmt_number(columns = 2:5, decimals = 3)
```

　`columns`は列の番号じゃなく、列名そのままでも指定できる。

```{r}
#| label: table-column-2
df1 |>
    gt() |>
    fmt_number(columns = c("Mean", "SD", "Min", "Max"), decimals = 3)
```

　列名の変更は`cols_lable()`レイヤーで行う。`()`内には`"元の列名" = "新しい列名"`のように記述する。`kbl()`は全ての列に対して列名を指定しないといけなかったが（つまり、変更したくない列も一応、指定が必要）、{gt}だと変更したい列のみ指定しても良いといったメリットがある。

```{r}
#| label: table-column-3
df1 |>
    gt() |>
    fmt_number(columns = 2:5, decimals = 3) |>
    cols_label("Variable" = "変数", "Mean" = "平均値", "SD" = "標準偏差",
               "Min" = "最小値", "Max" = "最大値", "Obs" = "有効ケース数")
```

　もう一つ見たいこところは、各セル内のテキストの揃えだ。たとえば、文字型列のVariableは左揃え、数値型列であるその他の列は右揃えになっている。これはこのままで問題ない。しかし、どうしても特定の列を中央揃えしたい時もあるだろう。その場合、`cols_align()`レイヤーで修正することができる。たとえば、Variable列の値を中央揃えに変えてみよう。引数は`align`で`"left"`、`"center"`、`"right"`のいずれかを、`columns`には適用したい列の番号、または列名を指定する。

```{r}
#| label: table-column-4
df1 |>
  gt() |>
  fmt_number(columns = 2:5, decimals = 3) |>
  cols_align(align = "center", columns = 1) # columns = Variable でもOK
```

　また、各列のラベル（@fig-gt-structure のcolumn labels）の位置も表のボディー（@fig-gt-structure のtable body）に連動する。もし、列ラベルのみ中央揃えにしたい場合は`tab_style()`レイヤーを使用する。

```{r}
#| label: table-column-5
df1 |>
  gt() |>
  fmt_number(columns = 2:5, decimals = 3) |>
  tab_style(style     = cell_text(align = "center"), # <1>
            locations = cells_column_labels())       # <2>
```

1. セル内のテキストを中央揃えにする。
2. 列ラベルのみに適用

　また、HTMLのCSSによって異なるが、{gt}で作成された表の幅がページの幅に強制的に調整される場合がある。本書は[Quarto](quarto.qmd)で執筆されているが、まさにそのケースである）。この場合は、`as_raw_html()`を使えば良い。一つ注意すべき点は`as_raw_html()`は必ず最後のレイヤーにする必要がある。`as_raw_html()`の後ろにレイヤーが足される場合はエラーが発生する。

```{r}
#| label: table-column-6
#| eval: false
df1 |>
    gt() |>
    fmt_number(columns = 2:5, decimals = 3) |>
    as_raw_html()
```

　この`as_raw_html()`は必要に応じて入れる。R Markdown/Quartoを使わない場合はそもそも不要だ（RStudioのViewerペインでは問題なく表示される）。もし、R Markdown/Quartoで{gt}を使用し、表の幅が気に入らない場合のみ使うことにしよう。ちなみに本書は`as_raw_html()`を省略しても表の幅がページ幅に強制調整されないように設定されている。

## タイトル・フットノート {#sec-gt-title}

　表のタイトルおよびサブタイトルは`tab_header()`関数の`title`と`subtitle`引数で指定できる。また、表の下段に位置するフットノート（footnote）とソースノート（source note）は別の関数に対応し、それぞれ`tab_footnote()`と`tab_source_note()`を使う。使用する引数はそれぞれ`footnote`と`source_note`であるが、第1引数であるため、省略可能だ。

```{r}
#| label: table-title-1
df1 |>
  gt() |>
  fmt_number(columns = 2:5, decimals = 3) |>
  tab_header(title = "タイトル", subtitle = "サブタイトル") |>
  tab_footnote(footnote = "注: ここにはフットノートが入る") |>
  tab_source_note(source_note = "出典: 『私たちのR』")
```

　ちなみに、`tab_footnote()`や`tab_source_note()`は複数回使用することで複数行にすることができる。

```{r}
#| label: table-title-2
df1 |>
  gt() |>
  fmt_number(columns = 2:5, decimals = 3) |>
  tab_header(title = "タイトル", subtitle = "サブタイトル") |>
  tab_footnote(footnote = "注1: ここにはフットノート1が入る") |>
  tab_footnote(footnote = "注2: ここにはフットノート2が入る") |>
  tab_source_note(source_note = "出典: 『私たちのR』")
```

　また、タイトルやフットノートに限定された機能ではないが、テキストはMarkdownやHTML文法で書くこともできる。たとえば、上記のコードの『私たちのR』にリンクを貼る場合、Markdown文法だと`"『[私たちのR](https://www.jaysong.net/RBook/)』"`となるが、このままではうまくいかない。

```{r}
#| label: table-title-3
df1 |>
  gt() |>
  fmt_number(columns = 2:5, decimals = 3) |>
  tab_header(title = "タイトル", subtitle = "サブタイトル") |>
  tab_footnote(footnote = "注1: ここにはフットノート1が入る") |>
  tab_footnote(footnote = "注2: ここにはフットノート2が入る") |>
  tab_source_note(source_note = "出典: 『[私たちのR](https://www.jaysong.net/RBook/)』")
```

　Markdown文法を使う場合は、文字列を`md()`関数内で指定することでMarkdown文として解釈されるようになる。

```{r}
#| label: table-title-4
df1 |>
  gt() |>
  fmt_number(columns = 2:5, decimals = 3) |>
  tab_header(title = "タイトル", subtitle = "サブタイトル") |>
  tab_footnote(footnote = "注1: ここにはフットノート1が入る") |>
  tab_footnote(footnote = "注2: ここにはフットノート2が入る") |>
  tab_source_note(source_note = md("出典: 『[私たちのR](https://www.jaysong.net/RBook/)』"))
```

## グループ化 {#sec-gt-group}

　列をグループ化するためには`tab_spanner()`関数を使う。`columns`引数にはグループ化する列の位置、もしくは名前を、`label`にはグループ名を指定すれば良い。たとえば、`df1`を使う場合、`Min`と`Max`列を一つのグループとしてRangeと名付けるとしよう。`columns`は列の番号でも、列名でも良い。

```{r}
#| label: table-group-1
df1 |>
    gt() |>
    tab_spanner(columns = 4:5, label = "Range") |>
    fmt_number(columns = 2:5, decimals = 3)
```

　続いて、行をグループ化する方法について紹介する。まず、`df2`の中身を確認してみよう。

```{r}
#| label: table-group-2
df2 |>
    gt()
```

　各大陸**ごと**の人口、面積などの情報が含まれている表であるが、これらを大陸単位で行をグループ化してみよう。方法は簡単だ。{dplyr}のように`gt()`関数に渡す前に、`group_by()`でデータをグループ化すれば良い。今回は`Continent`列の値に基づいてグループ化するため、`group_by(Continent)`とする。

```{r}
#| label: table-group-3
df2 |>
    group_by(Continent) |>
    gt()
```

　このようにグループ化することができる。引き続き`Mean`列から`Max`列までの値を小数点3桁目で丸めてみよう。`Mean`と`Max`列の位置は2、5列目であるかのように**見える**。とりあえずやってみよう。

```{r}
#| label: table-group-4
#| error: true
df2 |>
    group_by(Continent) |>
    gt() |>
    fmt_number(columns = 2:5, decimals = 3)
```

　このようにエラーが表示される。なぜだろう。それはグルーピングに使用された変数も1つの列としてカウントされるからだ。つまり、グルーピングに使用された`Continent`列は列としては見えないものの、1列目として存在する。したがって、目に見える列番号に1を足す必要がある。それではグルーピングあと、`Mean`列から`Max`列までは小数点3桁目で丸め、`Min`列と`Max`列はRangeという名でグルーピングしてみよう。

```{r}
#| label: table-group-5
df2 |>
    group_by(Continent) |>
    gt() |>
    tab_spanner(columns = 5:6, label = "Range") |>
    fmt_number(columns = 3:6, decimals = 3)
```

　ややこしい話であるが、列を**番号**でなく、**列名**で指定すると、このような混乱を避けることができる。列の指定方法は好みの問題でもあるので、好きなやり方を使おう。

```{r}
#| label: table-group-6
df2 |>
    group_by(Continent) |>
    gt() |>
    tab_spanner(columns = Min:Max, label = "Range") |>
    fmt_number(columns = Mean:Max, decimals = 3)
```

　最後に、グルーピングとは関係ないものの、行の名前を指定する方法について説明する。それは`gt()`で表を作成する際、行の名前にしたい列名を`rowname_col`で指定すれば良い。たとえば、`Variable`列を行の名前にしてみよう。

```{r}
#| label: table-group-7
df2 |>
    group_by(Continent) |>
    gt(rowname_col = "Variable") |>
    tab_spanner(columns = 5:6, label = "Range") |>
    fmt_number(columns = 3:6, decimals = 3)
```

　表としては同じ表であるが、`Variable`列の右側に垂直線が出力される。ちなみにこれによって、列番号がずれることはないので安心しよう。

## セルの色分け {#sec-gt-highlight}

### 行・列のハイライト

　続いて、セルを色塗りする方法を紹介する。まず、`gt()`を使用し、`df3`の表を作成し、`Population`列から`FH`列までの値を小数点3桁までにする。作成した表は`df3_tbl`という名で格納し、出力してみよう。

```{r}
#| label: table-highlight-1
df3_tbl <- df3 |>
  gt() |>
  fmt_number(columns = Population:FH, decimals = 3)

df3_tbl
```

　まずは、特定の**行**を色塗りする方法を紹介する。使用する関数は{gtExtras}の`gt_highlight_rows()`関数である。必須引数は`rows`であり、ここにハイライトしたい行の位置を指定する。たとえば、3行目をハイライトしたい場合は`rows = 3`とする。

```{r}
#| label: table-highlight-2
df3_tbl |>
  gt_highlight_rows(rows = 3)
```

　ハイライトの色と文字の太さはそれぞれ`fill`（既定値は`"#80BCD8"`）と`font_weight`（既定値は`"bold"`）引数で指摘できる。`font_weight`は`"normal"`、`"bold"`、`"lighter"`、`"bolder"`のように指定することも、1以上1000以下の数値で指定することもできる。

```{r}
#| label: table-highlight-3
df3_tbl |>
  gt_highlight_rows(rows = 3, fill = "gray80", font_weight = "normal")
```

　また、`rows`引数は行の番号でなく、条件式を使うこともできる。たとえば、`HDI`列の値が0.75以上の行をハイライトしたい場合は`rows = (HID >= 0.75)`のように指定する。`()`はなくても良いが、可読性が落ちるので入れておこう。

```{r}
#| label: table-highlight-4
df3_tbl |>
  gt_highlight_rows(rows = (HDI >= 0.75))
```

　続いて列のハイライト方法を紹介する。使用する関数は`gt_hightlight_cols()`であり、これは以上にて紹介した`gt_highlight_rows()`と使い方は同じである。ただし、列を指定する引数が`rows`でなく、`columns`であることに注意すること。また、`columns`実引数として条件式は使用できない。以下は`df3_tbl`の`Polity`列から`FH`列までを`"#ACB3CC"`色にハイライトした例である。

```{r}
#| label: table-highlight-5
df3_tbl |>
  gt_highlight_cols(columns = Polity:FH,
                    fill    = "#ACB3CC")
```

### セルの色分け

　以上の例は「行」と「列」のハイライトであった。ここでは「セル」に注目する。セルの色塗りには2つのケースがある。1つ目は特定のセルをハイライトすることであり、2つ目は値に応じて色分けをすることである。まず、特定のセルを強調したい場合は`gt_hightlight_rows()`関数を使用する。ただし、`rows`引数のみだと全列がハイライトされてしまうので、今回は更に`columns`引数も追加し、「何行目、何列目のセル」かを特定する必要がある。

```{r}
#| label: table-color-1
df3_tbl |>
  gt_highlight_rows(rows = 3, columns = 6)
```

　セルの値に応じて色分けをする場合は`gt_color_rows()`関数を使う。たとえば、`Population`列（2列目）の値に応じて色分けをするなら、`columns = Population`、または`columns = 2`を指定する。

```{r}
#| label: table-color-2
df3_tbl |>
  gt_color_rows(columns = Population)
```

　謎の警告メッセージが表示された。これは`Population`が取りうる値の範囲が必要であることを意味する。これが省略されても表の作成には問題はないが、できれば`domain`引数に、`c(最小値, 最大値)`の実引数を指定しよう。指定しない場合は既定値は`Population`列の最小値と最大値が指定される。たとえば、`Population`が（理論上）取りうる値が10から110までであれば、`domain = c(0, 110)`のように指定する。この`domain`はなくても一応表は作れるので、以降は省略する。

```{r}
#| label: table-color-3
df3_tbl |>
  gt_color_rows(Population, domain = c(10, 110))
```

　ちなみに、色についても説明する。デフォルトの色は赤系であり、数値が高いほど赤くなる。この色は`palette`で指定することができる。既定値は{ggsci}パッケージが提供する`red_material`というパレットだ（{ggsci}パッケージは{gtExtras}パッケージと一緒にインストールされる）。特定のパッケージが提供するパレットであれば`"パッケージ名::パレット名"`と指定する。たとえば、`Population`列から`FH`列まで色分けをし、{ggsci}の`blue_material`パレットを使う場合は`palette = "ggsci::blue_material"`のように指定する必要がある。

```{r}
#| label: table-color-4
#| warning: false
df3_tbl |>
  gt_color_rows(Population:FH,
                palette = "ggsci::blue_material")
```

　{ggsci}は他にも様々なパレットを提供しているが、詳細は[公式レファレンス](https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html)を参照されたい。また、{ggsci}以外のパッケージが提供するパレットも使える。定番の{RColorBrewer}パッケージも様々なパレットを提供しており、以下の例は`YlOrRd`パレットを使った例だ。

```{r}
#| label: table-color-5
#| warning: false
df3_tbl |>
  gt_color_rows(Population:FH,
                palette = "RColorBrewer::YlOrRd")
```

　{RColorBrewer}が提供するパレットの例はコンソール上で`RColorBrewer::display.brewer.all()`と打つと出力される（ @fig-table-color-6 ）。

```{r}
#| label: fig-table-color-6
#| fig-cap: "{RColorBrewer}が提供するパレット"
#| fig-width: 8
#| fig-height: 9
RColorBrewer::display.brewer.all()
```

## 画像・プロットの追加

　以下では表の中にプロットや画像を入れる方法について紹介する。まずは`df4`を利用し、大陸（`Continent`）ごとの一人あたり購買力平価GDP（`PPP_per_capita`）の記述統計と分布を作成する。グループごとの記述統計を作成するため、ここでは`group_by()`と`summarise()`関数を使用する。平均値、標準偏差、最小値、最大値、国家数をそれぞれ`Mean`、`SD`、`Min`、`Max`、`N`列にする。そして、当該大陸に属する国の`PPP_per_capita`を一つのベクトルとし、`PPP`列に入れる。この場合、`list()`関数を使えば良い。以上の結果を`df4_grouped`に格納する。

```{r}
#| label: table-plot-data-1
df4_grouped <- df4 |> 
  group_by(Continent) |> 
  summarise(Mean = mean(PPP_per_capita),
            SD   = sd(PPP_per_capita),
            Min  = min(PPP_per_capita),
            Max  = max(PPP_per_capita),
            N    = n(),
            PPP  = list(PPP_per_capita))
```

　出来上がった`df4_grouped`は以下の通りだ。

```{r}
#| label: table-plot-data-2
df4_grouped 
```

　それでは`df4_grouped`を`gt()`で表にしてみよう。

```{r}
#| label: table-plot-density-1
df4_grouped |> 
  gt()
```

　続いて、平均値から最大値までの値を小数点1桁で丸め、列名を修正し、タイトルを付ける。

```{r}
#| label: table-plot-density-2
df4_grouped |> 
  gt() |> 
  fmt_number(columns = Mean:Max, decimals = 1) |> 
  cols_label("Continent" = "大陸",
             "Mean"      = "平均値",
             "SD"        = "標準偏差",
             "Min"       = "最小値",
             "Max"       = "最大値",
             "N"         = "国家数",
             "PPP"       = "分布") |> 
  tab_header(title = "大陸別一人あたり購買力平価GDP")
```

　それではこの`PPP`列をプロットにしてみよう。ここで使うのが{gtExtras}の`gt_plt_dist()`だ。引数はプロットにする列名で十分だ。

```{r}
#| label: table-plot-density-3
df4_grouped |> 
  gt() |> 
  fmt_number(columns = Mean:Max, decimals = 1) |> 
  cols_label("Continent" = "大陸",
             "Mean"      = "平均値",
             "SD"        = "標準偏差",
             "Min"       = "最小値",
             "Max"       = "最大値",
             "N"         = "国家数",
             "PPP"       = "分布") |> 
  tab_header(title = "大陸別一人あたり購買力平価GDP") |> 
  gt_plt_dist(PPP)
```

　このように密度曲線が生成される。もし、密度曲線ではなく、ヒストグラムにしたい場合は`type`引数を追加し、`"histogram"`を指定すれば良い。

```{r}
#| label: table-plot-density-4
df4_grouped |> 
  gt() |> 
  fmt_number(columns = Mean:Max, decimals = 1) |> 
  cols_label("Continent" = "大陸",
             "Mean"      = "平均値",
             "SD"        = "標準偏差",
             "Min"       = "最小値",
             "Max"       = "最大値",
             "N"         = "国家数",
             "PPP"       = "分布") |> 
  tab_header(title = "大陸別一人あたり購買力平価GDP") |> 
  gt_plt_dist(PPP, type = "histogram")
```

　続いて、画像について解説する。ここでは`df5`を使用する。まずは`gt()`で中身を確認してみよう。

```{r}
#| label: table-plot-image-1
df5 |> 
  gt()
```

　3つの列があり、1列目はパッケージ名（`Name`）、2列目はHEXロゴのURL（`Hex`）、3列目は2023年5月9日現在のダウンロード数（`Download`）である。ここで{gtExtras}の`gt_img_rows()`関数を使用し、画像のパス・URLが格納されている列名を指定すれば、当該画像が表示される。

```{r}
#| label: table-plot-image-2
df5 |> 
  gt() |> 
  gt_img_rows(Hex)
```

　画像の大きさは`height`で調整できる。今回は50ピクセル（50px）にしてみよう。

```{r}
#| label: table-plot-image-3
df5 |> 
  gt() |> 
  gt_img_rows(Hex, height = 50)
```

　続いて、列名を変更する。`Name`は`Package`に、`Hex`は`Logo`とする。

```{r}
#| label: table-plot-image-4
df5 |> 
  gt() |> 
  gt_img_rows(Hex, height = 50) |> 
  cols_label("Name" = "Package",
             "Hex"  = "Logo")
```

　ここで更に`Download`列を棒グラフに変えてみよう。棒グラフの作成は`gt_plt_bar()`を使用する。第1引数は棒グラフにしたい列名だ。

```{r}
#| label: table-plot-image-5
df5 |> 
  gt() |> 
  gt_img_rows(Hex, height = 50) |> 
  cols_label("Name" = "Package",
             "Hex"  = "Logo") |> 
  gt_plt_bar(Download)
```

　棒グラフにすることで相対的な比較がしやすくなった。しかし、元々あった数字がなくなったので、具体的に何回ダウンロードされたかに関する情報を消えている。もし、元の列を残したい場合は`keep_column = TRUE`を指定する。

```{r}
#| label: table-plot-image-6
df5 |> 
  gt() |> 
  gt_img_rows(Hex, height = 50) |> 
  cols_label("Name" = "Package",
             "Hex"  = "Logo") |> 
  gt_plt_bar(Download, keep_column = TRUE)
```

　最後にタイトルを付け、棒グラフの色を`"royalblue"`にしてみよう。棒の色は`color`引数で指定できる。また、`df5`を`gt()`に渡す前に`arrange()`を使って、パッケージの表示順番もダウンロード数の多いものからに並べ替えてみよう。

```{r}
#| label: table-plot-image-7
df5 |> 
  arrange(desc(Download)) |> 
  gt() |> 
  gt_img_rows(Hex, height = 50) |> 
  cols_label("Name" = "Package",
             "Hex"  = "Logo") |> 
  gt_plt_bar(Download, keep_column = TRUE, color = "royalblue") |> 
  tab_header(title = "Number of packages downloaded on May 9, 2023")
```

　{gtExtras}は他にも様々なプロットを提供し、画像の追加にもいくつかのバリエーションがある。詳細は{gtExtras}の[公式マニュアル](https://jthomasmock.github.io/gtExtras/index.html)を参照されたい。

## テーマ

　{gtExtras}パッケージは8種類のテーマを提供する（バージョン`r packageVersion("gtExtras")`現在）。テーマは`gt_theme_*()`関数によって指定することができる。たとえば、以下の`df1_tbl`にそれぞれのテーマを適用してみよう。

```{r}
#| label: table-theme-1
df1_tbl <- df1 |>
  gt() |>
  tab_spanner(columns = 4:5, label = "Range") |>
  fmt_number(columns = 2:5, decimals = 3) |>
  tab_style(style     = cell_text(align = "center"),
            locations = cells_column_labels())

df1_tbl
```

　使い方は簡単で、{gt}で作成した表オブジェクトを`gt_theme_*()`関数に渡すだけだ。以下は{gtExtras}が提供する8種類のテーマを`df1_tbl`に適用した例である。

:::{.panel-tabset}
## 538

```{r}
#| label: table-theme-2
df1_tbl |>
  gt_theme_538()
```

## espn

```{r}
#| label: table-theme-3
df1_tbl |>
  gt_theme_espn()
```

## nytimes

```{r}
#| label: table-theme-4
df1_tbl |>
  gt_theme_nytimes()
```

## guardian

```{r}
#| label: table-theme-5
df1_tbl |>
  gt_theme_guardian()
```

## dot_matrix

```{r}
#| label: table-theme-6
df1_tbl |>
  gt_theme_dot_matrix()
```

## dark

```{r}
#| label: table-theme-7
# こちらはR Markdown/QuartoのCSSによって正しく表示されない可能性がある。
# RStudio内なら問題なし
df1_tbl |>
  gt_theme_dark()
```

## excel

```{r}
#| label: table-theme-8
df1_tbl |>
  gt_theme_excel()
```

## pff

```{r}
#| label: table-theme-9
df1_tbl |>
  gt_theme_pff()
```
:::

## 表の書き出し {#sec-gt-export}

　{gt}で作成した表は様々なフォーマットで出力することができる。現在（`r format(Sys.Date(), "%Y年%m月%d日")`; {gt} `r packageVersion("gt")`）、Microsoft Word（`.docx`）、$\LaTeX$（`.tex`）、ハイパーテキスト（`.html`）、リッチテキスト（`.rtf`）、画像（`.png`）形式で出力可能だ。ここでは簡単な例を紹介する。

　まず、{gt}を使って表を作成し、オブジェクトとして作業環境内に格納する。ここでは`gt_table`と名付けた。

```{r}
#| label: table-export-1
gt_table <- df1 |>
  gt() |>
  fmt_number(columns = 2:5, decimals = 3) |>
  tab_header(title = "タイトル", subtitle = "サブタイトル") |>
  tab_footnote(footnote = "注1: ここにはフットノート1が入る") |>
  tab_footnote(footnote = "注2: ここにはフットノート2が入る") |>
  tab_source_note(source_note = md("出典: 『[私たちのR](https://www.jaysong.net/RBook/)』"))

gt_table
```

　この`gt_table`を保存する関数は`gtsave()`である。第1引数は先ほど作成した表のオブジェクト名、第2引数は出力するファイル名である。このファイル名の拡張子によって保存されるファイルのフォーマットが変わる。結果をここで見せることは難しいが、難しい作業ではないので各自やってみよう。

```{r}
#| label: table-export-2
#| eval: false
gtsave(gt_table, "my_table.docx") # Microsoft Word
gtsave(gt_table, "my_table.tex")  # LaTeX
gtsave(gt_table, "my_table.html") # HTML
gtsave(gt_table, "my_table.rtf")  # リッチテキスト
gtsave(gt_table, "my_table.png")  # 画像（PNG）
```

　たとえば、`.tex`形式で書き出したファイルを開いてみると、以下のような$\LaTeX$コードが書かれていることが確認できる。

```tex
\setlength{\LTpost}{0mm}
\begin{longtable}{lrrrrr}
\caption*{
{\large タイトル} \\ 
{\small サブタイトル}
} \\ 
\toprule
Variable & Mean & SD & Min & Max & Obs \\ 
\midrule
Population & $41.738$ & $151.270$ & $0.001$ & $1,447.470$ & 186 \\ 
Area & $69.607$ & $187.241$ & $0.000$ & $1,637.687$ & 186 \\ 
GDP\_per\_capita & $1.616$ & $2.571$ & $0.006$ & $18.318$ & 185 \\ 
PPP\_per\_capita & $2.083$ & $2.099$ & $0.073$ & $11.342$ & 178 \\ 
HDI\_2018 & $0.713$ & $0.153$ & $0.377$ & $0.954$ & 180 \\ 
Polity\_Score & $4.259$ & $6.102$ & $-10.000$ & $10.000$ & 158 \\ 
FH\_Total & $57.714$ & $29.866$ & $0.000$ & $100.000$ & 185 \\ 
\bottomrule
\end{longtable}
\begin{minipage}{\linewidth}
\textsuperscript{\textit{NA}}注1: ここにはフットノート1が入る\\
\textsuperscript{\textit{NA}}注2: ここにはフットノート2が入る\\
出典: 『\href{https://www.jaysong.net/RBook/}{私たちのR}』\\
\end{minipage}
```

::: {.content-visible when-format="html"}

## データの出力 {#sec-DT}

　PDF、Microsoft Word形式の文書を作成する場合、生データ（raw data）を掲載することはめったにないだろう。数十行のデータなら掲載することもあろうが[^lijphart]、規模の大きいデータセットの場合、資源（紙）の無駄遣いとなる。しかし、HTMLフォーマットの文書なら話は別だ。ファイルの容量は大きくなるものの、生データを全て掲載することもできる。

[^lijphart]: どうでも良い話だが、Arend Lijphartの*Pattern of Democracy*の場合（邦訳：『民主主義対民主主義』）、データセットがMicrosoft Word形式で公開されている...。

　そこまで大きいデータセットではないが、たとえば`df2`をR Markdown / QuartoのHTML文書に掲載するとしよう。この場合、まず考えられるのは普通に`df2`を出力することだ。ただし、`df2`のクラスによって出力結果がややことなる。たとえば、`df2`は`read_csv()`関数で読み込んだデータであるため、data.frameでなく、tibbleである。実際にクラスを確認してみよう。「クラス（class）」の概念については第[-@sec-oop]章を参照されたい。

```{r}
#| label: table-df-print-1
class(df2)
```

　data.frameクラスを継承しているが、クラスに`"tbl"`や`"tbl_df"`も含まれており、これは`df2`がtibble形式であることを意味する。これをこのまま出力してみよう。

```{r}
#| label: table-df-print-2
df2
```

　tibble形式のデータは通常、最初の10行のみ出力される。また、小数点も2〜3桁目で丸められる。もう一つの特徴としては横に長い表の場合（つまり、列が多い場合）、一部の列は省略される（省略された列の簡単な情報は表示される）。このようにtibbleクラスのデータは読みやすく出力される長所があるものの、**全て**のデータが出力されないケースもある。

　一方、`read_csv()`でなく、`read.csv()`で読み込んだ表形式データのクラスはdata.frameだ。`df2`を`as.data.frame()`関数を使ってdata.frameクラスに変更してみよう。クラスを変更した`df2`は`df6_df`と名付ける。

```{r}
#| label: table-df-print-3
df6_df <- as.data.frame(df2)

class(df6_df)
```

　それでは`df6_df`を出力してみよう。

```{r}
#| label: table-df-print-4
df6_df
```

　今回は**全て**の行と列が出力された。そもそも生データを掲載するのが目的であれば、tibbleクラスよりも、data.frameクラスが目的に合致する。しかし、読みにくいという深刻な問題がある。また、世論調査データのように数千行、変数も数十列以上あるデータセットを出力するとあまりにも長い画面になってしまう。

　ここで便利なのが{DT}パッケージの`datatable()`関数だ。全ての行と列を読みやすい形式で出力してくれる。

```{r}
#| label: table-df-print-5
#| results: asis
datatable(df2)
```

　このように情報が損失されることなく[^dt-size]、非常に読みやすい表になった。これで十分かも知れないが、小数点を丸めたい人もいるかも知れないので、その方法を紹介する。具体的には`dataframe()`で作成した表を`formatRound()`関数に渡すだけだ。`formatRound()`関数の引数は`columns`と`digits`があり、それぞれ適用する列と小数点を桁数を指定すればよい。

[^dt-size]: 情報の損失がないということは、生データの全情報がHTMLファイルに含まれていることを意味する。もし、出力するデータのサイズが大きい場合、HTMLファイルのサイズも大きくなるので注意すること。

```{r}
#| label: table-df-print-6
datatable(df2) |>
    formatRound(columns = 3:6, digits = 3)
```

:::