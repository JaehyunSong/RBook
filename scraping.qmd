# スクレイピング {#sec-scraping}

```{r scraping-common}
#| include: false
source("_common.R")
```

　まず、本章で使用するパッケージを読み込んでおく。

```{r}
#| label: scraping-setup
pacman::p_load(tidyverse, rvest, gt, gtExtras)
```

## HTML

　我々が普段見るウェブページは主にHTML（**H**yper**T**ext **M**arkup **L**anguage）という言語で記述されている。裏ではPhp、Ruby、Pythonなどが動いているかも知れないが、少なくとも我々がウェブブラウザー（Firefox、Chrome、Safari、Edge等）越しで見る内容はHTMLだ。（ウェブ）スクレイピングはこのHTMLで記述された表示内容（の一部）を構造化されたデータとして読み込むことである。

　したがって、スクレイピングをするためにはHTMLの基本的な知識が必要だ。一つの画面に表示された内容の中で我々が欲しいものは、全体内容の一部だ。これはスクレイピングを行う際、全体内容の中から取得する箇所を指定する必要があることを意味する。そこで重要なのがタグ（tag）と属性（attribute）、セレクター（selector）だ。

### タグ

　タグは`<タグ名>`と`</タグ名>`で構成され[^tag-pair]、この間に挟まれた内容は予め決まった書式となる。例えば、`<em>R Not for Everyone</em>`は「R Not for Everyone」という文字列に対して`<em>`タグを適用するコードである。`<em>`タグは予めHTMLで用意されているものであり、文字列をイタリック（例：<em>R Not for Everyone</em>）にするものだ。また、`<strong>`タグは太字を意味し、`<strong>R Not for Everyone</strong>`は「<strong>R Not for Everyone</strong>」と出力される。また、段落を意味する`<p>`タグも頻繁に使われる。HTMLには様々なタグが用意されており、詳細なリストは[W3C](https://www.w3.org/TR/2018/SPSD-html5-20180327/index.html#elements-1)などを参照されたい（リンク先はHTML5基準）。

[^tag-pair]: 通常、タグはカッコのように開いたら（`<タグ名>`）閉じる（`</タグ名>`）必要がある。しかし、タグの中には閉じる必要のないものもある。たとえば、改行を意味するタグとして`<br>`があるが、これは`<br>`、または`<br/>`のみで良い。

　タグの中にタグを入れることもできる。以下のコードを見てみよう。

::::{.columns}
:::{.column width=49%}
**HTMLコード**

```{.html code-line-numbers="true"}
<ol>
  <li> 項目1 
    <ul>
      <li> 項目1A </li>
      <li> 項目1B </li>
      <li> 項目1C </li>
    </ul>
  </li>
  <li> 項目2 </li>
  <li> 項目3 </li>
</ol>
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
**ブラウザー上の出力内容**

1. 項目1
   * 項目1A
   * 項目1B
   * 項目1C
1. 項目2
1. 項目3
:::
::::

　`<ol>`は順序付きリスト（箇条書き）を意味し、一つ一つの項目は`<li>`タグで指定する。以上の例は`<ol>`タグの中に`<li>`タグが入っている入れ子構造だ。また、順序なしリストのタグ`<ul>`は最初の`<li>`の中に入っている。たとえば、「項目1B」は`<ol>` > `<li>` > `<ul>` > `<li>`で定義された内容である。

### 属性

　タグの中には属性といものが定義されている場合がある。タグをプログラミング言語における関数とすれば、属性は引数（argumentとparameter）に該当する。たとえば、画像を貼り付けるタグは`<img>`だ。ちなみに`<img>`はタグを閉じる必要がなく、単体のみ存在するため`<img>`〜`</img>`でなく、`<img>`のみか`<img/>`と記述する。本書では単体で使うタグを区分するために`<img/>`と表記する。この`<img/>`タグだけではどの画像を表示するかが分からない。画像の具体的なパスやURLを指定する必要がある。`<img/>`タグには`src`という属性があり、`src="パス or URL"`と書く。たとえば、<https://www.jaysong.net/RBook/Figs/favicon.png>というURLの画像を表示させるためには`<img src="https://www.jaysong.net/RBook/Figs/favicon.png"/>`と記述する必要がある。

　一つのタグは複数の属性を持つこともできる。`<img/>`タグの場合、画像の幅と高さを`width`と`height`属性で指定することができ、`alt`で代替テキストを指定することもできる。ちなみに属性が不要なタグもあるが、属性を持つことが**できない**タグは存在しない。すべてのタグは`class`や`hidden`、`style`などの属性を持つことができ、このようにすべてのタグで使える属性はグローバル属性（global attributes）と呼ばれる。

### セレクター

　セレクターを理解するためにはCSS（Cascading Style Sheets）の知識が必要であるが、ここでは最低限のことのみ解説する。ウェブスクレイピングは指定したHTMLファイルから特定のタグに囲まれた内容を取得するのが一般的、かつ基本的なやり方だ。たとえば、あるページ上の表を取得するためには表のタグである`<table>`タグで囲まれた内容を取得する。しかし、一つのページ内に複数の`<table>`タグがあればどうだろうか。多くのスクレイピングのパッケージやライブラリはすべてを読み込むが、それはメモリの無駄遣いだ。予め具体的にどの表を取得するかを指定した方が効率的だろう。ここで必要なのがセレクターだ。

　そもそもセレクターが何なのかを知るためには、CSSの話を簡単にしておく必要がある。CSSはHTMLの「見た目」を担当するものであり、通常、HTMLとは別途のファイル（`.css`ファイル）で作成され、HTMLに読み込まれる。`.css`ファイルの内部には「この箇所はこのような見た目にしてくれ」といったものが細かく書かれている。

　まずは以下のリンクをクリックし、簡単なHTMLページ（`sample00.html`）を確認してみよう。

* [https://www.jaysong.net/garage/rbook/scraping/sample00.html](https://www.jaysong.net/garage/rbook/scraping/sample00.html){target="_blank"}

　変哲もないページであるが、このページのソースコードは以下の通りである。例えば、`<title>`タグで囲まれているテキストはそのページのタイトルとなり、`<h1>`は見出しとなる。いくつかのタグには`id`や`class`といった属性もついている。たとえば、7行目の`<a>`タグには`href`、`id`、`class`の3つの属性がある。

```{.html filename="https://www.jaysong.net/garage/rbook/scraping/sample00.html" code-line-numbers="true"}
<html>
	<head>
		<title>HTMLの例</title>
	</head>
	<body>
		<h1>第1章：文章</h1>
		<p>『<a href="https://www.jaysong.net/RBook/" id="rbook" class="book-title">私たちのR</a>』は<a href="https://www.jaysong.net/">宋財泫</a>（SONG Jaehyun）と<a href="https://yukiyanai.github.io/">矢内勇生</a>が共同で執筆するRプログラミングの「入門書」である。統計学の本ではない。</p>
		<p>また、本書はデータ分析の手法の解説書でもない。Rを用いたデータ分析については他の本を参照されたい。私たちが専門とする政治学におけるデータ分析については、以下の本を勧める。</p>
		<h1>第2章：箇条書き</h1>
		<ul>
    		<li>浅野正彦・矢内勇生. 2018. 『<span class="book-title">Rによる計量政治学</span>』オーム社.</li>
    		<li>飯田健. 2013.『<span class="book-title">計量政治分析</span>』共立出版.</li>
  		</ul>
		<h1>第3章：表</h1>
		<h2>数学成績</h2>
		<table class="math_score" width=300px>
			<thead>
				<tr>
					<td>ID</td>
					<td>名前</td>
					<td>成績</td>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>1</td>
					<td>田中</td>
					<td class="tbl-score">80</td>
				</tr>
				<tr>
					<td>2</td>
					<td>佐藤</td>
					<td class="tbl-score">100</td>
				</tr>
				<tr>
					<td>3</td>
					<td>渡辺</td>
					<td class="tbl-score">75</td>
				</tr>
			</tbody>
		</table>
		<h2>英語成績</h2>
		<table class="english_score" width=300px>
			<thead>
				<td>ID</td>
				<td>名前</td>
				<td>成績</td>
			</thead>
			<tbody>
				<tr>
					<td>1</td>
					<td>田中</td>
					<td class="tbl-score">20</td>
				</tr>
				<tr>
					<td>2</td>
					<td>佐藤</td>
					<td class="tbl-score">100</td>
				</tr>
				<tr>
					<td>3</td>
					<td>渡辺</td>
					<td class="tbl-score">90</td>
				</tr>
			</tbody>
		</table>
	</body>
</html>
```

　続いて、以下のページ（`sample01.html`）も見てみよう。

* [https://www.jaysong.net/garage/rbook/scraping/sample01.html](https://www.jaysong.net/garage/rbook/scraping/sample01.html){target="_blank"}

　内容的には同じものであるが、見た目がだいぶ異なることが分かるだろう。このページのソースを見ると、99%以上が一致していることが分かる。具体的には3行目に`<link>`タグが追加されているだけだ。3行目のコードは`style01.css`ファイルを読み込み、本ファイル（`sample01.html`）へ適用するということを意味する。他の内容は`sample00.html`と全く同じだ。つまり、この2つのファイルの見た目が異なるのは`style01.css`の存在が原因であると推測できる。

:::{.panel-tabset}
## `.html`ファイル

```{.html filename="https://www.jaysong.net/garage/rbook/scraping/sample01.html" code-line-numbers="true"}
<html>
	<head>
		<link href="sample01.css" rel="stylesheet" type="text/css" media="all"/>
		<title>HTMLの例</title>
	</head>
	<body>
		<h1>第1章：文章</h1>
		<p>『<a href="https://www.jaysong.net/RBook/" id="rbook" class="book-title">私たちのR</a>』は<a href="https://www.jaysong.net/">宋財泫</a>（SONG Jaehyun）と<a href="https://yukiyanai.github.io/">矢内勇生</a>が共同で執筆するRプログラミングの「入門書」である。統計学の本ではない。</p>
		<p>また、本書はデータ分析の手法の解説書でもない。Rを用いたデータ分析については他の本を参照されたい。私たちが専門とする政治学におけるデータ分析については、以下の本を勧める。</p>
		<h1>第2章：箇条書き</h1>
		<ul>
    		<li>浅野正彦・矢内勇生. 2018. 『<span class="book-title">Rによる計量政治学</span>』オーム社.</li>
    		<li>飯田健. 2013.『<span class="book-title">計量政治分析</span>』共立出版.</li>
  		</ul>
		<h1>第3章：表</h1>
		<h2>数学成績</h2>
		<table class="math_score" width=300px>
			<thead>
				<tr>
					<td>ID</td>
					<td>名前</td>
					<td>成績</td>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>1</td>
					<td>田中</td>
					<td class="tbl-score">80</td>
				</tr>
				<tr>
					<td>2</td>
					<td>佐藤</td>
					<td class="tbl-score">100</td>
				</tr>
				<tr>
					<td>3</td>
					<td>渡辺</td>
					<td class="tbl-score">75</td>
				</tr>
			</tbody>
		</table>
		<h2>英語成績</h2>
		<table class="english_score" width=300px>
			<thead>
				<td>ID</td>
				<td>名前</td>
				<td>成績</td>
			</thead>
			<tbody>
				<tr>
					<td>1</td>
					<td>田中</td>
					<td class="tbl-score">20</td>
				</tr>
				<tr>
					<td>2</td>
					<td>佐藤</td>
					<td class="tbl-score">100</td>
				</tr>
				<tr>
					<td>3</td>
					<td>渡辺</td>
					<td class="tbl-score">90</td>
				</tr>
			</tbody>
		</table>
	</body>
</html>
```

## `.css`ファイル
```{.css filename="https://www.jaysong.net/garage/rbook/scraping/sample01.css" code-line-numbers="true"}
h1, h2, h3 {
	font-family: sans-serif;
}
a {
	text-decoration: none;
	color: royalblue;
}
table {
	border-collapse: collapse;
	border: 1px solid;
}
td {
	border-collapse: collapse;
	border: 1px solid;
}
thead {
	text-align: center;
	font-weight: 600;
}
#rbook {
	color: red;
}
.book-title {
	font-weight: 600;
}
.tbl-score {
	text-align: right;
}
```
:::

* 種類
   * 全称セレクター（universal selector）：`*`
   * 要素型セレクター（type selector）：`p`、`div`、`a`等
   * IDセレクター（ID selector）：`#ID名`
   * クラスセレクター（class selector）：`.クラス名`、`タグ名.クラス名`
   * 属性セレクター（attribute selector）：`タグ名[属性名]`、`タグ名[属性名=値]`
* IDは1ページ内において1回しか使えないが、クラスは何度でも使える。
* 優先順位はID > クラス
* 入れ子型の場合、`親タグ > 子タグ`
   * `親タグ.クラス名 > 子タグ`のような書き方もOK

## {rvest}の使い方

実習用のページを作っておこう。

* テキスト/表の取得
   * `html_elment()`、`html_elments()`で特定のタグやクラス、IDを抽出
   * `html_text()`、`html_text2()`や`html_table()`で抽出
   * 画像の場合、`<img>`タグの`src`属性を抽出する必要があるため、`html_attr()`

```{r}
#| label: scraping-rvest-read
url <- "https://www.jaysong.net/garage/rbook/scraping/sample01.html"

my_html <- read_html(url)
my_html
```

セレクターを指定した要素の抽出

```{r}
#| label: scraping-rvest-elements-01
my_html |> 
  html_elements("a")
```

更に`href`の値を抽出

```{r}
#| label: scraping-rvest-elements-02
my_html |> 
  html_elements("a") |> 
  html_attr("href")
```

箇条書きの要素を抽出

```{r}
#| label: scraping-rvest-elements-03
my_html |> 
  html_elements("li")
```

さらにテキストのみ抽出

```{r}
#| label: scraping-rvest-elements-04
my_html |> 
  html_elements("li") |> 
  html_text()
```

クラス（`.クラス名`）の指定もOK

```{r}
#| label: scraping-rvest-elements-05
my_html |> 
  html_elements(".book-title") |> 
  html_text()
```

```{r}
#| label: scraping-rvest-table-01
my_html |> 
  html_table()
```

```{r}
#| label: scraping-rvest-table-02
my_tables <- my_html |> 
  html_table(header = TRUE)

my_tables
```

```{r}
#| label: scraping-rvest-table-03
names(my_tables) <- c("数学", "英語")

my_tables
```

```{r}
#| label: scraping-rvest-table-04
my_table <- bind_rows(my_tables, .id = "科目")

my_table
```

## 実践

### 表の抽出

Wikipediaの[世界報道自由度ランキング](https://ja.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E5%A0%B1%E9%81%93%E8%87%AA%E7%94%B1%E5%BA%A6%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0)の表をスクレイピング

```{r}
#| label: scraping-hdi
#| cache: true
#| warning: false
url <- "https://ja.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E5%A0%B1%E9%81%93%E8%87%AA%E7%94%B1%E5%BA%A6%E3%83%A9%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0"

df <- read_html(url)

df

df_tbl <- df |> 
  html_table()

pfi_df <- df_tbl[[1]] |> 
  rename("Name"     = "国・地域",
         "Year2023" = "2023年[10]",
         "Year2022" = "2022年[11]",
         "Year2021" = "2021年[12]",
         "Year2020" = "2020年[13]",
         "Year2019" = "2019年[14]") |> 
  mutate(across(Year2023:Year2019, ~str_replace(.x, "\\(([0-9]+)\\)", "")),
         across(Year2023:Year2019, as.numeric))

pfi_df

pfi_df |> 
  gt() |> 
  cols_label("Name"     = "国・地域",
             "Year2023" = "2023年",
             "Year2022" = "2022年",
             "Year2021" = "2021年",
             "Year2020" = "2020年",
             "Year2019" = "2019年") |> 
  gt_color_rows(columns = Year2023:Year2019,
                palette = "ggsci::blue_material")
```

### 表の抽出（複数ページ）

```{r}
#| label: scraping-j
#| cache: true
j_list <- paste0("https://www.jleague.jp/standings/j", 1:3)

tbl_list <- list()

for (i in seq_along(j_list)) {
  temp_html <- read_html(j_list[i])
  temp_tbl  <- temp_html |> 
    html_table(header = TRUE)
  
  tbl_list[[paste0("J", i)]] <- temp_tbl[[1]]
  
  Sys.sleep(1)
}

tbl_list

j_df <- bind_rows(tbl_list, .id = "League")

j_df

j_df <- j_df |> 
  select(!c("...1", "直近5試合"))

j_df |> 
  mutate(クラブ名 = str_sub(クラブ名, 1, nchar(クラブ名) / 2)) |> 
  group_by(League) |> 
  gt()
```

### 表以外の内容

OpenCritic (2021; PC Games)

* <https://opencritic.com/browse/pc/2021>
* 表のように見えるが、表ではない（`<div>`が並んでいるだけ）。
* `html_nodes()`でランキング、画像URL、スコアなどをベクトルとして抽出し、R側で表にする。

```{r}
#| label: scraping-oc-single
#| cache: true
oc_html <- read_html("https://opencritic.com/browse/all/2021")

oc_html <- oc_html |> 
  html_element(".desktop-game-display")


oc_df <- tibble(Rank      = html_elements(oc_html, ".rank") |> 
                  html_text2(),
                Tier      = html_elements(oc_html, "img") |> 
                  html_attr("src"),
                Score     = html_elements(oc_html, ".score") |> 
                  html_text2(),
                Name      = html_elements(oc_html, ".game-name") |>
                  html_text2(),
                Platforms = html_elements(oc_html, ".platforms") |>
                  html_text2(),
                Date      = html_elements(oc_html, ".first-release-date") |>
                  html_text2()) |> 
  mutate(Rank = str_remove(Rank, "\\."),
         Rank = as.numeric(Rank),
         Date = paste0(Date, ", 2021"),
         Date = mdy(Date))

#oc_df |> 
#  separate(Platforms,
#           into = paste0("P", 1:6),
#           sep = ", ")

oc_df |> 
  gt() |> 
  gt_img_rows(Tier) |> 
  cols_label("Date" = "First release date")
```

### 表以外の内容（複数ページ）

1位から500位まで

```{r}
#| label: scraping-oc-multiple
#| cache: true
oc_url <- paste0("https://opencritic.com/browse/pc/2021?page=", 1:25)

oc_list <- list()

get_oc <- function (url) {
  temp_html <- read_html(url) |> 
    html_element(".desktop-game-display")
  temp_df <- tibble(Rank  = html_elements(temp_html, ".rank") |> 
                      html_text2(),
                    Tier  = html_elements(temp_html, "img") |> 
                      html_attr("src"),
                    Score = html_elements(temp_html, ".score") |> 
                      html_text2(),
                    Name  = html_elements(temp_html, ".game-name") |>
                      html_text2(),
                    Date  = html_elements(temp_html, ".first-release-date") |>
                      html_text2()) |> 
    mutate(Rank = str_remove(Rank, "\\."),
           Rank = as.numeric(Rank),
           Date = paste0(Date, ", 2021"),
           Date = mdy(Date))
}

for (i in seq_along(oc_url)) {
  
  temp_df      <- get_oc(oc_url[i])
  oc_list[[i]] <- temp_df
  
  Sys.sleep(1)
}

bind_rows(oc_list) |> 
  gt() |> 
  gt_img_rows(Tier) |> 
  cols_label("Date" = "First release date")
```

### スクレイピングの注意事項

* Terms and conditions / Terms of serviceを読もう
* 著作権
* 個人情報
* `Sys.sleep()`