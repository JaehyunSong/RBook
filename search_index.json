[
["rmarkdown.html", "22. R Markdown 22.1 R Markdownとは 22.2 とりあえずKnit 22.3 Markdown文法の基本 22.4 チャンクのオプション 22.5 ヘッダーのオプション 22.6 日本語が含まれているPDFの出力", " 22. R Markdown 22.1 R Markdownとは 22.2 とりあえずKnit R Markdownについて説明する前に、とりあえずR Markdownというのがどういうものかを味見してみます。既に述べたようにR MarkdownにはRコードも含まれるため、事前にプロジェクトを生成してから進めることをおすすめします。 R Markdownファイルを生成するにはFile -&gt; New File -&gt; R Markdwon…を選択します。Title:とAuthor:には文書のタイトルと作成者を入力します。Default Output FormatはデフォルトはHTMLとなっていますが、このままにしておきましょう。ここでの設定はいつでも変更可能ですので、何も触らずにOKを押しても大丈夫です。 OKを押したら自動的にR Markdownのサンプルファイルが生成されます。そしたらSourceペインの上段にあるボタン1をクリックしてみましょう。Viewerペインに何かの文章が生成されていることが分かります。これからの内容を進める前にSourceペインとViewerペインの中身をそれぞれ対応しながら、どのような関係があるのかを考えてみましょう。 R Markdownファイルは大きく3つの領域に分けることができます（図22.1）。まず、最初に---と---で囲まれた領域はヘッダー（Header）と呼ばれる領域です。ここでは題目、作成者情報の入力以外にも、文書全体に通じる設定を行います。これは第22.5節で解説します。次はR Markdownの核心部であるチャンク（Chunk）です。チャンクは```{r}と```で囲まれた領域であり、Rコードが入る箇所です。チャンクに関しましては第22.3節の後半と第22.4節で解説します。その他の領域がマークダウン（Markdown）であり、文書に該当します。 図 22.1: R Markdownのサンプルページ まずは、文章の書き方から説明します。非常に簡単な文法で綺麗、かつ構造化された文書が作成可能であり、これに慣れるとMarkdown基盤のノートアプリなどを使って素早くノート作成、メモが出来ます。 22.3 Markdown文法の基本 まずは、Markdownの文法について解説します。ここではMarkdown文書内に以下のようなことを作成する方法を実際の書き方と、出力画面を対比しながら解説していきます。 改行 強調: 太字、イタリック、アンダーライン、取り消し線 箇条書き 見出し 区切り線 表 画像 リンク 脚注 数式 引用 コメント Rコード 22.3.1 改行 Markdownにおける改行はやや特殊です。特殊といっても難しいことはありません。普段よりもう一行改行するだけです。Markdownの場合、1回の改行は改行として判定されず、同じ行の連続と認識します。たとえば、Inputのように入力するとOutputのように文章1と文章2が繋がります。 Input: 文章1 文章2 Output: 文章1 文章2 文章1と文章2を改行するためにはもう一行、改行する必要があります。以下の例を見てください。 Input: 文章1 文章2 Output: 文章1 文章2 こうすることで段落間の間隔を強制的に入れることとなり、作成者側にも読みやすい文書構造になります2。 22.3.2 強調 Input: 文章の一部を**太字**にしてみましょう。 *イタリック*もいいですね。 ~~取り消し線~~はあまり使わないかも。 &lt;u&gt;アンダーライン&lt;/u&gt;はHTMLタグを使います。 Output: 文章の一部を太字にしてみましょう。 イタリックもいいですね。 取り消し線はあまり使わないかも。 アンダーラインはHTMLタグを使います。 22.3.3 箇条書き Input: - 項目1 - 項目1-1 - 項目1-2 - 項目1-2-1 - 項目1-2-1-1 - 項目1-2-2 - 項目2 - 項目3 Output: 項目1 項目1-1 項目1-2 項目1-2-1 項目1-2-1-1 項目1-2-2 項目2 項目3 続きまして順序付き箇条書きですが、これは-（または*）を数字.に換えるだけです。順序なしの場合と違って数字の後にピリオド（.）が付くことに注意してください。また、下位項目を作成する際、順序なしはスペース2つ以上が必要でしたが、順序付きの場合、少なくとも3つが必要です。 Input: 1. 項目1 1. 項目1-1 2. 項目1-2 2. 項目2 * 項目2-1 * 項目2-2 3. 項目3 Output: 項目1 項目1-1 項目1-2 項目2 項目2-1 項目2-2 項目3 22.3.4 見出し 章、節、段落のタイトルを付ける際は#を使います。#の数が多いほど文字が小さくなります。章の見出しを##にするなら節は###、小節または段落は####が適切でしょう。見出しは####まで使えます。 Input: # 見出し1 ## 見出し2 ### 見出し3 #### 見出し4 Output: 見出し1 見出し2 見出し3 見出し4 22.3.5 区切り線 区切り線は---または***を使います。 Input: --- Output: 22.3.6 表 Markdownの表は非常にシンプルな書き方をしています。行は改行で、列は|で区切られます。ただ、表の第1行はヘッダー（変数名や列名が表示される行）扱いとなり、ヘッダーと内容の区分は|---|で行います。以下はMarkdownを利用した簡単な表の書き方です。ここでは可読性のためにスペースを適宜入れましたが、スペースの有無は結果に影響を与えません。 Input: |ID |Name |Math |English |Favorite food| |:---:|---------|-------:|-------:|-------------| |1 |SONG |15 |10 |Ramen | |2 |Yanai |100 |100 |Cat food | |3 |Shigemura|80 |50 |Raw chicken | |4 |Wickham |80 |90 |Lamb | Output: ID Name Math English Favorite food 1 SONG 15 10 Ramen 2 Yanai 100 100 Cat food 3 Shigemura 80 50 Raw chicken 4 Wickham 80 90 Lamb 1行目はヘッダーであり、太字かつ中央揃えになります。2行目以降はデフォルトでは左揃えになりますが。ただし。|---|をいじることによって当該列の揃えを調整できます。|:---|は左 (デフォルト)、|---:|は右、|:---:|は中央となります。また-の個数は1個以上なら問題ありません。つまり、|-|も|---|も同じです。 22.3.7 画像 R Markdownに画像を入れるには![代替テキスト](ファイル名)と入力します。当たり前ですが、画像ファイルがワーキングディレクトリにない場合はパスを指定する必要があります。[代替テキスト]は画像を読み込めなかった場合のテキストを意味します。これは画像が読み込めなかった場合の代替テキストでもありますが、視覚障害者用のウェブブラウザーのためにも使われます。これらのウェブブラウザーはテキストのみ出力されるものが多く、画像の代わりには代替テキストが読み込まれます。 例えば、figureフォルダー内のAuthorsフォルダー内のSongYanai.jpgというファイルを読み込むとしたら以下のように書きます。 Input: ![著者たちの写真](figures/Authors/SongYanai.jpg) Output: 22.3.8 リンク [テキスト](URL) Input: 毎日1回は[SONGのホームページ](https://www.jaysong.net)へアクセスしましょう。 Output: 毎日1回はSONGのホームページへアクセスしましょう。 22.3.9 脚注 Input: これは普通の文章です[^foot1]。 [^foot1]: これは普通の脚注です。 Output: これは普通の文章です3。 22.3.10 数式 インライン数式は$数式$で埋め込むことができます。数式は\\(\\LaTeX\\)の書き方とほぼ同じです。ちなみに、R Markdownの数式はMathJaxによってレンダリングされます。このMathJaxライブラリはHTMLに埋め込まれているのではないため、インターネットに接続せずにHTMLファイルを開くと数式が正しく出力されません。 Input: アインシュタインと言えば、$e = mc^2$でしょう。 Output: アインシュタインと言えば、\\(e = mc^2\\)でしょう。 数式を独立した行として出力する場合は、$の代わりに$$を使用します。 Input: 独立した数式の書き方 $$ y_i \\sim \\text{Normal}(\\mathbf{X} \\boldsymbol{\\beta}, \\sigma). $$ Output: 独立した数式の書き方 \\[ y_i \\sim \\text{Normal}(\\mathbf{X} \\boldsymbol{\\beta}, \\sigma). \\] もし数式が複数の行で構成されている場合は$$内に\\begin{align}を使用します。むろん、\\(\\LaTeX\\)と使い方は同じです。 Input: 複数の行にわたる数式の書き方 $$ \\begin{align} Y_i &amp; \\sim \\text{Bernoulli}(\\theta_i), \\\\ \\theta_i &amp; = \\text{logit}^{-1}(y_i^*), \\\\ y_i^* &amp; = \\beta_0 + \\beta_1 x_1 + \\beta_2 z_1. \\end{align} $$ Output: 複数の行にわたる数式の書き方 \\[ \\begin{align} Y_i &amp; \\sim \\text{Bernoulli}(\\theta_i), \\\\ \\theta_i &amp; = \\text{logit}^{-1}(y_i^*), \\\\ y_i^* &amp; = \\beta_0 + \\beta_1 x_1 + \\beta_2 z_1. \\end{align} \\] ここまで見ればお分かりかと思いますが、$$の中には\\(\\LaTeX\\)コマンドが使用可能です。たとえば、行列を作成する際は以下のように\\begin{bmatrix}環境を使います。 Input: 行列の書き方 $$ X = \\begin{bmatrix} x_{11} &amp; x_{12} \\\\ x_{21} &amp; x_{22} \\\\ x_{31} &amp; x_{32} \\end{bmatrix}. $$ Output: 行列の書き方 \\[ X = \\begin{bmatrix} x_{11} &amp; x_{12} \\\\ x_{21} &amp; x_{22} \\\\ x_{31} &amp; x_{32} \\end{bmatrix}. \\] 22.3.11 引用 Input: 「政治とは何か」についてイーストンは以下のように定義しました。 &gt; [A] political system can be designated as those interactions through which values are authoritatively allocated for a society. Output: 「政治とは何か」についてイーストンは以下のように定義しました。 [A] political system can be designated as those interactions through which values are authoritatively allocated for a society. 22.3.12 コメント R Markdownにもコメントを付けることができます。とりあえず書いたが要らなくなった段落や文章があって、消すことがもったいない場合はコメントアウトするのも1つの方法です。ただし、コメントアウトの方法はRは#でしたが、これはR Markdownでは見出しの記号です。R Markdownのコメントは&lt;!--と--&gt;で囲みます。 Input: 文章1 &lt;!-- ここはコメントです。 --&gt; 文章2 Output: 文章1 文章2 22.3.13 コード 以上の内容まで抑えると、R Markdownを使って、簡単な文法のみで構造化された文書が作成できます。しかし、R Markdownの意義は文章とコード、結果が統合されることです。それでは文書にRコードを入れる方法について紹介します。 コードは```{r}と```の間に入力します。これだけです。これでコードと結果が同時に出力されます。たとえば、print(\"Hello World!\")を走らすコードを入れてみます。 Input: &quot;Hello World!&quot;を出力するコード ```{r} print(&quot;Hello World!&quot;) ``` Output: “Hello World!”を出力するコード print(&quot;Hello World!&quot;) ## [1] &quot;Hello World!&quot; ```{r}と```で囲まれた範囲をR Markdownではチャンク（Chunk）と呼びます。このチャンク内ではRと全く同じことが出来ます。パッケージやデータの読み込み、オブジェクトの生成、データハンドリング、可視化など、全てです。 ```{r} # パッケージの読み込み library(tidyverse) # R内蔵データセットのirisを使った可視化 iris %&gt;% mutate(Species2 = recode(Species, &quot;setosa&quot; = &quot;セトナ&quot;, &quot;versicolor&quot; = &quot;バーシクル&quot;, &quot;virginica&quot; = &quot;バージニカ&quot;)) %&gt;% ggplot() + geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) + labs(x = &quot;萼片の長さ (cm)&quot;, y = &quot;萼片の幅 (cm)&quot;, color = &quot;品種&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) ``` Output: # パッケージの読み込み library(tidyverse) # R内蔵データセットのirisを使った可視化 iris %&gt;% mutate(Species2 = recode(Species, &quot;setosa&quot; = &quot;セトナ&quot;, &quot;versicolor&quot; = &quot;バーシクル&quot;, &quot;virginica&quot; = &quot;バージニカ&quot;)) %&gt;% ggplot() + geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) + labs(x = &quot;萼片の長さ (cm)&quot;, y = &quot;萼片の幅 (cm)&quot;, color = &quot;品種&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) 他にも文中にRコードを埋め込むことも可能です。例えば、ベクトルX &lt;- c(2, 3, 5, 7, 12)があり、この平均値を文中で示したいとします。むろん、文中に「5.8」と書いても問題はありません。しかし、実はXの入力ミスが見つかり、実はc(2, 3, 5, 7, 11)になったらどうなるでしょうか。この「5.8」と書いた箇所を見つけて5.6と修正したいといけません。これは非常に面倒な作業であり、ミスも起こりやすいです。文中でRコードを入れるためには`rコード`のように入力します。 ```{r} X &lt;- c(2, 3, 5, 7, 11) ``` 変数`X`の平均値は`r mean(X)`です。 Output: X &lt;- c(2, 3, 5, 7, 11) 変数Xの平均値は5.6です。 ここで`X`ですが、単に`で囲まれただけではコードと認識されません。これは主に文中に短いコードを入れる際に使う機能です。 22.4 チャンクのオプション 22.5 ヘッダーのオプション ヘッダーは文書のタイトル（title）、作成者（author）、作成日（date）のような情報だけでなく、文書全体に適用されるスタイル情報も含まれます。R MarkdownヘッダーはYAML（やむる）形式で書かれています。他にもいくつかの項目としては subtitle: title-prefix: pagetitle: author-meta: abstract: R Markdownのコメントは&lt;!--と--&gt;を使いますが、ヘッダー内のコメントはRと同様、#を使います。 22.6 日本語が含まれているPDFの出力 本文中に日本語が含まれている場合、PDF出力の祭、エラーが表示されるだろう。日本語が含まれたPDFの場合、自分のパソコンに日本語TeX環境を整える必要がある。 もし、自分のPCで既に日本語TeX環境が整っている場合、R Markdownのヘッダーを以下のように修正する。 --- title: &quot;R楽しいぞ&quot; subtitle: &quot;みんなでやろうぜ&quot; author: &quot;矢内勇生 a.k.a Rの神&quot; date: &quot;2020年4月10日&quot; output: pdf_document: highlight: &quot;default&quot; number_sections: yes toc: yes latex_engine: xelatex mainfont: ipaexg.ttf --- コンパイルしたら以下のようなPDFファイルが生成される。 ヘッダーの主な修正はoutput:オプションである。それでは一つずつ解説する。 pdf_document:: PDF出力 highlight:: コードのハイライトテーマを設定する。 使用可能なテーマはdefault、tango、pygments、kate、monochrome、espresso、zenburn、haddock、breezedarkの9種類である。それぞれの例は後で紹介する。 number_sections:: 章・節の前に数字を付ける場合、yes toc: 目次を付ける場合、yes latex_engine:: ここはxelatexのままにする。 mainfont:: ここもipaexg.ttfのままにする。 highlightテーマについてであるが、rmarkdown 2.1の場合、使用可能なテーマは以下の9種類4である。 default tango pygments kate monochrome espresso zenburn haddock breezedark プリンターのインク、トナーカートリッジが心配ならespresso、zenburn、breezedarkは避けた方が良いだろう。 Knitは「ニット」と読みます。↩︎ HTMLに慣れている読者なら&lt;br/&gt;を使った改行もできます。ただし、一般的なMarkdownの改行よりも行間が短めです。HTMLに慣れている読者さんならお分かりかと思いますが、これはMarkdownの改行 （2行改行）はHTMLの&lt;p&gt;&lt;/p&gt;に相当するからです。↩︎ これは普通の脚注です。↩︎ defaultとtangoは同じである。↩︎ "]
]
