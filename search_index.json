[["visualization4.html", "20. 可視化[発展] 20.1 概要 20.2 バイオリンプロット 20.3 ラグプロット 20.4 リッジプロット 20.5 エラーバー付き散布図 20.6 ロリーポップチャート 20.7 平滑化ライン 20.8 ヒートマップ 20.9 等高線図 20.10 地図 20.11 非巡回有向グラフ 20.12 バンプチャート 20.13 沖積図 20.14 デンドログラム 20.15 ツリーマップ 20.16 モザイクプロット 20.17 その他のグラフ", " 20. 可視化[発展] 20.1 概要 第17章では{ggplot2}の仕組みについて、第18章ではよく使われる5種類のプロット（棒グラフ、散布図、折れ線グラフ、箱ひげ図、ヒストグラム）の作り方を、第19章ではスケール、座標系などの操作を通じたグラフの見た目調整について解説しました。本章では第18章の延長線上に位置づけることができ、紹介しきれなかった様々なグラフの作り方について簡単に解説します。本章で紹介するグラフは以下の通りです。 バイオリンプロット ラグプロット リッジプロット エラーバー付き散布図 ロリーポップチャート 平滑化ライン ヒートマップ 等高線図 地図 非巡回有向グラフ バンプチャート 沖積図 デンドログラム ツリーマップ モザイクプロット pacman::p_load(tidyverse) Country_df &lt;- read_csv(&quot;Data/Countries.csv&quot;) COVID19_df &lt;- read_csv(&quot;Data/COVID19_Worldwide.csv&quot;, guess_max = 10000) 20.2 バイオリンプロット バイオリンプロットは連続変数の分布を可視化する際に使用するプロットの一つです。第17章で紹介しましたヒストグラムや箱ひげ図と目的は同じです。それではバイオリンプロットとは何かについて例を見ながら解説します。 以下の図は対数化した一人当たり購買力平価GDP（PPP_per_capita）のヒストグラムです。 このヒストグラムをなめらかにすると以下のような図になります。 この密度曲線を上下対称にすると以下のような図となり、これがバイオリンプロットです。ヒストグラムのようにデータの分布が分かりやすくなります。 しかし、この図の場合、ヒストグラムと同様、中央値や四分位数などの情報が含まれておりません。これらの箱ひげ図を使用した方が良いでしょう。バイオリンプロットの良い点はバイオリンの中に箱ひげ図を入れ、ヒストグラムと箱ひげ図両方の長所を取ることができる点です。たとえば、バイオリンプロットを90度回転させ、中にバイオリン図を入れると以下のようになります。 それでは実際にバイオリンプロットを作ってみましょう。使い方は箱ひげ図（geom_boxplot()）と同じです。たとえば、横軸は大陸（Continent）に、縦軸は対数化した一人当たり購買力平価GDP（PPP_per_capita）にしたバイオリンプロットを作るには作るにはgeom_violin()幾何オブジェクトの中にマッピングするだけです。大陸ごとに色分けしたい場合はfill引数にContinentをマッピングします。 Country_df %&gt;% ggplot() + geom_violin(aes(x = Continent, y = PPP_per_capita, fill = Continent)) + labs(x = &quot;大陸&quot;, y = &quot;一人当たり購買力平価GDP (対数)&quot;) + scale_y_continuous(breaks = c(0, 1000, 10000, 100000), labels = c(0, 1000, 10000, 100000), trans = &quot;log10&quot;) + # y軸を対数化 guides(fill = &quot;none&quot;) + # fillのマッピング情報の凡例を隠す theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 16) ここに箱ひげ図も載せたい場合は、geom_violin()オブジェクトの後にgeom_boxplot()オブジェクトを入れるだけで十分です。 Country_df %&gt;% ggplot() + geom_violin(aes(x = Continent, y = PPP_per_capita, fill = Continent)) + geom_boxplot(aes(x = Continent, y = PPP_per_capita), width = 0.2) + labs(x = &quot;大陸&quot;, y = &quot;一人当たり購買力平価GDP (対数)&quot;) + scale_y_continuous(breaks = c(0, 1000, 10000, 100000), labels = c(0, 1000, 10000, 100000), trans = &quot;log10&quot;) + guides(fill = &quot;none&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 16) 箱ひげ図は四分位範囲、四分位数、最小値、最大値などの情報を素早く読み取れますが、どの値当たりが分厚いかなどの情報が欠けています。これをバイオリンプロットで補うことで、よりデータの分布を的確に把握することができます。 20.3 ラグプロット ラグプロット（rug plot）は変数の分布を示す点ではヒストグラム、箱ひげ図、バイオリンプロットと同じ目的を持ちますが、大きな違いとしてはラグプロット単体で使われるケースがない（または、非常に稀）という点です。ラグプロットは上述しましたヒストグラムや箱ひげ図、または散布図などと組み合わせて使うのが一般的です。 以下はCountry_dfのPPP_per_capita（常用対数変換）のヒストグラムです。 Country_df %&gt;% drop_na(PPP_per_capita) %&gt;% ggplot() + geom_histogram(aes(x = PPP_per_capita), bins = 15, color = &quot;white&quot;) + labs(x = &quot;PPP per capita (USD; log scale)&quot;, y = &quot;Number of Countries&quot;) + scale_x_log10() + guides(fill = &quot;none&quot;) + theme_minimal(base_size = 12) 一変数の分布を確認する場合、ヒストグラムは情報量の損失が少ない方です。それでも値一つ一つの情報は失われますね。例えば、上記のヒストグラムで左端の度数は1です。左端の棒の区間はおおよそ500から780であり、一人当たりPPPがこの区間に属する国は1カ国ということです。ちなみに、その国はブルンジ共和国ですが、ブルンジ共和国の具体的な一人当たりPPPはヒストグラムから分かりません。情報量をより豊富に持たせるためには区間を細かく刻むことも出来ますが、逆に分布の全体像が読みにくくなります。 ここで登場するのがラグプロットです。これは座標平面の端を使ってデータを一時現状に並べたものです。多くの場合、点ではなく、垂直線（｜）を使います。ラグプロットの幾何オブジェクトは{ggplot2}でデフォルトで提供されており、geom_rug()を使います。マッピングはxまたはyに対して行いますが、座標平面の下段にラグプロットを出力する場合はxに変数（ここではPPP_per_capita）をマッピングします。 Country_df %&gt;% drop_na(PPP_per_capita) %&gt;% ggplot() + geom_histogram(aes(x = PPP_per_capita), bins = 15, color = &quot;white&quot;) + geom_rug(aes(x = PPP_per_capita)) + labs(x = &quot;PPP per capita (USD; log scale)&quot;, y = &quot;Number of Countries&quot;) + scale_x_log10() + theme_minimal(base_size = 12) ラグプロットを使うと本来のヒストグラムの外見にほぼ影響を与えず、更に情報を付け加えることが可能です。点（｜）の密度でデータの分布を確認することもできますが、その密度の相対的な比較に関してはヒストグラムの方が良いでしょう。 ラグプロットは散布図に使うことも可能です。散布図は一つ一つの点が具体的な値がマッピングされるため、情報量の損失はほぼないでしょう。それでも散布図にラグプロットを加える意味はあります。まず、Country_dfのフリーダムハウス指数（FH_Total）と一人当たりPPP（PPP_per_capita）の散布図を作ってみましょう。 Country_df %&gt;% drop_na(FH_Total, PPP_per_capita) %&gt;% ggplot() + geom_point(aes(x = FH_Total, y = PPP_per_capita)) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + guides(fill = &quot;none&quot;) + theme_minimal(base_size = 12) 散布図の目的は二変量間の関係を確認することであって、それぞれの変数の分布を確認することではありません。もし、FH_TotalとPPP_per_capitaの分布が確認したいなら、それぞれのヒストグラムや箱ひげ図を作成した方が良いでしょう。しかし、ラグプロットを使えば、点（｜）の密度で大まかな分布は確認出来ますし、図の見た目にもほぼ影響を与えません。 横軸と縦軸両方のラグプロットは、geom_rug()にxとy両方マッピングするだけです。 Country_df %&gt;% drop_na(FH_Total, PPP_per_capita) %&gt;% ggplot() + geom_point(aes(x = FH_Total, y = PPP_per_capita)) + geom_rug(aes(x = FH_Total, y = PPP_per_capita)) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + guides(fill = &quot;none&quot;) + theme_minimal(base_size = 12) これでFH_Totalはほぼ均等に分布していて、PPP_per_capitaは2万ドル以下に多く密集していることが確認できます。 {ggExtra}のggMarginal()を使えば、ラグプロットでなく、箱ひげ図やヒストグラムを付けることも可能です。{ggplot2}で作図した図をオブジェクトとして格納し、ggMarginal()の第一引数として指定します。第一引数のみだと密度のだけ出力されるため、箱ひげ図を付けるためにはtype = \"boxplot\"を指定します（既定値は\"density\"）。ヒストグラムを出力する場合は\"histogram\"と指定します。 Scatter_Fig1 &lt;- Country_df %&gt;% drop_na(FH_Total, PPP_per_capita) %&gt;% ggplot() + geom_point(aes(x = FH_Total, y = PPP_per_capita)) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + guides(fill = &quot;none&quot;) + theme_minimal(base_size = 12) ggExtra::ggMarginal(Scatter_Fig1, type = &quot;boxplot&quot;) 20.4 リッジプロット リッジプロット（ridge plot）はある変数の分布をグループごとに出力する図です。大陸ごとの人間開発指数の分布を示したり、時系列データなら分布の変化を示す時にも使えます。ここでは大陸ごとの人間開発指数の分布をリッジプロットで示してみましょう。 リッジプロットを作成する前に、geom_density()幾何オブジェクトを用い、変数の密度曲線（density curve）を作ってみます。マッピングはxに対し、分布を出力する変数名を指定します。また、密度曲線内部に色塗り（fill）をし、曲線を計算する際のバンド幅（bw）は0.054にします。bwが大きいほど、なめらかな曲線になります。 Country_df %&gt;% ggplot() + geom_density(aes(x = HDI_2018), fill = &quot;gray70&quot;, bw = 0.054) + labs(x = &quot;2018年人間開発指数&quot;, y = &quot;大陸&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) これを大陸ごとに出力する場合、ファセット分割を行います。今回は大陸ごとに1列（ncol = 1）でファセットを分割します。 Country_df %&gt;% ggplot() + geom_density(aes(x = HDI_2018), fill = &quot;gray70&quot;, bw = 0.054) + labs(x = &quot;2018年人間開発指数&quot;, y = &quot;大陸&quot;) + facet_wrap(~Continent, ncol = 1) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) それでは上のグラフをリッジプロットとして作図してみましょう。今回は{ggridges}パッケージを使います。 pacman::p_load(ggridges) 使用する幾何オブジェクトはgeom_density_ridges()です。似たような幾何オブジェクトとしてgeom_ridgeline()がありますが、こちらは予め密度曲線の高さを計算しておく必要があります。一方、geom_density_ridges()は変数だけ指定すれば密度を自動的に計算してくれます。マッピングはxとyに対し、それぞれ分布を出力する変数名とグループ変数名を指定します。また、密度曲線が重なるケースもあるため、透明度（alpha）も0.5にしておきましょう。ここでは別途指定しませんが、ハンド幅も指定可能であり、aes()の外側にbandwidthを指定するだけです。 Country_df %&gt;% ggplot() + geom_density_ridges(aes(x = HDI_2018, y = Continent), alpha = 0.5) + labs(x = &quot;2018年人間開発指数&quot;, y = &quot;大陸&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) ## Picking joint bandwidth of 0.054 先ほど作図した図と非常に似た図が出来上がりました。ファセット分割に比べ、空間を最大限に活用していることが分かります。ファセットラベルがなく、グループ名が縦軸上に位置するからです。また、リッジプロットの特徴は密度曲線がオーバラップする点ですが、以下のようにscale = 1を指定すると、オーバラップなしで作成することも可能です。もし、scale = 3にすると最大2つの密度曲線が重なることになります。たとえば最下段のアフリカはアメリカの行と若干オーバラップしていますが、scale = 3の場合、アジアの行までオーバーラップされうることになります。 Country_df %&gt;% ggplot() + geom_density_ridges(aes(x = HDI_2018, y = Continent), scale = 1, alpha = 0.5) + labs(x = &quot;2018年人間開発指数&quot;, y = &quot;大陸&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) ## Picking joint bandwidth of 0.054 また、横軸の値に応じて背景の色をグラデーションで表現することも可能です。この場合、geom_density_ridges()幾何オブジェクトでなく、geom_density_ridges_gradient()を使い、fillにもマッピングをする必要があります。横軸（x）の値に応じて色塗りをする場合、fill = stat(x)とします。デフォルトでは横軸の値が高いほど空色、低いほど黒になります。ここでは高いほど黄色、低いほど紫ににするため、色弱にも優しいscale_fill_viridis_c()を使い1、カラーオプションはplasmaにします（option = \"c\"）。 Country_df %&gt;% ggplot() + geom_density_ridges_gradient(aes(x = HDI_2018, y = Continent, fill = stat(x)), alpha = 0.5) + scale_fill_viridis_c(option = &quot;C&quot;) + labs(x = &quot;2018年人間開発指数&quot;, y = &quot;大陸&quot;, fill = &quot;2018年人間開発指数&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) + theme(legend.position = &quot;bottom&quot;) ## Picking joint bandwidth of 0.054 密度曲線は基本的にはなめらかな曲線であるため、データが存在しない箇所にも密度が高く見積もられるケースがあります。全体的な分布を俯瞰するには良いですが、情報の損失は避けられません。そこで出てくるのが点付きのリッジプロットです。HDI_2018の個々の値を点で出力するにはjittered_points = TRUEを指定するだけです。これだけで密度曲線の内側に点が若干のズレ付き（jitter）で出力されます。ただし、密度曲線がオーバーラップされるリッジプロットの特徴を考えると、グループごとに点の色分けをする必要があります（同じ色になると、どのグループの点かが分からなくなるので）。この場合、point_colorに対し、グループ変数（Continent）をマッピングします。また、密度曲線の色と合わせるために密度曲線の色塗りもfillで指定します。 Country_df %&gt;% ggplot() + geom_density_ridges(aes(x = HDI_2018, y = Continent, fill = Continent, point_color = Continent), alpha = 0.5, jittered_points = TRUE) + guides(fill = &quot;none&quot;, point_color = &quot;none&quot;) + # 凡例を削除 labs(x = &quot;2018年人間開発指数&quot;, y = &quot;大陸&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) ## Picking joint bandwidth of 0.054 他にも密度曲線の下側にラグプロットを付けることも可能です。こうすれば点ごとに色訳をする必要もなくなります。ラグプロットを付けるためには点の形（point_shape）を「|」にする必要があります。ただ、これだけだと「|」が密度曲線内部に散らばる（jittered）だけです。散らばりをなくす、つまり密度曲線の下段に固定する必要があり、これはaes()その外側にposition = position_points_jitter(width = 0, height = 0)を指定することで出来ます。 Country_df %&gt;% ggplot() + geom_density_ridges(aes(x = HDI_2018, y = Continent, fill = Continent), alpha = 0.5, jittered_points = TRUE, position = position_points_jitter(width = 0, height = 0), point_shape = &quot;|&quot;, point_size = 3) + guides(fill = &quot;none&quot;) + labs(x = &quot;2018年人間開発指数&quot;, y = &quot;大陸&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) ## Picking joint bandwidth of 0.054 最後に密度曲線でなく、ヒストグラムで示す方法を紹介します。これはgeom_density_ridges()の内部にstat = \"binline\"を指定するだけです。 Country_df %&gt;% ggplot() + geom_density_ridges(aes(x = HDI_2018, y = Continent), alpha = 0.5, stat = &quot;binline&quot;) + labs(x = &quot;2018年人間開発指数&quot;, y = &quot;大陸&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) ## `stat_binline()` using `bins = 30`. Pick better value with `binwidth`. 20.5 エラーバー付き散布図 エラーバー付きの散布図は推定結果の点推定値とその不確実性（信頼区間など）を示す際によく使われる図です。以下の表はCountry_dfを用い、大陸（オセアニアを除く）ごとにフリーダムハウス・スコア（FH_Total）を一人当たりPPP GDP（PPP_per_capita）に回帰させた分析から得られたフリーダムハウス・スコア（FH_Total）の係数（以下の式の\\(\\beta_1\\)）の点推定値と95%信頼区間です。 \\[ \\text{PPP per capita} = \\beta_0 + \\beta_1 \\cdot \\text{FH_Total} + \\varepsilon \\] Pointrange_df &lt;- tibble( Continent = c(&quot;Asia&quot;, &quot;Europe&quot;, &quot;Africa&quot;, &quot;America&quot;), Coef = c(65.3, 588.0, 53.4, 316.0), Conf_lwr = c(-250.0, 376.0, -14.5, 128.0), Conf_upr = c(380.0, 801.0, 121.0, 504.0) ) Pointrange_df ## # A tibble: 4 x 4 ## # Groups: Continent [4] ## Continent Coef Conf_lwr Conf_upr ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Asia 65.3 -250. 380. ## 2 Europe 588. 376. 801. ## 3 Africa 53.4 -14.5 121. ## 4 America 316. 128. 504. 実は以上のデータは以下のようなコードで作成されています。{purrr}パッケージの使い方に慣れる必要があるので、第24章を参照してください。 Pointrange_df &lt;- Country_df %&gt;% filter(Continent != &quot;Oceania&quot;) %&gt;% group_by(Continent) %&gt;% nest() %&gt;% mutate(Fit = map(data, ~lm(PPP_per_capita ~ FH_Total, data = .)), Est = map(Fit, broom::tidy, conf.int = TRUE)) %&gt;% unnest(Est) %&gt;% filter(term == &quot;FH_Total&quot;) %&gt;% select(Continent, Coef = estimate, Conf_lwr = conf.low, Conf_upr = conf.high) このPointrange_dfを用いて横軸は大陸（Continent）、縦軸には点推定値（Coef）と95%信頼区間（Conf_lwrとConf_upr）を出力します。ここで使う幾何オブジェクトはgeom_pointrange()です。横軸xと点推定値y、95%信頼区間の下限のymin、上限のymaxにマッピングします。エラーバー付き散布図を立てに並べたい場合はyとx、xmin、xmaxにマッピングします。 Pointrange_df %&gt;% ggplot() + geom_hline(yintercept = 0, linetype = 2) + geom_pointrange(aes(x = Continent, y = Coef, ymin = Conf_lwr, ymax = Conf_upr), size = 0.75) + labs(y = expression(paste(beta[1], &quot; with 95% CI&quot;))) + theme_bw(base_size = 12) ここでもう一つの次元を追加することもあるでしょう。たとえば、複数のモデルを比較した場合がそうかもしれません。以下のPointrange_df2について考えてみましょう。 Pointrange_df2 &lt;- tibble( Continent = rep(c(&quot;Asia&quot;, &quot;Europe&quot;, &quot;Africa&quot;, &quot;America&quot;), each = 2), Term = rep(c(&quot;Civic Liverty&quot;, &quot;Political Right&quot;), 4), Coef = c(207.747, 29.188, 1050.164, 1284.101, 110.025, 93.537, 581.4593, 646.9211), Conf_lwr = c(-385.221, -609.771, 692.204, 768.209, -12.648, -53.982, 262.056, 201.511), Conf_upr = c(800.716, 668.147, 1408.125, 1801.994, 232.697, 241.057, 900.863, 1092.331)) Pointrange_df2 ## # A tibble: 8 x 5 ## # Groups: Continent [4] ## Continent Term Coef Conf_lwr Conf_upr ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Asia Civic Liberty 208. -385. 801. ## 2 Asia Political Right 29.2 -610. 668. ## 3 Europe Civic Liberty 1050. 692. 1408. ## 4 Europe Political Right 1285. 768. 1802. ## 5 Africa Civic Liberty 110. -12.6 233. ## 6 Africa Political Right 93.5 -54.0 241. ## 7 America Civic Liberty 581. 262. 901. ## 8 America Political Right 647. 202. 1092. このデータは以下の2つのモデルを大陸ごとに推定した\\(\\beta_1\\)と\\(\\gamma_1\\)の点推定値と95%信頼区間です。 \\[ \\begin{aligned} \\text{PPP per capita} &amp; = \\beta_0 + \\beta_1 \\cdot \\text{FH_CL} + \\varepsilon \\\\ \\text{PPP per capita} &amp; = \\gamma_0 + \\gamma_1 \\cdot \\text{FH_PR} + \\upsilon \\end{aligned} \\] どの説明変数を用いたかでエラーバーと点の色分けを行う場合、colorに対してTermをマッピングします。 Pointrange_df2 %&gt;% ggplot() + geom_hline(yintercept = 0, linetype = 2) + geom_pointrange(aes(x = Continent, y = Coef, ymin = Conf_lwr, ymax = Conf_upr, color = Term), size = 0.75) + labs(y = expression(paste(beta[1], &quot; and &quot;, gamma[1], &quot; with 95% CI&quot;)), color = &quot;&quot;) + theme_bw(base_size = 12) + theme(legend.position = &quot;bottom&quot;) 何か違いますね。この2つのエラーバーと点の位置をずらす必要があるようです。これは3次元以上の棒グラフで使ったposition引数で調整可能です。今回は実引数としてposition_dodge(0.5)を指定してみましょう。 Pointrange_df2 %&gt;% ggplot() + geom_hline(yintercept = 0, linetype = 2) + geom_pointrange(aes(x = Continent, y = Coef, ymin = Conf_lwr, ymax = Conf_upr, color = Term), size = 0.75, position = position_dodge(0.5)) + labs(y = expression(paste(beta[1], &quot; and &quot;, gamma[1], &quot; with 95% CI&quot;)), color = &quot;&quot;) + theme_bw(base_size = 12) + theme(legend.position = &quot;bottom&quot;) これで完成です。更に、\\(\\alpha = 0.05\\)水準で統計的に有意か否かを透明度で示し、透明度の凡例を非表示にしてみましょう。\\(\\alpha = 0.05\\)水準で統計的に有意か否かは95%信頼区間の上限と下限の積が0より大きいか否かで判定できます。ggplot()にデータを渡す前に統計的有意か否かを意味するSig変数を作成し、geom_pointrage()の内部ではalphaにSigをマッピングします。 Pointrange_df2 %&gt;% mutate(Sig = if_else(Conf_lwr * Conf_upr &gt; 0, &quot;Significant&quot;, &quot;Insignificant&quot;)) %&gt;% ggplot() + geom_hline(yintercept = 0, linetype = 2) + geom_pointrange(aes(x = Continent, y = Coef, ymin = Conf_lwr, ymax = Conf_upr, color = Term, alpha = Sig), size = 0.75, position = position_dodge(0.5)) + labs(y = expression(paste(beta[1], &quot; and &quot;, gamma[1], &quot; with 95% CI&quot;)), color = &quot;&quot;) + scale_alpha_manual(values = c(&quot;Significant&quot; = 1, &quot;Insignificant&quot; = 0.35)) + guides(alpha = FALSE) + theme_bw(base_size = 12) + theme(legend.position = &quot;bottom&quot;) 20.6 ロリーポップチャート ロリーポップチャートは棒グラフの特殊な形態であり、棒がロリーポップ（チュッパチャップス）の形をしているものを指します。したがって、2つの図は本質的に同じですが、棒が多い場合はロリーポップチャートを使うケースがあります。棒が非常に多い棒グラフの場合、図を不適切に縮小するとモアレが生じるケースがあるからです。 まず、Country_dfを用い、ヨーロッパ諸国の一人当たりPPP GDP（PPP_per_capita）の棒グラフを作るとします。PPP_per_capitaが欠損していないヨーロッパの国は46行であり、非常に棒が多い棒グラフになります。 Country_df %&gt;% filter(Continent == &quot;Europe&quot;) %&gt;% drop_na(PPP_per_capita) %&gt;% ggplot() + geom_bar(aes(y = Country, x = PPP_per_capita), stat = &quot;identity&quot;) + labs(x = &quot;一人あたり購買力平価GDP&quot;, y = &quot;国&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) ここで登場するのがロリーポップチャートです。ロリーポップチャートの構成要素は棒とキャンディーの部分です。棒は線になるためgeom_segement()を、キャンディーは散布図geom_point()を使います。散布図については既に第18章で説明しましたので、ここではgeom_segment()について説明します。 geom_segment()は直線を引く幾何オブジェクトであり、線の起点（xとy）と終点（xendとyend）に対してマッピングをする必要があります。横軸上の起点は0、縦軸上の起点はCountryです。そして横軸上の終点はPPP_per_capita、縦軸上のそれはCountryです。縦軸上の起点と終点が同じということは水平線を引くことになります。 geom_segment()で水平線を描いたら、次は散布図をオーバーラップさせます。点の横軸上の位置はPPP_per_capita、縦軸上の位置はCountryです。 Country_df %&gt;% filter(Continent == &quot;Europe&quot;) %&gt;% drop_na(PPP_per_capita) %&gt;% ggplot() + geom_segment(aes(y = Country, yend = Country, x = 0, xend = PPP_per_capita)) + geom_point(aes(y = Country, x = PPP_per_capita), color = &quot;orange&quot;) + labs(x = &quot;一人あたり購買力平価GDP (USD)&quot;, y = &quot;国&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) + theme(panel.grid.major.y = element_blank(), panel.border = element_blank(), axis.ticks.y = element_blank()) これで完成です。もし一人当たりPPP GDP順で並べ替えたい場合はfct_reorder()を使います。CountryをPPP_per_capitaの低い方を先にくるようにするなら、fct_reorder(Country, PPP_per_capita)です。縦に並ぶの棒グラフなら最初に来る水準が下に位置されます。もし、順番を逆にしたいなら、更にfct_rev()で水準の順番を逆転させます。 Country_df %&gt;% filter(Continent == &quot;Europe&quot;) %&gt;% drop_na(PPP_per_capita) %&gt;% mutate(Country = fct_reorder(Country, PPP_per_capita)) %&gt;% ggplot() + geom_segment(aes(y = Country, yend = Country, x = 0, xend = PPP_per_capita)) + geom_point(aes(y = Country, x = PPP_per_capita), color = &quot;orange&quot;) + labs(x = &quot;一人あたり購買力平価GDP (USD)&quot;, y = &quot;国&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) + theme(panel.grid.major.y = element_blank(), panel.border = element_blank(), axis.ticks.y = element_blank()) ロリーポップロリーポップチャートで次元を追加するには点（キャンディー）の色分けが考えられます。たとえば、OECD加盟国か否かの次元を追加する場合、geom_point()においてcolorをマッピングするだけです。 Country_df %&gt;% filter(Continent == &quot;Europe&quot;) %&gt;% drop_na(PPP_per_capita) %&gt;% mutate(Country = fct_reorder(Country, PPP_per_capita), OECD = if_else(OECD == 1, &quot;OECD&quot;, &quot;non-OECD&quot;), OECD = factor(OECD, levels = c(&quot;OECD&quot;, &quot;non-OECD&quot;))) %&gt;% ggplot() + geom_segment(aes(y = Country, yend = Country, x = 0, xend = PPP_per_capita)) + geom_point(aes(y = Country, x = PPP_per_capita, color = OECD)) + scale_color_manual(values = c(&quot;OECD&quot; = &quot;orange&quot;, &quot;non-OECD&quot; = &quot;royalblue&quot;)) + labs(x = &quot;一人あたり購買力平価GDP (USD)&quot;, y = &quot;国&quot;, color = &quot;&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) + theme(panel.grid.major.y = element_blank(), panel.border = element_blank(), axis.ticks.y = element_blank(), legend.position = &quot;bottom&quot;) ファセット分割ももちろんできますが、この場合、OECD加盟国の一人当たりPPP GDPが相対的に高いことを示すなら、一つのファセットにまとめた方が良いでしょう。 以下のようにロリーポップを横に並べることもできますが、棒の数が多いケースがほとんどであるロリーポップチャートではラベルの回転が必要になるため、読みにくくなるかも知れません。 Country_df %&gt;% filter(Continent == &quot;Europe&quot;) %&gt;% drop_na(PPP_per_capita) %&gt;% mutate(Country = fct_reorder(Country, PPP_per_capita), Country = fct_rev(Country)) %&gt;% ggplot() + geom_segment(aes(x = Country, xend = Country, y = 0, yend = PPP_per_capita)) + geom_point(aes(x = Country, y = PPP_per_capita), color = &quot;orange&quot;) + labs(x = &quot;国&quot;, y = &quot;一人あたり購買力平価GDP (USD)&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) + theme(panel.grid.major.y = element_blank(), panel.border = element_blank(), axis.ticks.y = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) 20.7 平滑化ライン 2次元平面上に散布図をプロットし、二変数間の関係を一本の線で要約するのは平滑化ラインです。{ggplot2}ではgeom_smooth()幾何オブジェクトを重ねることで簡単に平滑化ラインをプロットすることができます。まずは、横軸をフリーダムハウス・スコア（FH_Total）、縦軸を一人当たり購買力平価GDP（PPP_per_capita）にした散布図を出力し、その上に平滑化ラインを追加してみましょう。geom_smooth()にもマッピングが必要で、aes()の内部にxとyをマッピングします。今回はgeom_point()とgeom_smooth()が同じマッピング情報を共有するため、ggplot()内部でマッピングします。 Country_df %&gt;% ggplot(aes(x = FH_Total, y = PPP_per_capita)) + geom_point() + geom_smooth() + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + theme_minimal(base_size = 12) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 青い線が平滑化ライン、網掛けの領域が95%信頼区間です。この線はLOESS (LOcal Estimated Scatterplot Smoothing)と呼ばれる非線形平滑化ラインです。どのようなラインを引くかはmethod引数で指定しますが、このmethod既定値が\"loess\"です。これを見るとフリーダムハウス・スコアが75以下の国では国の自由度と所得間の関係があまり見られませんが、75からは正の関係が確認できます。 LOESS平滑化の場合、span引数を使って滑らかさを調整することができます。spanの既定値は0.75ですが、これが小さいほど散布図によりフィットしたラインが引かれ、よりギザギザな線になります。たとえば、spanを0.25にすると以下のようなグラフが得られます。 Country_df %&gt;% ggplot(aes(x = FH_Total, y = PPP_per_capita)) + geom_point() + geom_smooth(method = &quot;loess&quot;, span = 0.25) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + theme_minimal(base_size = 12) ## `geom_smooth()` using formula &#39;y ~ x&#39; 他にも定番の回帰直線を引くこともできます。methodの実引数を\"lm\"に変えるだけです。 Country_df %&gt;% ggplot(aes(x = FH_Total, y = PPP_per_capita)) + geom_point() + geom_smooth(method = &quot;lm&quot;) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + theme_minimal(base_size = 12) ## `geom_smooth()` using formula &#39;y ~ x&#39; 信頼区間は既定値だと95%信頼区間が表示されますが、level引数で調整することができます。たとえば、99.9%信頼区間を表示したい場合、level = 0.999を指定します。 Country_df %&gt;% ggplot(aes(x = FH_Total, y = PPP_per_capita)) + geom_point() + geom_smooth(method = &quot;lm&quot;, level = 0.999) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + theme_minimal(base_size = 12) ## `geom_smooth()` using formula &#39;y ~ x&#39; 信頼区間を消したい場合はse = FALSEを指定します（既定値はTRUE）。 Country_df %&gt;% ggplot(aes(x = FH_Total, y = PPP_per_capita)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + theme_minimal(base_size = 12) ## `geom_smooth()` using formula &#39;y ~ x&#39; 最後にデータのサブセットごとに回帰直線を引く方法について説明します。散布図で色分けを行う場合、aes()内でcolor引数を指定しますが、これだけで十分です。今回はこれまでの散布図をOECD加盟有無ごとに色分けし、それぞれ別の回帰直線を重ねてみましょう。回帰直線も色分けしたいのでcolor引数で次元を増やす必要があり、これはgeom_point()と共通であるため、ggplot()内でマッピングします。 Country_df %&gt;% mutate(OECD = if_else(OECD == 1, &quot;加盟国&quot;, &quot;非加盟国&quot;)) %&gt;% ggplot(aes(x = FH_Total, y = PPP_per_capita, color = OECD)) + geom_point() + geom_smooth(method = &quot;lm&quot;) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + coord_cartesian(ylim = c(0, 120000)) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) ## `geom_smooth()` using formula &#39;y ~ x&#39; これを見ると、国の自由度と所得の間に関係が見られるのはOECD加盟国で、非加盟国では非常に関係が弱いことが分かります。 あまりいい方法ではないと思いますが、散布図は色（color）で分け、回帰直線は線の種類（linetype）で分けるならどうすれば良いでしょうか。この場合はcolorはgeom_point()内部で、linetypeはgeom_smooth()でマッピングします。 Country_df %&gt;% mutate(OECD = if_else(OECD == 1, &quot;加盟国&quot;, &quot;非加盟国&quot;)) %&gt;% ggplot(aes(x = FH_Total, y = PPP_per_capita)) + geom_point(aes(color = OECD)) + geom_smooth(aes(linetype = OECD), method = &quot;lm&quot;, color = &quot;black&quot;) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + coord_cartesian(ylim = c(0, 120000)) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) ## `geom_smooth()` using formula &#39;y ~ x&#39; {ggplot2}が提供する平滑化ラインにはLOESSと回帰直線以外にも\"glm\"や\"gam\"などがります。詳細はRコンソール上で?geom_smoothを入力し、ヘルプを参照してください。 20.8 ヒートマップ ヒートマップ（heat map）には2つの使い方があります。まずは、離散変数\\(\\times\\)離散変数の同時分布を示す時です。これは後ほど紹介するモザイク・プロットと目的は同じですが、モザイク・プロットはセルの面積で密度や度数を表すに対し、ヒートマップは主に色で密度や度数を表します。 ここでは一人当たり購買力平価GDP（PPP_per_capita）を「1万ドル未満」、「1万ドル以上・2万ドル未満」、「2万ドル以上、3万ドル未満」、「3万ドル以上」の離散変数に変換し、大陸ごとの国家数をヒートマップとして示してみたいと思います。まずは、変数のリコーディングをし、全てfactor化します。 Heatmap_df1 &lt;- Country_df %&gt;% filter(!is.na(PPP_per_capita)) %&gt;% mutate(Continent = recode(Continent, &quot;Africa&quot; = &quot;アフリカ&quot;, &quot;America&quot; = &quot;アメリカ&quot;, &quot;Asia&quot; = &quot;アジア&quot;, &quot;Europe&quot; = &quot;ヨーロッパ&quot;, .default = &quot;オセアニア&quot;), Continent = factor(Continent, levels = c(&quot;アフリカ&quot;, &quot;アメリカ&quot;, &quot;アジア&quot;, &quot;ヨーロッパ&quot;, &quot;オセアニア&quot;)), Income = case_when(PPP_per_capita &lt; 10000 ~ &quot;1万ドル未満&quot;, PPP_per_capita &lt; 20000 ~ &quot;1万ドル以上\\n2万ドル未満&quot;, PPP_per_capita &lt; 30000 ~ &quot;2万ドル以上\\n3万ドル未満&quot;, TRUE ~ &quot;3万ドル以上&quot;), Income = factor(Income, levels = c(&quot;1万ドル未満&quot;, &quot;1万ドル以上\\n2万ドル未満&quot;, &quot;2万ドル以上\\n3万ドル未満&quot;, &quot;3万ドル以上&quot;))) %&gt;% select(Country, Continent, Income, FH_Total) Heatmap_df1 ## # A tibble: 178 × 4 ## Country Continent Income FH_Total ## &lt;chr&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 Afghanistan アジア &quot;1万ドル未満&quot; 27 ## 2 Albania ヨーロッパ &quot;1万ドル以上\\n2万ドル未満&quot; 67 ## 3 Algeria アフリカ &quot;1万ドル以上\\n2万ドル未満&quot; 34 ## 4 Angola アフリカ &quot;1万ドル未満&quot; 32 ## 5 Antigua and Barbuda アメリカ &quot;2万ドル以上\\n3万ドル未満&quot; 85 ## 6 Argentina アメリカ &quot;2万ドル以上\\n3万ドル未満&quot; 85 ## 7 Armenia ヨーロッパ &quot;1万ドル以上\\n2万ドル未満&quot; 53 ## 8 Australia オセアニア &quot;3万ドル以上&quot; 97 ## 9 Austria ヨーロッパ &quot;3万ドル以上&quot; 93 ## 10 Azerbaijan ヨーロッパ &quot;1万ドル以上\\n2万ドル未満&quot; 10 ## # … with 168 more rows 次はgroup_by()とsummarise()を使って、各カテゴリーに属するケース数を計算し、Nという名の列として追加します。 Heatmap_df1 &lt;- Heatmap_df1 %&gt;% group_by(Continent, Income) %&gt;% summarise(N = n(), .groups = &quot;drop&quot;) Heatmap_df1 ## # A tibble: 18 × 3 ## Continent Income N ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 アフリカ &quot;1万ドル未満&quot; 41 ## 2 アフリカ &quot;1万ドル以上\\n2万ドル未満&quot; 9 ## 3 アフリカ &quot;2万ドル以上\\n3万ドル未満&quot; 2 ## 4 アメリカ &quot;1万ドル未満&quot; 10 ## 5 アメリカ &quot;1万ドル以上\\n2万ドル未満&quot; 14 ## 6 アメリカ &quot;2万ドル以上\\n3万ドル未満&quot; 6 ## 7 アメリカ &quot;3万ドル以上&quot; 5 ## 8 アジア &quot;1万ドル未満&quot; 17 ## 9 アジア &quot;1万ドル以上\\n2万ドル未満&quot; 10 ## 10 アジア &quot;2万ドル以上\\n3万ドル未満&quot; 3 ## 11 アジア &quot;3万ドル以上&quot; 11 ## 12 ヨーロッパ &quot;1万ドル未満&quot; 1 ## 13 ヨーロッパ &quot;1万ドル以上\\n2万ドル未満&quot; 10 ## 14 ヨーロッパ &quot;2万ドル以上\\n3万ドル未満&quot; 7 ## 15 ヨーロッパ &quot;3万ドル以上&quot; 28 ## 16 オセアニア &quot;1万ドル未満&quot; 1 ## 17 オセアニア &quot;1万ドル以上\\n2万ドル未満&quot; 1 ## 18 オセアニア &quot;3万ドル以上&quot; 2 これでデータの準備は終わりました。ヒートマップを作成する幾何オブジェクトはgeom_tile()です。同時分布を示したい変数を、それぞれxとyにマッピングし、密度、または度数を表す変数をfillにマッピングします。ここでは横軸を大陸（Continent）、縦軸を一人当たり購買力平価GDP（Income）とし、fillにはN変数をマッピングします。 Heatmap_df1 %&gt;% ggplot() + geom_tile(aes(x = Continent, y = Income, fill = N)) + labs(x = &quot;大陸&quot;, y = &quot;一人当たり購買力平価GDP（ドル）&quot;, fill = &quot;国家数&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) + theme(panel.grid = element_blank()) # グリッドラインを消す 明るいほどカテゴリーに属するケースが多く、暗いほど少ないことを意味します。これを見ると世界で最も多くの割合を占めているのは、一人当たり購買力平価GDPが1万ドル未満のアフリカの国で、次は一人当たり購買力平価GDPが3万ドル以上のヨーロッパの国であることが分かります。欠損している（ケース数が0）セルは白の空白となります。 色をカスタマイズするにはscale_fill_gradient()です。これは第19章で紹介しましたscale_color_gradient()と使い方は同じです。scale_fill_gradient()は中間点なし、scale_fill_gradient2()は中間点ありの場合に使いますが、ここでは度数が小さい場合はcornsilk色を、大きい場合はbrown3色を使います。それぞれlowとhighに色を指定するだけです。 Heatmap_df1 %&gt;% ggplot() + geom_tile(aes(x = Continent, y = Income, fill = N)) + labs(x = &quot;大陸&quot;, y = &quot;一人当たり購買力平価GDP（ドル）&quot;, fill = &quot;国家数&quot;) + scale_fill_gradient(low = &quot;cornsilk&quot;, high = &quot;brown3&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) + theme(panel.grid = element_blank()) # グリッドラインを消す 気のせいかも知れませんが、先ほどよりは読みやすくなったような気がしますね。 次は、離散変数\\(\\times\\)離散変数における連続変数の値を示すヒートマップを作ってみましょう。 Heatmap_df2 &lt;- COVID19_df %&gt;% # COVID19_dfとCountry_dfを結合（キー変数はCountry） left_join(Country_df, by = &quot;Country&quot;) %&gt;% # アジアの国のみ抽出する filter(Continent == &quot;Asia&quot;) %&gt;% # Date列をYear、Month、Day列に分割する separate(col = Date, into = c(&quot;Year&quot;, &quot;Month&quot;, &quot;Day&quot;)) %&gt;% # 1000000万人当たり新規感染者数を計算し、Confirmed_per_capita列として追加 mutate(Confirmed_per_capita = Confirmed_Day / Population * 1000000) %&gt;% # CountryとMonthでグルーピングする group_by(Country, Month) %&gt;% # Confirmed_per_capitaの和を計算し、Confirmedという名の列として出力する summarise(Confirmed = sum(Confirmed_per_capita), .groups = &quot;drop&quot;) %&gt;% # Confirmedを商用対数化する。 # ただし、log10(0)は-Infになるため、Confirmedに1を足してから対数化 # Countryを出力順でfactor化し、順番を反転する mutate(Confirmed = log10(Confirmed + 1), Country = fct_inorder(Country), Country = fct_rev(Country)) Heatmap_df2 ## # A tibble: 294 × 3 ## Country Month Confirmed ## &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Afghanistan 1 0 ## 2 Afghanistan 2 0.0110 ## 3 Afghanistan 3 0.736 ## 4 Afghanistan 4 1.72 ## 5 Afghanistan 5 2.53 ## 6 Afghanistan 6 2.62 ## 7 Afghanistan 7 1.84 ## 8 Bahrain 1 0 ## 9 Bahrain 2 1.40 ## 10 Bahrain 3 2.49 ## # … with 284 more rows Heatmap_df2 %&gt;% ggplot() + geom_tile(aes(x = Month, y = Country, fill = Confirmed)) + scale_fill_gradient2(low = &quot;cornflowerblue&quot;, mid = &quot;cornsilk&quot;, high = &quot;brown3&quot;, midpoint = 2) 20.9 等高線図 連続変数\\(\\times\\)連続変数の同時分布 Country_df %&gt;% ggplot(aes(x = FH_Total, y = HDI_2018)) + geom_density_2d() + labs(x = &quot;フリーダム・ハウス・スコア&quot;, y = &quot;人間開発指数 (2018)&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) Country_df %&gt;% ggplot(aes(x = FH_Total, y = HDI_2018)) + geom_density_2d_filled() + labs(x = &quot;フリーダム・ハウス・スコア&quot;, y = &quot;人間開発指数 (2018)&quot;, fill = &quot;密度&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) 20.10 地図 20.10.1 世界地図 pacman::p_load(rnaturalearth, rnaturalearthdata, rgeos) world_map &lt;- ne_countries(scale = &quot;small&quot;, returnclass = &quot;sf&quot;) class(world_map) ## [1] &quot;sf&quot; &quot;data.frame&quot; world_map %&gt;% ggplot() + geom_sf(aes(fill = pop_est)) + scale_fill_gradient(low = &quot;cornflowerblue&quot;, high = &quot;brown3&quot;) + labs(fill = &quot;人口&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) + theme(legend.position = &quot;bottom&quot;) world_map %&gt;% ggplot() + geom_sf(aes(fill = pop_est)) + scale_fill_gradient(low = &quot;cornflowerblue&quot;, high = &quot;brown3&quot;) + labs(fill = &quot;人口&quot;) + coord_sf(xlim = c(90, 150), ylim = c(10, 50)) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) + theme(legend.position = &quot;bottom&quot;) world_map2 &lt;- ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) world_map2 %&gt;% mutate(Population = case_when(pop_est &lt; 10000000 ~ &quot;1千万未満&quot;, pop_est &lt; 50000000 ~ &quot;5千万未満&quot;, pop_est &lt; 100000000 ~ &quot;1億未満&quot;, pop_est &lt; 500000000 ~ &quot;5億未満&quot;, TRUE ~ &quot;5億以上&quot;), Population = factor(Population, levels = c(&quot;1千万未満&quot;, &quot;5千万未満&quot;, &quot;1億未満&quot;, &quot;5億未満&quot;, &quot;5億以上&quot;))) %&gt;% ggplot() + geom_sf(aes(fill = Population)) + scale_fill_brewer(palette = &quot;Blues&quot;, drop = FALSE) + labs(fill = &quot;人口&quot;) + coord_sf(xlim = c(90, 150), ylim = c(10, 50)) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) + theme(legend.position = &quot;bottom&quot;) scale_fill_brewer()のpalette引数は{RColorBrewer}パッケージが提供するパレート名を指定する。パレート一覧はRColorBrewer::display.brewer.all()で確認可能。自分で作成したパレートを使いたい場合はscale_fill_manual()を使用する。 RColorBrewer::display.brewer.all() 図 20.1: {RColorBrewer}が提供するパレート一覧 20.10.2 日本地図（全体） 20.10.3 日本地図（特定の都道府県） remotes::install_github(&quot;uribo/jpndistrict&quot;) library(jpndistrict) ## This package provide map data is based on the Digital Map 25000 (Map ## Image) published by Geospatial Information Authority of Japan (Approval ## No.603FY2017 information usage &lt;https://www.gsi.go.jp&gt;) # 大阪府のコードは27 Osaka_map &lt;- jpn_pref(pref_code = 27) class(Osaka_map) ## [1] &quot;sf&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; head(Osaka_map) ## Simple feature collection with 6 features and 4 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 135.3435 ymin: 34.61718 xmax: 135.5409 ymax: 34.73348 ## Geodetic CRS: WGS 84 ## # A tibble: 6 × 5 ## pref_code prefecture city_code city geometry ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;MULTIPOLYGON [°]&gt; ## 1 27 大阪府 27102 大阪市 都島区 (((135.519 34.7188, 135.5214 34.… ## 2 27 大阪府 27103 大阪市 福島区 (((135.468 34.68569, 135.472 34.… ## 3 27 大阪府 27104 大阪市 此花区 (((135.3587 34.62756, 135.3533 3… ## 4 27 大阪府 27106 大阪市 西区 (((135.4743 34.66666, 135.4865 3… ## 5 27 大阪府 27107 大阪市 港区 (((135.4332 34.64913, 135.4376 3… ## 6 27 大阪府 27108 大阪市 大正区 (((135.447 34.64124, 135.4482 34… Osaka_map %&gt;% ggplot() + geom_sf() + theme_minimal() 20.11 非巡回有向グラフ pacman::p_load(dagitty, ggdag) DAG_data1 &lt;- dagify(X ~ Z, Y ~ Z, Y ~ X, exposure = &quot;X&quot;, outcome = &quot;Y&quot;) ggdag(DAG_data1) ggdag(DAG_data1) + theme_dag_blank() 20.11.1 ノードの位置を指定する DAG_Pos2 &lt;- list(x = c(X = 1, Y = 3, Z = 2), y = c(X = 1, Y = 1, Z = 2)) DAG_data2 &lt;- dagify(X ~ Z, Y ~ X + Z, exposure = &quot;X&quot;, outcome = &quot;Y&quot;, coords = DAG_Pos2) ggdag(DAG_data2) + theme_dag_blank() DAG_Pos3 &lt;- list(x = c(X1 = 3, X2 = 3, X3 = 1, T = 2, Y = 4), y = c(X1 = 1, X2 = 2, X3 = 2, T = 3, Y = 3)) DAG_data3 &lt;- dagify(Y ~ T + X1 + X2, T ~ X2 + X3, X2 ~ X1 + X3, exposure = &quot;T&quot;, outcome = &quot;Y&quot;, coords = DAG_Pos3) ggdag(DAG_data3, stylized = TRUE) + theme_dag_blank() 20.12 バンプチャート 順位の変化など pacman::p_load(ggbump) Bump_df &lt;- left_join(COVID19_df, Country_df, by = &quot;Country&quot;) %&gt;% select(Country, Date, Population, Confirmed_Total, G7) %&gt;% separate(Date, into = c(&quot;Year&quot;, &quot;Month&quot;, &quot;Day&quot;), sep = &quot;/&quot;) %&gt;% mutate(Month = as.numeric(Month)) %&gt;% filter(Month &gt;= 4, G7 == 1) %&gt;% group_by(Country, Month) %&gt;% summarise(Population = mean(Population), New_Cases = sum(Confirmed_Total, na.rm = TRUE), New_Cases_per_million = New_Cases / Population * 1000000, .groups = &quot;drop&quot;) %&gt;% select(Country, Month, New_Cases_per_million) Bump_df &lt;- Bump_df %&gt;% group_by(Month) %&gt;% mutate(Rank = rank(New_Cases_per_million, ties.method = &quot;random&quot;)) %&gt;% ungroup() %&gt;% select(Country, Month, Rank, New_Cases_per_million) 簡単な作り方 Bump_df %&gt;% ggplot(aes(x = Month, y = Rank, color = Country)) + geom_bump() もう少し可愛くする Bump_df %&gt;% ggplot(aes(x = Month, y = Rank, color = Country)) + geom_point(size = 7) + geom_bump(size = 2) + theme_minimal(base_size = 14) 7月時点におけるRankの値に応じてCountryをfactor化する。 Bump_df %&gt;% mutate(Country = fct_reorder2(Country, Month, Rank, last2)) %&gt;% ggplot(aes(x = Month, y = Rank, color = Country)) + geom_point(size = 7) + geom_bump(size = 2) + theme_minimal(base_size = 14) 凡例を無くし、線の両側に国名を入れる。グリッドも不要なので除去 Bump_df %&gt;% ggplot(aes(x = Month, y = Rank, color = Country)) + geom_point(size = 7) + geom_bump(size = 2) + geom_text(data = filter(Bump_df, Month == min(Month)), aes(x = Month - 0.15, label = Country), hjust = 1) + geom_text(data = filter(Bump_df, Month == max(Month)), aes(x = Month + 0.15, label = Country), hjust = 0) + coord_cartesian(xlim = c(3, 8)) + scale_x_continuous(breaks = 4:7, labels = 4:7) + scale_y_continuous(breaks = 1:7, labels = 7:1) + labs(y = &quot;Rank&quot;, x = &quot;Month&quot;) + theme_minimal(base_size = 14) + theme(legend.position = &quot;none&quot;, panel.grid = element_blank()) 20.13 沖積図 pacman::p_load(ggalluvial) Vote_0910 &lt;- read_csv(&quot;Data/Vote_09_10.csv&quot;) Vote_0910 データは 中澤 (2014) の表3を元に筆者が作成したもの 変数名 説明 ID 回答者ID Vote09 2009年衆院選における投票先 Vote10 2010年参院選における投票先 たとえば、1番目の回答者は2009年に棄権し、2010年も棄権したことを意味する。また、5番目の回答者は2009年に自民党に投票し、2010年は共産党または社民党に投票したことを意味する。 Vote_0910 &lt;- Vote_0910 %&gt;% group_by(Vote09, Vote10) %&gt;% summarise(Freq = n(), .groups = &quot;drop&quot;) Vote_0910 ## # A tibble: 47 × 3 ## Vote09 Vote10 Freq ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 DK DK 111 ## 2 DK その他 8 ## 3 DK 公明 7 ## 4 DK 共産・社民 15 ## 5 DK 棄権 57 ## 6 DK 民主 116 ## 7 DK 自民 29 ## 8 その他 DK 18 ## 9 その他 その他 73 ## 10 その他 公明 4 ## # … with 37 more rows Vote_0910 &lt;- Vote_0910 %&gt;% mutate(Vote09 = factor(Vote09, levels = c(&quot;自民&quot;, &quot;民主&quot;, &quot;公明&quot;, &quot;共産・社民&quot;, &quot;その他&quot;, &quot;棄権&quot;, &quot;DK&quot;)), Vote10 = factor(Vote10, levels = c(&quot;自民&quot;, &quot;民主&quot;, &quot;公明&quot;, &quot;共産・社民&quot;, &quot;その他&quot;, &quot;棄権&quot;, &quot;DK&quot;))) Vote_0910 %&gt;% ggplot(aes(y = Freq, axis1 = Vote09, axis2 = Vote10)) + geom_alluvium() + geom_stratum() + geom_text(aes(label = after_stat(stratum)), stat = &quot;stratum&quot;, family = &quot;HiraKakuProN-W3&quot;) Vote_0910 %&gt;% ggplot(aes(y = Freq, axis1 = Vote09, axis2 = Vote10)) + geom_alluvium(aes(fill = Vote09)) + geom_stratum() + geom_text(aes(label = after_stat(stratum)), stat = &quot;stratum&quot;, family = &quot;HiraKakuProN-W3&quot;) Alluvial_Plot &lt;- Vote_0910 %&gt;% ggplot(aes(y = Freq, axis1 = Vote09, axis2 = Vote10)) + geom_alluvium(aes(fill = Vote10)) + geom_stratum() + geom_text(aes(label = after_stat(stratum)), stat = &quot;stratum&quot;, family = &quot;HiraKakuProN-W3&quot;) Alluvial_Plot Alluvial_Plot + ggtitle(&quot;個人レベルにおける投票先の変化&quot;) + scale_x_continuous(breaks = 1:2, labels = c(&quot;2009年衆院選&quot;, &quot;2010年参院選&quot;)) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 16) + theme(legend.position = &quot;none&quot;, panel.grid = element_blank(), axis.title = element_blank(), axis.text.y = element_blank()) 20.14 デンドログラム pacman::p_load(dendextend) Asia_df &lt;- Country_df %&gt;% filter(Continent == &quot;Asia&quot;) %&gt;% select(Country, PPP_per_capita, HDI_2018, Polity_Score, FH_Total) %&gt;% drop_na() Asia_df &lt;- Asia_df %&gt;% column_to_rownames(&quot;Country&quot;) Asia_df ## PPP_per_capita HDI_2018 Polity_Score FH_Total ## Afghanistan 2125.363 0.496 -1 27 ## Bahrain 43624.136 0.838 -10 11 ## Bangladesh 4457.529 0.614 -6 39 ## Bhutan 11362.544 0.617 7 59 ## Burma 4931.585 0.584 8 30 ## Cambodia 4142.204 0.581 -4 25 ## China 15176.568 0.758 -7 10 ## India 6564.248 0.647 9 71 ## Indonesia 11396.947 0.707 9 61 ## Iran 13961.476 0.797 -7 17 ## Iraq 10434.202 0.689 6 31 ## Israel 41318.464 0.906 6 76 ## Japan 41490.573 0.915 10 96 ## Jordan 9849.485 0.723 -3 37 ## Kazakhstan 25469.454 0.817 -6 23 ## South Korea 39921.960 0.906 8 83 ## Kuwait 50094.732 0.808 -7 36 ## Kyrgyzstan 5083.211 0.674 8 39 ## Laos 7548.949 0.604 -7 14 ## Lebanon 16473.367 0.730 6 44 ## Malaysia 27477.879 0.804 7 52 ## Mongolia 11801.134 0.735 10 84 ## Nepal 3210.718 0.579 7 56 ## Oman 27700.112 0.834 -8 23 ## Pakistan 4664.227 0.560 7 38 ## Philippines 8098.786 0.712 8 59 ## Qatar 93465.650 0.848 -10 25 ## Saudi Arabia 47196.131 0.857 -10 7 ## Singapore 95251.768 0.935 -2 50 ## Sri Lanka 13413.583 0.780 6 56 ## Tajikistan 3161.765 0.656 -3 9 ## Thailand 18383.526 0.765 -3 32 ## Timor-Leste 3034.142 0.626 8 71 ## United Arab Emirates 65777.677 0.866 -8 17 ## Uzbekistan 6792.995 0.710 -9 10 ## Vietnam 7627.625 0.693 -7 20 Asia_Cluster &lt;- Asia_df %&gt;% dist() %&gt;% hclust() {ggplot2}を使わずにデンドログラムを出力 Asia_Cluster_Dend &lt;- Asia_Cluster %&gt;% as.dendrogram() plot(Asia_Cluster_Dend) Asia_Cluster_Dend %&gt;% set(&quot;branches_k_color&quot;, k = 5) %&gt;% plot() Asia_Cluster_gg &lt;- Asia_Cluster_Dend %&gt;% set(&quot;branches_k_color&quot;, k = 5) %&gt;% as.ggdend() Cluster_ID &lt;- cutree(Asia_Cluster, k = 5) Cluster_ID &lt;- Cluster_ID[order.dendrogram(Asia_Cluster_Dend)] #Asia_Cluster_gg$labels$col &lt;- Cluster_ID ggplot() + geom_segment(data = Asia_Cluster_gg$segments, aes(x = x, y = y, xend = xend, yend = yend, color = col)) + geom_text(data = Asia_Cluster_gg$labels, aes(x = x, y = y, label = label), angle = 90, hjust = 1.2, vjust = 0.5) + coord_cartesian(ylim = c(-28000, 100000)) + labs(x = &quot;&quot;, y = &quot;&quot;) + guides(color = FALSE) + theme_minimal() + theme(panel.grid = element_blank(), axis.text = element_blank()) 20.15 ツリーマップ ツリーマップ（tree map）は変数の値の大きさを長方形の面積として表すグラフです。全体におけるシェアを示す時に使う点で、円グラフの代替案の一つになります。円グラフは項目が多すぎると読みにくいデメリットがありますが、ツリーマップは項目が多い場合でも有効です。むろん、多すぎると読みにくいことは同じですので、注意が必要です。 ツリーマップを作成するためには{treemapify}パッケージのgeom_treemap()幾何オブジェクトを使用します。まず、{treemapify}をインストールし、読み込みます。 pacman::p_load(treemapify) ここではCountry_dfからアジア諸国の人口（Population）をツリーマップをして可視化したいと思います。geom_treemap()の場合、各長方形は面積の情報のみを持ちます。この面積の情報をareaにマッピングします。 Country_df %&gt;% filter(Continent == &quot;Asia&quot;) %&gt;% ggplot() + geom_treemap(aes(area = Population)) これだけだと各長方形がどの国を指しているのかが分かりませんね。長方形の上に国名（Country）を追加するためにはgeom_treemap_text()幾何オブジェクトを使用します。マッピングはareaとlabelに対し、それぞれ面積を表すPopulationと国名を表すCountryを指定します。areaはgeom_treemap()とgeom_treemap_text()両方で使われるのでggplot()の内部でマッピングしても問題ありません2。また、aes()の外側にcolor = \"white\"で文字を白に指定し、place = \"center\"で長方形の真ん中にラベルが付くようにします。 Country_df %&gt;% filter(Continent == &quot;Asia&quot;) %&gt;% ggplot(aes(area = Population)) + geom_treemap() + geom_treemap_text(aes(label = Country), color = &quot;white&quot;, place = &quot;center&quot;) これでツリーマップが完成しました。インドと中国の存在感がかなり大きいですね。更にラベルのサイズを長方形に合わせると、その存在感をより高めることができます。ラベルの大きさを長方形に合わせるにはgeom_treepmap_text()の内部にgrow = TRUEを指定します。 Country_df %&gt;% filter(Continent == &quot;Asia&quot;) %&gt;% ggplot(aes(area = Population, label = Country)) + geom_treemap() + geom_treemap_text(color = &quot;white&quot;, place = &quot;center&quot;, grow = TRUE) ここで更に次元を追加するために、色塗りをしてみましょう。たとえば、G20加盟国か否かで色分けをしたい場合、fillにG20をマッピングします。ただし、今のままだとG20は連続変数扱いになりますので、character型、またはfactor型に変換します。 Country_df %&gt;% mutate(G20 = if_else(G20 == 1, &quot;Member&quot;, &quot;Non-member&quot;)) %&gt;% filter(Continent == &quot;Asia&quot;) %&gt;% ggplot(aes(area = Population, fill = G20, label = Country)) + geom_treemap() + geom_treemap_text(color = &quot;white&quot;, place = &quot;centre&quot;, grow = TRUE) + labs(fill = &quot;G20&quot;) + ggtitle(&quot;Population in Asia&quot;) + theme(legend.position = &quot;bottom&quot;) 色塗りは連続変数に対して行うことも可能です。ここでは2018年人間開発指数（HDI_2108）の値に応じて色塗りをしてみます。また、HDI_2018が低い（low）とbrown3、高い（high）とcornflowerblue色にします。真ん中の値（midpoint）は0.7とし、色（mid）はcornsilkを使います。 連続変数でマッピングされた色塗り（fill）の調整にはscale_fill_gradient()、またはscale_fill_gradient2()を使います。前者は中間点なし、後者は中間点ありです。これらの使い方は第19章で紹介しましたscale_color_gradient()と同じです。 Country_df %&gt;% filter(Continent == &quot;Asia&quot;) %&gt;% ggplot(aes(area = Population, fill = HDI_2018, label = Country)) + geom_treemap() + geom_treemap_text(color = &quot;white&quot;, place = &quot;centre&quot;, grow = TRUE) + scale_fill_gradient2(low = &quot;brown3&quot;, mid = &quot;cornsilk&quot;, high = &quot;cornflowerblue&quot;, midpoint = 0.7) + labs(fill = &quot;UN Human Development Index (2018)&quot;) + ggtitle(&quot;Population in Asia&quot;) + theme(legend.position = &quot;bottom&quot;) ちなみに以上の図を円グラフにすると以下のようになります（国名は人口の割合が2.5%を超える国のみ表示）。ツリーマップと比較してかなり読みにくいことが分かります。 Country_df %&gt;% filter(Continent == &quot;Asia&quot;) %&gt;% arrange(Population) %&gt;% mutate(Prop = Population / sum(Population) * 100, LabelY = 100 - (cumsum(Prop) - 0.5 * Prop), CountryName = if_else(Prop &lt; 2.5, &quot;&quot;, Country), Country = fct_inorder(Country)) %&gt;% ggplot() + geom_bar(aes(x = 1, y = Prop, group = Country, fill = HDI_2018), color = &quot;black&quot;, stat = &quot;identity&quot;, width = 1) + geom_text(aes(x = 1, y = LabelY, label = CountryName)) + coord_polar(&quot;y&quot;, start = 0) + scale_fill_gradient2(low = &quot;brown3&quot;, mid = &quot;cornsilk&quot;, high = &quot;cornflowerblue&quot;, midpoint = 0.7) + labs(fill = &quot;UN Human Development Index (2018)&quot;) + ggtitle(&quot;Population in Asia&quot;) + theme_minimal() + theme(legend.position = &quot;bottom&quot;, panel.grid = element_blank(), axis.title = element_blank(), axis.text = element_blank()) 20.16 モザイクプロット モザイクプロットは2つの離散変数（おもに名目変数）の関係を可視化するために Hartigan and Kleiner (1984) が考案した図です。2つの名目変数間の関係を見る際によく使われるものはクロス表（クロス集計表）でしょう。 pacman::p_load(ggmosaic) Mosaic_df &lt;- Country_df %&gt;% select(Country, Continent, Polity = Polity_Type, PPP = PPP_per_capita) %&gt;% mutate(Continent = factor(Continent, levels = c(&quot;Africa&quot;, &quot;America&quot;, &quot;Asia&quot;, &quot;Europe&quot;, &quot;Oceania&quot;)), Polity = factor(Polity, levels = c(&quot;Autocracy&quot;, &quot;Closed Anocracy&quot;, &quot;Open Anocracy&quot;, &quot;Democracy&quot;, &quot;Full Democracy&quot;)), PPP = if_else(PPP &gt;= 15000, &quot;High PPP&quot;, &quot;Low PPP&quot;), PPP = factor(PPP, levels = c(&quot;Low PPP&quot;, &quot;High PPP&quot;))) %&gt;% drop_na() head(Mosaic_df) ## # A tibble: 6 x 4 ## Country Continent Polity PPP ## &lt;chr&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Afghanistan Asia Closed Anocracy Low PPP ## 2 Albania Europe Democracy Low PPP ## 3 Algeria Africa Open Anocracy Low PPP ## 4 Angola Africa Closed Anocracy Low PPP ## 5 Argentina America Democracy High PPP ## 6 Armenia Europe Democracy Low PPP クロス表を作成する内蔵関数としてはtable()があります。2つの変数が必要となり、第一引数が行、第二引数が列を表します。 Mosaic_Tab &lt;- table(Mosaic_df$Continent, Mosaic_df$Polity) Mosaic_Tab ## ## Autocracy Closed Anocracy Open Anocracy Democracy Full Democracy ## Africa 3 14 11 18 1 ## America 0 1 4 16 5 ## Asia 13 6 0 15 3 ## Europe 2 1 2 16 20 ## Oceania 0 0 2 0 2 このMosaic_Tabのクラスは\"table\"ですが、\"table\"クラスのオブジェクトをplot()に渡すと別途のパッケージを使わずモザイクプロットを作成することができます。 plot(Mosaic_Tab) やや地味ではありますが、モザイクプロットが出来ました。ここからはより読みやすいモザイクプロットを作成するために{ggmosaic}パッケージのgeom_mosaic()関数を使います。 geom_mosaic()の場合、xのみのマッピングで十分です。ただし、特定の変数を指定するのではなく、product(変数1, 変数2)をxにマッピングする必要があります。table()関数同様、変数1は行、変数2は列です。また、欠損値が含まれている行がある場合は、aes()の外側にna.rm = TRUEを指定する必要があります。今回はdrop_na()で欠損値をすべて除外しましたが、念の為に指定しておきます。 Mosaic_df %&gt;% ggplot() + geom_mosaic(aes(x = product(Polity, Continent)), na.rm = TRUE) + labs(x = &quot;Continent&quot;, y = &quot;Polity Type&quot;) + theme_minimal() + theme(panel.grid = element_blank()) これで出来上がりですが、\"table\"オブジェクトをplot()に渡した結果とあまり変わらないですね。続いて、この図を少し改良してみましょう。まずはセルの色分けですが、これはfillに色分けする変数をマッピングするだけです。今回は政治体制ごとにセルを色分けしましょう。また、文字を大きめにし、横軸の目盛りラベルを回転します。 Mosaic_df %&gt;% ggplot() + geom_mosaic(aes(x = product(Polity, Continent), fill = Polity), na.rm = TRUE) + labs(x = &quot;Continent&quot;, y = &quot;Polity Type&quot;) + theme_minimal(base_size = 16) + theme(legend.position = &quot;none&quot;, panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) 次元を追加するためにはファセット分割を使います。たとえば、一人当たりPPP GDPの高低（PPP）でファセットを分割する場合、facet_wrap(~PPP)レイヤーを足すだけです。 Mosaic_df %&gt;% ggplot() + geom_mosaic(aes(x = product(Polity, Continent), fill = Polity), na.rm = TRUE) + labs(x = &quot;Continent&quot;, y = &quot;Polity Type&quot;) + facet_wrap(~PPP, ncol = 2) + theme_minimal(base_size = 16) + theme(legend.position = &quot;none&quot;, panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) ただし、一つ問題があります。それは目盛りラベルの位置です。例えば、右側の横軸目盛りラベルの場合、セルの位置とラベルの位置がずれています。これは2つのファセットが同じ目盛りを共有し、左側の方に合わせられたため生じるものです。よく見ると横軸も縦軸も目盛りラベルに位置が同じであることが分かります。これを解消するためには、facet_wrap()の内部にscale = \"free\"を指定します3。これは各ファセットが独自のスケールを有することを意味します。 Mosaic_df %&gt;% ggplot() + geom_mosaic(aes(x = product(Polity, Continent), fill = Polity), na.rm = TRUE) + labs(x = &quot;Continent&quot;, y = &quot;Polity Type&quot;) + facet_wrap(~PPP, ncol = 2, scale = &quot;free&quot;) + theme_minimal(base_size = 16) + theme(legend.position = &quot;none&quot;, panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) 右側ファセットの横軸ラベルが重なってしまいましたが、これでとりあえず完成です。アフリカにおけるOpen AnocracyとClosed Anocracyの頻度が0であるため、これは仕方ありません。一つの対処方法としては以下のように縦軸目盛りを削除し、凡例で代替することが考えられます。 Mosaic_df %&gt;% ggplot() + geom_mosaic(aes(x = product(Polity, Continent), fill = Polity), na.rm = TRUE) + labs(x = &quot;Continent&quot;, y = &quot;Polity Type&quot;, fill = &quot;Polity Type&quot;) + facet_wrap(~PPP, ncol = 2, scale = &quot;free_x&quot;) + theme_minimal(base_size = 16) + theme(panel.grid = element_blank(), axis.text.y = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) 20.17 その他のグラフ The R Graph Galleryでは本書で紹介できなかった様々な図のサンプルおよびコードを見ることができます。ここまで読み終わった方なら問題なくコードの意味が理解できるでしょう。{ggplot2}では作成できないグラフ（アニメーションや3次元図、インタラクティブなグラフ）についても、他のパッケージを利用した作成方法について紹介されているので、「こんな図が作りたいけど、作り方が分からん！」の時には、まずThe R Graph Galleryに目を通してみましょう。 参考資料 "]]
