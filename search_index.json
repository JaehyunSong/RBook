[
["visualization.html", "12. 可視化 12.1 可視化のためのパッケージ 12.2 良いグラフとは 12.3 グラフィックの文法 12.4 名目変数の扱いについて 12.5 棒グラフ 12.6 ヒストグラム 12.7 散布図 12.8 図のカスタマイズ 12.9 練習問題", " 12. 可視化 12.1 可視化のためのパッケージ Rのbase graphic lattice ggplot2 12.2 良いグラフとは BBC Visual and Data Journalism cookbook for R graphics 12.3 グラフィックの文法 12.4 名目変数の扱いについて 12.4.1 名目変数を含むグラフを作成する際の注意点 可視化の話をする前に、名目変数の扱いについて話したいと思います。横軸、または縦軸が気温、成績、身長のような連続変数ではなく、都道府県や国、企業のような名目変数になる場合があります。たとえば、棒グラフの横軸は図12.1のように、一般的に名目変数になる場合が多いです。 図 12.1: 横軸が名目変数の棒グラフ ここでは横軸の順番に注目してください。京都府、埼玉県、神奈川県、…の順番になっていますね。「この順番で大満足だよ!」という方がいるかも知れませんが、そうでない方もおおいでしょう。普通考えられるものとしては、都道府県コードの順か、縦軸が高い順 (低い順)でしょう。都道府県コードの順だと、埼玉県、千葉県、東京都、神奈川県、京都府、大阪府、兵庫県、奈良県、和歌山県の順番になります。または、縦軸 (口コミ評価の平均値)が高い順なら和歌山県、奈良県、大阪府、…の順番になります。あるいは50音順も考えられるでしょう。アメリカの場合、州を並べる際、アルファベット順で並べます。 自分でこの順番をコントロールするには可視化の前の段階、つまりデータハンドリングの段階で順番を決めなくてはなりません。これを決めておかない場合、Rが勝手に順番を指定します。具体的にはロケール (locale)というパソコン内の空間に文字情報が含まれているわけですが、そこに保存されている文字の順番となります。たとえば、日本語ロケールには「京」が「埼」よりも先に保存されているわけです。 したがって、名目変数がグラフに含まれる場合は、名目変数の表示順番を決める必要があり、そこで必要なのがfactor型です。名目変数がcharacter型の場合、ロケールに保存されている順でソートされますが、factor型の場合、予め指定した順番でソートされます。 たとえば、前章で使用したデータを用いて、都道府県ごとの口コミ評価の平均値を計算し、その結果をScore_dfとして保存します。 # tidyverseパッケージの読み込み library(tidyverse) # データの読み込み df &lt;- read_csv(&quot;Data/Ramen.csv&quot;) Score_df &lt;- df %&gt;% group_by(Pref) %&gt;% summarise(Score = mean(Score, na.rm = TRUE), .groups = &quot;drop&quot;) Score_df ## # A tibble: 9 x 2 ## Pref Score ## &lt;chr&gt; &lt;dbl&gt; ## 1 京都府 3.68 ## 2 埼玉県 3.64 ## 3 神奈川県 3.53 ## 4 千葉県 3.72 ## 5 大阪府 3.77 ## 6 東京都 3.67 ## 7 奈良県 3.85 ## 8 兵庫県 3.54 ## 9 和歌山県 3.97 この時点で勝手にロケール順になります。実際、表示されたScore_dfを見るとPrefの下に`&lt;chr&gt;と表記されており、Prefはcharacter型であることが分かります。これをこのまま棒グラフに出してみましょう。可視化の方法はこれから詳細に解説するので、ここでは結果だけに注目してください。 Score_df %&gt;% ggplot() + geom_bar(aes(x = Pref, y = Score), stat = &quot;identity&quot;) + labs(x = &quot;都府県&quot;, y = &quot;口コミ評価の平均値 (1~5)&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) + theme(text = element_text(size = 12)) 図 12.2: Prefがcharacter型の場合 (1) 横軸の順番があまり直感的ではありませんね。それでは、Score_dfをScoreが高い順にソートし、Score_df2で保存してから、もう一回試してみます。 Score_df2 &lt;- Score_df %&gt;% arrange(desc(Score)) Score_df2 ## # A tibble: 9 x 2 ## Pref Score ## &lt;chr&gt; &lt;dbl&gt; ## 1 和歌山県 3.97 ## 2 奈良県 3.85 ## 3 大阪府 3.77 ## 4 千葉県 3.72 ## 5 京都府 3.68 ## 6 東京都 3.67 ## 7 埼玉県 3.64 ## 8 兵庫県 3.54 ## 9 神奈川県 3.53 ここでもPrefはcharacter型ですが、とりあえず、これで図を出してみます。 Score_df2 %&gt;% ggplot() + geom_bar(aes(x = Pref, y = Score), stat = &quot;identity&quot;) + labs(x = &quot;都府県&quot;, y = &quot;口コミ評価の平均値 (1~5)&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) + theme(text = element_text(size = 12)) 図 12.3: Prefがcharacter型の場合 (2) 結果は全く変わっておりません。それでは、Score_dfのPref列をfactor型に変換し、順番は口コミ評価の平均値が高い順番にしてみましょう。結果はScore_df_f1という名で保存します。 Score_df_f1 &lt;- Score_df %&gt;% mutate(Pref = factor(Pref, levels = c(&quot;和歌山県&quot;, &quot;奈良県&quot;, &quot;大阪府&quot;, &quot;千葉県&quot;, &quot;京都府&quot;, &quot;東京都&quot;, &quot;埼玉県&quot;, &quot;兵庫県&quot;, &quot;神奈川県&quot;))) Score_df_f1 ## # A tibble: 9 x 2 ## Pref Score ## &lt;fct&gt; &lt;dbl&gt; ## 1 京都府 3.68 ## 2 埼玉県 3.64 ## 3 神奈川県 3.53 ## 4 千葉県 3.72 ## 5 大阪府 3.77 ## 6 東京都 3.67 ## 7 奈良県 3.85 ## 8 兵庫県 3.54 ## 9 和歌山県 3.97 表示される順番はScore_dfとScore_df_f1も同じですが、Prefのデータ型が&lt;fct&gt;、つまりfactor型であることが分かります。実際、Pref列だけ抽出した場合、factor型として、和歌山県から神奈川県の順になっていることが確認できます。 Score_df_f1$Pref ## [1] 京都府 埼玉県 神奈川県 千葉県 大阪府 東京都 奈良県 兵庫県 和歌山県 ## Levels: 和歌山県 奈良県 大阪府 千葉県 京都府 東京都 埼玉県 兵庫県 神奈川県 このScore_df_f1データを使って、図12.2と全く同じコードを実行した結果が図12.4です。 図 12.4: Prefがfactor型の場合 (1) これまでの話をまとめるの以下の2点が分かります。 変数がcharacter型である場合、自動的にロケール順でソートされる。 変数がfactor型である場合、データ内の順番やロケール順と関係なく、指定されたレベル (水準)の順でソートされる。 とくに2番目の点についてですが、これは必ずしも順序付きfactorである必要はありません。順序付きfactor型でなくても、factor()内で指定した順にソートされます。むろん、順序付きfactor型なら指定された順序でソートされます。 これからはfactor型変換の際に便利な関数をいくつか紹介しますが、その前に数値として表現された名目変数について話します。たとえば、Score_df_f1に関東地域なら1を、その他の地域なら0を付けたKantoという変数があるとします。 Score_df_f1 &lt;- Score_df_f1 %&gt;% mutate(Kanto = ifelse(Pref %in% c(&quot;東京都&quot;, &quot;神奈川県&quot;, &quot;千葉県&quot;, &quot;埼玉県&quot;), 1, 0)) Score_df_f1 ## # A tibble: 9 x 3 ## Pref Score Kanto ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 京都府 3.68 0 ## 2 埼玉県 3.64 1 ## 3 神奈川県 3.53 1 ## 4 千葉県 3.72 1 ## 5 大阪府 3.77 0 ## 6 東京都 3.67 1 ## 7 奈良県 3.85 0 ## 8 兵庫県 3.54 0 ## 9 和歌山県 3.97 0 Kanto変数のデータ型は、&lt;dbl&gt;、つまりnumeric型です。しかし、これは明らかに名目変数ですね。これをこのままKantoを横軸にした図を出すと図12.5のようになります。 図 12.5: Kantoがnumeric型の場合 この場合、図の横軸はKantoの値が小さい順でソートされます。ただし、このような図は非常に見にくいため、1に\"関東\"、0に\"関西\"とラベルを付けたfactor型に変換した方が望ましいです。numeric型をラベル付きのfactor型にするためには、levels引数には元の数値を、labels引数にはそれぞれの数値に対応したラベルを指定します。また、関東の方を先に出したいので、factor()内のlevels引数はc(0, 1)でなく、c(1, 0)にします。 Score_df_f1 &lt;- Score_df_f1 %&gt;% mutate(Kanto = factor(Kanto, levels = c(1, 0), labels = c(&quot;関東&quot;, &quot;その他&quot;))) Score_df_f1 ## # A tibble: 9 x 3 ## Pref Score Kanto ## &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 京都府 3.68 その他 ## 2 埼玉県 3.64 関東 ## 3 神奈川県 3.53 関東 ## 4 千葉県 3.72 関東 ## 5 大阪府 3.77 その他 ## 6 東京都 3.67 関東 ## 7 奈良県 3.85 その他 ## 8 兵庫県 3.54 その他 ## 9 和歌山県 3.97 その他 Kanto変数がfactor型に変換されたことが分かります。 Score_df_f1$Kanto ## [1] その他 関東 関東 関東 その他 関東 その他 その他 その他 ## Levels: 関東 その他 また、\"関東\"、\"その他\"の順になっていますね。これを図として出力した結果が図12.6です。 図 12.6: Kantoがfactor型の場合 このように数値型名目変数でも、factor化することによって、自由に横軸の順番を変えることができます。それでは、factor化に使える便利な関数をいくつか紹介します。 12.4.2 forcatsパッケージについて 実はfactor型への変換や、順番に変更などは全てR内蔵のfactor()関数で対応可能ですが、ここではforcatsパッケージが提供しているfct_*()関数を使用します。forcatsパッケージはtidyverseを読み込む際、自動的に読み込まれるため、既にtidyverseを読み込んでいる場合、別途のコードは要りません。 fct_relevel(): 水準の順番を変更する Score_df_f1のf1はScoreが高い順になっています。これを50音順に変更する際、fct_relevel()関数を使います。 # 新しい変数名と元となる変数名が一致すると上書きになる データフレーム名 %&gt;% mutate(新しい変数名 = fct_releve(元となる変数名, &quot;水準1&quot;, &quot;水準2&quot;, &quot;水準3&quot;, ...)) ここでは、Pref変数を再調整したPref2変数を作ってみましょう。 Score_df_f1 &lt;- Score_df_f1 %&gt;% mutate(Pref2 = fct_relevel(Pref, &quot;大阪府&quot;, &quot;神奈川県&quot;, &quot;京都府&quot;, &quot;埼玉県&quot;, &quot;千葉県&quot;, &quot;東京都&quot;, &quot;奈良県&quot;, &quot;兵庫県&quot;, &quot;和歌山県&quot;)) Score_df_f1 ## # A tibble: 9 x 4 ## Pref Score Kanto Pref2 ## &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 京都府 3.68 その他 京都府 ## 2 埼玉県 3.64 関東 埼玉県 ## 3 神奈川県 3.53 関東 神奈川県 ## 4 千葉県 3.72 関東 千葉県 ## 5 大阪府 3.77 その他 大阪府 ## 6 東京都 3.67 関東 東京都 ## 7 奈良県 3.85 その他 奈良県 ## 8 兵庫県 3.54 その他 兵庫県 ## 9 和歌山県 3.97 その他 和歌山県 一見、PrefとPref2変数は同じように見えますが、水準はどうなっているでしょうか。 levels(Score_df_f1$Pref) # Prefの水準 ## [1] &quot;和歌山県&quot; &quot;奈良県&quot; &quot;大阪府&quot; &quot;千葉県&quot; &quot;京都府&quot; &quot;東京都&quot; &quot;埼玉県&quot; &quot;兵庫県&quot; ## [9] &quot;神奈川県&quot; levels(Score_df_f1$Pref2) # Pref2の水準 ## [1] &quot;大阪府&quot; &quot;神奈川県&quot; &quot;京都府&quot; &quot;埼玉県&quot; &quot;千葉県&quot; &quot;東京都&quot; &quot;奈良県&quot; &quot;兵庫県&quot; ## [9] &quot;和歌山県&quot; 問題なく50音順になっていることが分かります。他にもfct_relevel()には全ての水準名を指定する必要がありません。一部の水準名も可能です。たとえば、「関東が関西の先に来るなんでけしからん！」と思う読者もいるでしょう。この場合、関西の府県名を入れると、指定した水準が最初に位置するようになります。 Score_df_f1 &lt;- Score_df_f1 %&gt;% mutate(Pref3 = fct_relevel(Pref, &quot;京都府&quot;, &quot;大阪府&quot;, &quot;兵庫県&quot;, &quot;奈良県&quot;, &quot;和歌山県&quot;)) levels(Score_df_f1$Pref3) # Pref3の水準 ## [1] &quot;京都府&quot; &quot;大阪府&quot; &quot;兵庫県&quot; &quot;奈良県&quot; &quot;和歌山県&quot; &quot;千葉県&quot; &quot;東京都&quot; &quot;埼玉県&quot; ## [9] &quot;神奈川県&quot; 一部の水準名のみを指定するとその水準が最初に移動されますが、after引数を指定すると、位置を調整することも可能です。after = 2の場合、元となる変数の1、3番目の水準は維持され、3番目以降に指定した水準、それに続いて指定されていない水準の順番になります。Prefは和歌山、奈良、大阪の順ですが、ここで京都と東京を、奈良と大阪の間に移動するなら、 Score_df_f1 &lt;- Score_df_f1 %&gt;% mutate(Pref4 = fct_relevel(Pref, &quot;京都府&quot;, &quot;東京都&quot;, after = 2)) levels(Score_df_f1$Pref4) # Pref4の水準 ## [1] &quot;和歌山県&quot; &quot;奈良県&quot; &quot;京都府&quot; &quot;東京都&quot; &quot;大阪府&quot; &quot;千葉県&quot; &quot;埼玉県&quot; &quot;兵庫県&quot; ## [9] &quot;神奈川県&quot; のように書きます。afterを指定しない場合のデフォルト値は0であるため、最初に移動します。 fct_recode(): 水準のラベルを変更する fct_recode()は水準のラベルを変更する時に使う関数で、以下のように使います。 # 新しい変数名と元となる変数名が一致すると上書きになる データフレーム名 %&gt;% mutate(新しい変数名 = fct_recode(元となる変数名, 新しいラベル1 = &quot;既存のラベル1&quot;, 新しいラベル2 = &quot;既存のラベル2&quot;, 新しいラベル3 = &quot;既存のラベル3&quot;, ...)) 注意点としては新しいラベルは\"で囲まず、既存のラベルは\"で囲む点です。それでは、Prefのラベルをローマ字に変更してみましょう。 Score_df_f1 &lt;- Score_df_f1 %&gt;% mutate(Pref5 = fct_recode(Pref, Saitama = &quot;埼玉県&quot;, Wakayama = &quot;和歌山県&quot;, Kyoto = &quot;京都府&quot;, Osaka = &quot;大阪府&quot;, Tokyo = &quot;東京都&quot;, Nara = &quot;奈良県&quot;, Kanagawa = &quot;神奈川県&quot;, Hyogo = &quot;兵庫県&quot;, Chiba = &quot;千葉県&quot;)) Score_df_f1 ## # A tibble: 9 x 7 ## Pref Score Kanto Pref2 Pref3 Pref4 Pref5 ## &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 京都府 3.68 その他 京都府 京都府 京都府 Kyoto ## 2 埼玉県 3.64 関東 埼玉県 埼玉県 埼玉県 Saitama ## 3 神奈川県 3.53 関東 神奈川県 神奈川県 神奈川県 Kanagawa ## 4 千葉県 3.72 関東 千葉県 千葉県 千葉県 Chiba ## 5 大阪府 3.77 その他 大阪府 大阪府 大阪府 Osaka ## 6 東京都 3.67 関東 東京都 東京都 東京都 Tokyo ## 7 奈良県 3.85 その他 奈良県 奈良県 奈良県 Nara ## 8 兵庫県 3.54 その他 兵庫県 兵庫県 兵庫県 Hyogo ## 9 和歌山県 3.97 その他 和歌山県 和歌山県 和歌山県 Wakayama fct_recode()の中に指定する水準の順番は無視されます。つまり、水準の順番はそのまま維持されるため、好きな順番で結構です。また、全ての水準を指定せず、一部のみ変更することも可能です。それではPref5の順番がPrefの順番と同じかを確認してみましょう。 levels(Score_df_f1$Pref) # Prefの水準 ## [1] &quot;和歌山県&quot; &quot;奈良県&quot; &quot;大阪府&quot; &quot;千葉県&quot; &quot;京都府&quot; &quot;東京都&quot; &quot;埼玉県&quot; &quot;兵庫県&quot; ## [9] &quot;神奈川県&quot; levels(Score_df_f1$Pref5) # Pref5の水準 ## [1] &quot;Wakayama&quot; &quot;Nara&quot; &quot;Osaka&quot; &quot;Chiba&quot; &quot;Kyoto&quot; &quot;Tokyo&quot; &quot;Saitama&quot; &quot;Hyogo&quot; ## [9] &quot;Kanagawa&quot; fct_rev(): 水準の順番を逆転させる 水準の順番を逆転することは非常によくあります。たとえば、グラフの読みやすさのために、左右または上下を反転するケースがあります。既に何回も強調しましたように、名目変数は基本的にfactor型にすべきであり、ここでfct_rev()関数が非常に便利です。たとえば、Pref2の水準は50音順でありますが、これを逆転し、Pref6という名の列として追加してみましょう。 Score_df_f1 &lt;- Score_df_f1 %&gt;% mutate(Pref6 = fct_rev(Pref2)) levels(Score_df_f1$Pref6) ## [1] &quot;和歌山県&quot; &quot;兵庫県&quot; &quot;奈良県&quot; &quot;東京都&quot; &quot;千葉県&quot; &quot;埼玉県&quot; &quot;京都府&quot; &quot;神奈川県&quot; ## [9] &quot;大阪府&quot; fct_infreq(): 頻度順に順番を変更する fct_inorder(): データ内の出現順番に順番を変更する fct_shift(): 水準の順番をずらす fct_shuffle(): 水準の順番をランダム化する fct_reorder(): 別の1変数の値を基準に水準の順番を変更する fct_reorder2(): 別の2変数の値を基準に水準の順番を変更する fct_collapse(): 水準を統合する fct_drop(): 使われていない水準を除去する fct_expand(): 水準を追加する fct_explicit_na(): 欠損値に水準を与える 12.5 棒グラフ library(tidyverse) df &lt;- read_csv(&quot;Data/Ramen.csv&quot;) 12.5.1 ケース数の棒グラフ df %&gt;% ggplot(aes(x = Pref)) + geom_bar() df %&gt;% ggplot(aes(x = Pref)) + geom_bar() + labs(x = &quot;都府県&quot;, y = &quot;店舗数&quot;) df %&gt;% ggplot(aes(x = Pref)) + geom_bar() + labs(x = &quot;都府県&quot;, y = &quot;店舗数&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) df %&gt;% mutate(Pref = factor(Pref, levels = c(&quot;東京都&quot;, &quot;神奈川県&quot;, &quot;千葉県&quot;, &quot;埼玉県&quot;, &quot;大阪府&quot;, &quot;京都府&quot;, &quot;兵庫県&quot;, &quot;奈良県&quot;, &quot;和歌山県&quot;))) %&gt;% ggplot(aes(x = Pref)) + geom_bar() + labs(x = &quot;都府県&quot;, y = &quot;店舗数&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) 12.5.2 記述統計量のグラフ df %&gt;% group_by(Pref) %&gt;% summarise(Score = mean(Score, na.rm = TRUE), .groups = &quot;drop&quot;) %&gt;% ggplot() + geom_bar(aes(x = Pref, y = Score), stat = &quot;identity&quot;) + coord_cartesian(ylim = c(1, 5)) + labs(x = &quot;都府県&quot;, y = &quot;口コミ評価の平均値 (1~5)&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) df %&gt;% group_by(Pref) %&gt;% summarise(Score = mean(Score, na.rm = TRUE), .groups = &quot;drop&quot;) %&gt;% ggplot() + geom_bar(aes(x = Pref, y = Score), stat = &quot;identity&quot;) + labs(x = &quot;都府県&quot;, y = &quot;口コミ評価の平均値 (1~5)&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) df %&gt;% group_by(Pref) %&gt;% summarise(Score = mean(Score, na.rm = TRUE), .groups = &quot;drop&quot;) %&gt;% arrange(desc(Score)) %&gt;% mutate(Pref = fct_inorder(Pref)) %&gt;% ggplot() + geom_bar(aes(x = Pref, y = Score), stat = &quot;identity&quot;) + coord_cartesian(ylim = c(1, 5)) + labs(x = &quot;都府県&quot;, y = &quot;口コミ評価の平均値 (1~5)&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) df %&gt;% group_by(Pref) %&gt;% summarise(ScoreN = sum(ScoreN), .groups = &quot;drop&quot;) %&gt;% arrange(desc(ScoreN)) %&gt;% mutate(Pref = fct_inorder(Pref)) %&gt;% ggplot() + geom_bar(aes(x = Pref, y = ScoreN), stat = &quot;identity&quot;) + labs(x = &quot;都府県&quot;, y = &quot;口コミの合計&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) 12.6 ヒストグラム df %&gt;% filter(!is.na(Walk)) %&gt;% ggplot() + geom_histogram(aes(x = Walk)) + labs(x = &quot;最寄りの駅からの徒歩距離 (分)&quot;, y = &quot;店舗数&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) df %&gt;% filter(!is.na(Walk)) %&gt;% ggplot() + geom_histogram(aes(x = Walk), color = &quot;white&quot;, fill = &quot;black&quot;) + labs(x = &quot;最寄りの駅からの徒歩距離 (分)&quot;, y = &quot;店舗数&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) ヒストグラムの棒の幅を調整したい binsとbinwidth引数 df %&gt;% filter(!is.na(Walk)) %&gt;% ggplot() + geom_histogram(aes(x = Walk), color = &quot;white&quot;, fill = &quot;black&quot;, binwidth = 2.5) + coord_cartesian(xlim = c(0, 35)) + scale_x_continuous(breaks = seq(0, 35, 5), labels = seq(0, 35, 5)) + labs(x = &quot;最寄りの駅からの徒歩距離 (分)&quot;, y = &quot;店舗数&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) 12.7 散布図 df %&gt;% filter(!is.na(Walk)) %&gt;% ggplot(aes(x = Walk, y = ScoreN)) + geom_point() + labs(x = &quot;最寄りの駅からの徒歩距離 (分)&quot;, y = &quot;口コミ数&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) df %&gt;% filter(!is.na(Budget), !is.na(Score)) %&gt;% ggplot(aes(x = Budget, y = Score)) + geom_point() + geom_smooth(method = &quot;lm&quot;) + coord_cartesian(ylim = c(1, 5)) + labs(x = &quot;平均予算 (円)&quot;, y = &quot;口コミ評価&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) df %&gt;% filter(!is.na(Walk)) %&gt;% ggplot(aes(x = Walk, y = ScoreN)) + geom_point() + geom_smooth(method = &quot;lm&quot;) + labs(x = &quot;最寄りの駅からの徒歩距離 (分)&quot;, y = &quot;口コミ数&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) df %&gt;% filter(!is.na(Walk)) %&gt;% mutate(EW = recode(Pref, .default = &quot;関西&quot;, &quot;東京都&quot; = &quot;関東&quot;, &quot;神奈川県&quot; = &quot;関東&quot;, &quot;千葉県&quot; = &quot;関東&quot;, &quot;埼玉県&quot; = &quot;関東&quot;)) %&gt;% ggplot(aes(x = Walk, y = ScoreN, color = EW)) + geom_point() + geom_smooth(method = &quot;loess&quot;) + labs(x = &quot;最寄りの駅からの徒歩距離 (分)&quot;, y = &quot;口コミ数&quot;, color = &quot;地域&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) df %&gt;% filter(!is.na(Budget), !is.na(Score)) %&gt;% mutate(EW = recode(Pref, .default = &quot;関西&quot;, &quot;東京都&quot; = &quot;関東&quot;, &quot;神奈川県&quot; = &quot;関東&quot;, &quot;千葉県&quot; = &quot;関東&quot;, &quot;埼玉県&quot; = &quot;関東&quot;)) %&gt;% ggplot(aes(x = Budget, y = Score, color = EW)) + geom_point() + geom_smooth(method = &quot;lm&quot;) + coord_cartesian(ylim = c(1, 5)) + labs(x = &quot;平均予算 (円)&quot;, y = &quot;口コミ評価&quot;, color = &quot;地域&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) df %&gt;% filter(!is.na(Budget), !is.na(Score)) %&gt;% mutate(EW = recode(Pref, .default = &quot;関西&quot;, &quot;東京都&quot; = &quot;関東&quot;, &quot;神奈川県&quot; = &quot;関東&quot;, &quot;千葉県&quot; = &quot;関東&quot;, &quot;埼玉県&quot; = &quot;関東&quot;), EW = factor(EW, levels = c(&quot;関東&quot;, &quot;関西&quot;))) %&gt;% ggplot(aes(x = Budget, y = Score)) + geom_point() + geom_smooth(method = &quot;lm&quot;) + facet_wrap(.~ EW, scales = &quot;free_x&quot;) + labs(x = &quot;平均予算 (円)&quot;, y = &quot;口コミ評価&quot;) + theme_gray(base_family = &quot;HiraKakuProN-W3&quot;) 12.8 図のカスタマイズ 12.8.1 ラベルの位置を変更する 12.8.2 グループごとに異なるプロットとして出力したい 12.8.3 12.8.4 複数のグラフを一つにまとめたい 12.9 練習問題 dfを用い、以下のような図を作成せよ。 "]
]
