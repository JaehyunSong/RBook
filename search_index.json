[
["visualization3.html", "19. 可視化[応用] 19.1 labs(): ラベルの修正 19.2 coord_*(): 座標系の調整 19.3 scale_*_*(): スケールの調整 19.4 theme_*()とtheme(): テーマの指定 19.5 図の結合", " 19. 可視化[応用] 第17章と第18章では{ggplot2}の概念と5つの代表的なグラフ（棒、ヒストグラム、箱ひげ図、散布図、折れ線）の作り方について説明しました。本章では軸の調整、座標系の調整など、幾何オブジェクト以外のレイヤーについて説明します。第18章で紹介しなかった図の作成方法については第20章で解説します。 ラベル 座標系 スケール テーマ 図の結合 本章で使用するデータは第18章で使用したものと同じデータを使います。データの詳細については第18章を参照してください。 library(tidyverse) Country_df &lt;- read_csv(&quot;Data/Countries.csv&quot;) COVID19_df &lt;- read_csv(&quot;Data/COVID19_Worldwide.csv&quot;, guess_max = 10000) 19.1 labs(): ラベルの修正 既にlabs()レイヤーは第18章で使ったことがあるでしょう。ここではlabs()の仕組みについて簡単に解説します。 labs()関数は軸、凡例、プロットのラベル（タイトルなど）を修正する際に使用する関数です。軸ラベルは横軸（x）と縦軸（y）のラベルを意味します。指定しない場合は、マッピングで指定した変数名がそのまま出力されます。これは凡例ラベルも同じです。{ggplot2}は2次元のグラフの出力に特化したパッケージであるため、出力される図には必ず横軸と縦軸があります。したがって、引数としてxとyは常に指定可能です。 一方、凡例はマッピングされない場合、表示されません。幾何オブジェクトのaes()内にcolor、size、linetypeなどの要素がマッピングされてから初めて凡例で表示されます。凡例が存在することは何かの要素にマッピングがされていることを意味します。このマッピング要素名（color、size、linetypeなど）をlabs()の引数として使うことで凡例のラベルが修正されます。マッピングされていない要素に対してラベルを指定しても、図に影響はありません。たとえば、Country_dfの一人あたりGDP（GDP_per_capita）を横軸、フリーダムハウスのスコア（FH_Total）を縦軸にした散布図を作成します。 Country_df %&gt;% ggplot() + geom_point(aes(x = FH_Total, y = GDP_per_capita)) + labs(x = &quot;フリーダムハウススコア&quot;,y = &quot;一人あたりGDP (USD)&quot;, color = &quot;大陸&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;) ## Warning: Removed 1 rows containing missing values (geom_point). geom_point()は横軸と縦軸のみにマッピングをしているため、labs()にcolor =を指定しても何の変化もありません。そもそも凡例が存在しないからです。それでは大陸ごとに色分けした散布図に修正してみましょう。 Country_df %&gt;% ggplot() + geom_point(aes(x = FH_Total, y = GDP_per_capita, color = Continent)) + labs(x = &quot;フリーダムハウススコア&quot;,y = &quot;一人あたりGDP (USD)&quot;, color = &quot;大陸&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;) ## Warning: Removed 1 rows containing missing values (geom_point). colorにContinent変数をマッピングすることによって、各点の色は何らかの情報を持つようになりました。そして各色がContinentのどの値に対応しているかを示すために凡例が表示されます。凡例のラベルはデフォルトは変数名（この例の場合、「Continent」）ですが、ここでは「大陸」と修正されました。 ここまでが第18章で使用しましたlabs()レイヤーの使い方です。他にもlabs()はプロットのラベルを指定することもできます。ここでいう「プロットのラベル」とはプロットのタイトルとほぼ同じです。使用可能な引数はtitle、subtitle、tagです。 Country_df %&gt;% ggplot() + geom_point(aes(x = FH_Total, y = GDP_per_capita, color = Continent)) + labs(x = &quot;フリーダムハウススコア&quot;,y = &quot;一人あたりGDP (USD)&quot;, color = &quot;大陸&quot;, title = &quot;民主主義の度合いと所得の関係&quot;, subtitle = &quot;大陸別の傾向&quot;, tag = &quot;(a)&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;) ## Warning: Removed 1 rows containing missing values (geom_point). titleは図のメインタイトルとおり、プロットのタイトルを意味します。上の図だと「民主主義の度合いと所得の関係」です。また、subtitle引数を指定することでサブタイトルを付けることも可能です。上の図の「大陸別の傾向」がサブタイトルです。最後のtagは複数の図を並べる際に便利な引数です。図が横に2つ並んでいる場合、それぞれ(a)と(b)という識別子を付けると、文中において「図3(a)は…」のように、引用しやすくなります。この「(a)」がtag引数に対応します。複数の図を並べる方法は本章の後半にて説明します。 19.2 coord_*(): 座標系の調整 {ggplot2}はいくつかの座標系を提供しています。円グラフを作成する際に使われる極座標系（coord_polar()）や地図の出力によく使われるcoord_map()やcoord_sf()がその例です。中でも最も頻繁に使われる座標系はやはり縦軸と横軸は直交する直交座標系（デカルト座標系）でしょう。ここでは直交座標系の扱い方について解説します。 19.2.1 直交座標系の操作 まずは座標系の上限と下限を指定する方法から考えましょう。日米中間のCOVID-19累積感染者数の折れ線グラフを作成してみましょう。 Fig1 &lt;- COVID19_df %&gt;% mutate(Date = as.Date(Date)) %&gt;% filter(Country %in% c(&quot;Japan&quot;, &quot;South Korea&quot;, &quot;China&quot;, &quot;United States&quot;)) %&gt;% ggplot() + geom_line(aes(x = Date, y = Confirmed_Total, color = Country)) + labs(x = &quot;月&quot;, y = &quot;累積感染者数 (人)&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) print(Fig1) アメリカの感染者が圧倒的に多いこともあり、日韓がほぼ同じ線に見えます。これを是正するために対数変換などを行うわけですが、対数変換したグラフは直感的ではないというデメリットがあります。それでもう一つの方法として、アメリカに関する情報は一部失われますが、縦軸の上限を10万にすることが考えられます。直交座標系の上限・下限を調整する関数がcoord_cartesian()です。横軸はxlim、縦軸はylim引数を指定し、実引数としては長さ2のnumericベクトルを指定します。たとえば、縦軸の下限を0、上限を10万にするなら、ylim = c(0, 100000)となります。先ほどの図は既にFig1という名のオブジェクトとして保存されているため、ここにcoord_cartesian()レイヤーを追加してみましょう。 Fig1 + coord_cartesian(ylim = c(0, 100000)) 3月下旬以降、アメリカの情報は図から失われましたが、日中韓についてはよりトレンドの差が区別できるようになりました。{ggplot2}は座標系の上限と下限をデータの最小値と最大値に合わせて自動的に調整してくれます。たとえば、以下のような例を考えてみましょう。 Fig2 &lt;- tibble(Class = paste0(LETTERS[1:5], &quot;組&quot;), Score = c(78, 80, 85, 77, 70)) %&gt;% ggplot() + geom_bar(aes(x = Class, y = Score), stat = &quot;identity&quot;) + labs(x = &quot;クラス&quot;, y = &quot;数学成績の平均 (点)&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) print(Fig2) 数学成績平均値は最大100点までありえますが、手元のデータにおける最高得点が85店であるため、棒グラフの縦軸の上限が85点程度となります。この場合、上限は満点である100点に調整した方が良いでしょう。 Fig2 + coord_cartesian(ylim = c(0, 100)) このように上限を調整すると、成績の満点が何点かに関する情報が含まれ、グラフにより豊富な情報を持たせることが可能です。 19.2.2 座標系の変換 続きまして座標系の変換について説明します。座標系の変換については実は第18章でも取り上げました。対数化がその例です。例えば、連続型変数でマッピングされた横軸を底が10の対数化する場合、以下のような方法が考えれます。 log10()関数を使用し、データレベルで値を対数化する scale_x_continuous()レイヤーを重ね、trans = \"log10\"引数を指定する scale_x_log10()レイヤーを重ねる coord_trans()レイヤーを重ね、x = \"log10\"引数を指定する どの方法でも得られる結果はさほど変わりませんが、coord_trans()は座標系全般を調整することができます。たとえば、xlimやylim引数を使って座標系の上限と下限を同時に指定することも可能です。たとえば、座標系の上限を横軸は[0, 100]、縦軸は[-100, 100]とし、全て対数化を行うとします。方法はいくつか考えられます。たとえば、scale_*_log10()とcoord_cartesian()を組み合わせることもできます。 # coord_trans()を使用しない場合 ggplotオブジェクト + scale_x_log10() + scale_y_log10() + coord_cartesian(xlim = c(0, 100), ylim = c(-100, 100)) しかし、上のコードはcoord_trans()を使うと一行にまとめることができます。 # coord_trans()を使用する場合 ggplotオブジェクト + coord_trans(x = &quot;log10&quot;, y = &quot;log10&quot;, xlim = c(0, 100), ylim = c(-100, 100)) coord_trans()のx、y引数は\"log10\"以外にもあります。自然対数変換の\"log\"、反転を意味する\"reverse\"、平方根へ変換する\"sqrt\"などがあります。グラフを上下、または左右に反転する\"reverse\"は覚えておいて損はないでしょう。こちらは具体的には{tidyverse}パッケージ群に含まれている{scales}パッケージにある*_trans()関数に対応することになります。詳細は{scales}パッケージのヘルプを参照してください。 19.2.3 座標系の回転 続きまして座標系を反時計方向回転するcoord_flip()について紹介します。以下はCountry_dfを用い、大陸（Continent）ごとにPolity IVスコア（Polity_Score）の平均値を示した棒グラフです。 Flip_Fig &lt;- Country_df %&gt;% group_by(Continent) %&gt;% summarise(Democracy = mean(Polity_Score, na.rm = TRUE), .groups = &quot;drop&quot;) %&gt;% ggplot() + geom_bar(aes(x = Continent, y = Democracy), stat = &quot;identity&quot;) + labs(x = &quot;大陸&quot;, y = &quot;Polity IV スコアの平均値&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) print(Flip_Fig) この図を反時計方向回転する場合は以上のプロットにcoord_flip()レイヤーを追加します。 Flip_Fig + coord_flip() # 座標系の回転 非常に簡単な方法で図を回転させることができました。しかし、実はこのcoord_flip()関数、最近になって使う場面がどんどん減っています。たとえば、先ほどのgeom_bar()幾何オブジェクトの場合、xをPolity IVスコアの平均値で、yを大陸名でマッピングすることが可能です。昔の{ggplot2}は横軸と縦軸にマッピングでいるデータ型が厳格に決まっていましたが、最近になってはますます柔軟となってきました1。coord_flip()を使用する前に、各幾何オブジェクトのヘルプを確認し、coord_flip()を用いた回転が必要か否かを予め調べておくのも良いでしょう。 19.2.4 座標系の固定 他にも地味に便利な機能として座標系比を固定するcoord_fixed()を紹介します。これは出力される座標系の「横:縦」を調整するレイヤーです。たとえば、以下のような散布図を考えてみましょう。 ggplot() + geom_point(aes(x = 1:10, y = 1:10)) こちらは横と縦が同じスケールでありますが、図の大きさに応じて、見た目が変わってきます。たとえば、上の図だと、横軸における1間隔は縦軸のそれの約2倍です。もし、図を上下に大きくし、左右を縮小したら同じ図でありながら随分と見た目が変わってきます。 ggplot() + geom_point(aes(x = 1:10, y = 1:10)) 2つの図は本質的に同じですが、図の見せ方によって、傾きが緩やかに見せたり、急に見せたりすることができます。ここで活躍するレイヤーがcoord_fixed()です。これを追加すると横を1とした場合の縦の比率を指定することができます。 ggplot() + geom_point(aes(x = 1:10, y = 1:10)) + coord_fixed(ratio = 1) ratio = 1を指定すると縦横比は1:1となり、図の高さや幅を変更してもこの軸は変わりません。たとえば、RStudioのPlotsペインの大きさを変更すると図の大きさが変わりますが、coord_fixed(ratio = 1)を指定すると1:1の比率は維持されるまま図が拡大・縮小されます。直接やってみましょう。 19.3 scale_*_*(): スケールの調整 続いてscale_*_*()関数群を用いたスケールを解説しますが、こちらの関数は非常に多く、全てのスケールレイヤーについて解説すことは難しいです。しかし、共通する部分も非常に多いです。本説ではこの共通項に注目します。 連続変数でマッピングされた横軸のスケールを調整する関数ははscale_x_continuous()です。ここでxが横軸を意味し、continuousが連続であることを意味します。このxの箇所は幾何オブジェクトのaes()内で指定した仮引数と一致します。つまり、scale_x_continuous()のxの箇所にはy、alpha、linetype、sizeなどがあります。そして、実引数として与えられた変数のデータ型がcontinuousの箇所に相当します。もし、離散変数ならdiscrete、時系列ならtime、全て手動で調整する場合はmanualを使います。他にも2020年10月現在、最近追加されたものとしてbinnedがあり、こちらはヒストグラムに特化したものです（scale_x_binned()とscale_y_binned()）。つまり、スケール調整関数はaes()内に登場した仮引数名とそのデータ型の組み合わせで出来ています。 たとえば、時系列の折れ線グラフにおいて横軸のスケールを調整するなら、sacle_x_time()を使います。また、棒グラフのように横軸が名目変数ならscale_x_manual()、順序変数のような離散変数ならscale_x_discrete()を使います。また、連続変数の縦軸のスケール調整ならscale_y_continuous()を使います。グラフによってはaes()内にxまたはyを指定しないケースもあります。前章において度数の棒グラフや1つの箱ひげ図を出す場合、前者はx、後者はyのみを指定しました。これは指定されていないyやxが存在しないことを意味しません。{ggplot2}が自動的に計算しマッピングを行ってくれることを意味します。{ggplot2}で出来上がった図は2次元座標系を持つため、横軸と縦軸は必ず存在します。したがって、aes()内の引数と関係なくscale_x_*()とscale_y_*()関数群は使用することが出来ます。 19.3.1 横軸・縦軸スケールの調整 19.3.1.1 連続変数の場合 19.3.1.2 離散変数の場合 19.3.1.3 手動で調整する場合 19.4 theme_*()とtheme(): テーマの指定 19.5 図の結合 gridExtraは古いかな 19.5.1 ggpubrパッケージ 19.5.2 patchworkパッケージ 19.5.3 eggパッケージ 例えば、回帰係数の点推定値と信頼区間を示す係数プロット（キャタピラー・プロット）を作成する際はgeom_pointrange()とcoord_flip()を組み合わせてきましたが、今の{ggplot2}はgeom_pointrange()のみで自由自在に作成できます。↩︎ "]
]
