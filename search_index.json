[["visualization4.html", "20. 可視化[発展] 20.1 概要 20.2 バイオリンプロット 20.3 ラグプロット 20.4 リッジプロット 20.5 エラーバー付き散布図 20.6 ロリーポップチャート 20.7 平滑化ライン 20.8 ヒートマップ 20.9 等高線図 20.10 地図 20.11 非巡回有向グラフ 20.12 バンプチャート 20.13 沖積図 20.14 デンドログラム 20.15 ツリーマップ 20.16 モザイクプロット 20.17 その他のグラフ", " 20. 可視化[発展] 20.1 概要 第17章では{ggplot2}の仕組みについて、第18章ではよく使われる5種類のプロット（棒グラフ、散布図、折れ線グラフ、箱ひげ図、ヒストグラム）の作り方を、第19章ではスケール、座標系などの操作を通じたグラフの見た目調整について解説しました。本章では第18章の延長線上に位置づけることができ、紹介しきれなかった様々なグラフの作り方について簡単に解説します。本章で紹介するグラフは以下の通りです。 バイオリンプロット ラグプロット リッジプロット エラーバー付き散布図 ロリーポップチャート 平滑化ライン ヒートマップ 等高線図 地図 非巡回有向グラフ バンプチャート 沖積図 デンドログラム ツリーマップ モザイクプロット pacman::p_load(tidyverse) Country_df &lt;- read_csv(&quot;Data/Countries.csv&quot;) COVID19_df &lt;- read_csv(&quot;Data/COVID19_Worldwide.csv&quot;, guess_max = 10000) 20.2 バイオリンプロット Country_df %&gt;% ggplot() + geom_violin(aes(x = Continent, y = PPP_per_capita, fill = Continent)) + geom_boxplot(aes(x = Continent, y = PPP_per_capita), width = 0.2) + labs(y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = c(0, 1000, 10000, 100000), labels = c(0, 1000, 10000, 100000), trans = &quot;log10&quot;) + guides(fill = &quot;none&quot;) + theme_minimal(base_size = 12) 20.3 ラグプロット Country_df %&gt;% ggplot() + geom_point(aes(x = FH_Total, y = PPP_per_capita)) + geom_rug(aes(x = FH_Total, y = PPP_per_capita)) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + guides(fill = &quot;none&quot;) + theme_minimal(base_size = 12) 20.4 リッジプロット pacman::p_load(ggridges) # デフォルトのリッジプロット Country_df %&gt;% ggplot() + geom_density_ridges(aes(x = HDI_2018, y = Continent), alpha = 0.5) + labs(x = &quot;2018年人間開発指数&quot;, y = &quot;大陸&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) ## Picking joint bandwidth of 0.054 # ラグプロット付きのリッジプロット Country_df %&gt;% ggplot() + geom_density_ridges(aes(x = HDI_2018, y = Continent, fill = Continent), alpha = 0.5, jittered_points = TRUE, position = position_points_jitter(width = 0, height = 0), point_shape = &quot;|&quot;, point_size = 3) + guides(fill = &quot;none&quot;) + labs(x = &quot;2018年人間開発指数&quot;, y = &quot;大陸&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) ## Picking joint bandwidth of 0.054 # ヒストグラムのリッジプロット Country_df %&gt;% ggplot() + geom_density_ridges(aes(x = HDI_2018, y = Continent), alpha = 0.5, stat = &quot;binline&quot;, scale = 1) + labs(x = &quot;2018年人間開発指数&quot;, y = &quot;大陸&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) ## `stat_binline()` using `bins = 30`. Pick better value with `binwidth`. 20.5 エラーバー付き散布図 Pointrange_df &lt;- tibble( Continent = c(&quot;Asia&quot;, &quot;Europe&quot;, &quot;Africa&quot;, &quot;America&quot;), Coef = c(65.3, 588.0, 53.4, 316.0), Conf_lwr = c(-250.0, 376.0, -14.5, 128.0), Conf_upr = c(380.0, 801.0, 121.0, 504.0) ) Pointrange_df ## # A tibble: 4 x 4 ## # Groups: Continent [4] ## Continent Coef Conf_lwr Conf_upr ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Asia 65.3 -250. 380. ## 2 Europe 588. 376. 801. ## 3 Africa 53.4 -14.5 121. ## 4 America 316. 128. 504. 実は以上のデータは以下のようなコードで作成されています。{purrr}パッケージの使い方に慣れる必要があるので、第24章を参照してください。 Pointrange_df &lt;- Country_df %&gt;% filter(Continent != &quot;Oceania&quot;) %&gt;% group_by(Continent) %&gt;% nest() %&gt;% mutate(Fit = map(data, ~lm(PPP_per_capita ~ FH_Total, data = .)), Est = map(Fit, broom::tidy, conf.int = TRUE)) %&gt;% unnest(Est) %&gt;% filter(term == &quot;FH_Total&quot;) %&gt;% select(Continent, Coef = estimate, Conf_lwr = conf.low, Conf_upr = conf.high) Country_df %&gt;% filter(Continent != &quot;Oceania&quot;) %&gt;% group_by(Continent) %&gt;% nest() %&gt;% mutate(Fit = map(data, ~lm(PPP_per_capita ~ FH_Total, data = .)), Est = map(Fit, broom::tidy, conf.int = TRUE)) %&gt;% unnest(Est) %&gt;% filter(term == &quot;FH_Total&quot;) %&gt;% select(Continent, Coef = estimate, Conf_lwr = conf.low, Conf_upr = conf.high) %&gt;% ggplot() + geom_hline(yintercept = 0, linetype = 2) + geom_pointrange(aes(x = Continent, y = Coef, ymin = Conf_lwr, ymax = Conf_upr), size = 0.75) + labs(y = expression(paste(beta[1], &quot; with 95% CI&quot;))) + theme_bw(base_size = 12) 20.6 ロリーポップチャート Country_df %&gt;% filter(Continent == &quot;Europe&quot;) %&gt;% drop_na(PPP_per_capita) %&gt;% ggplot() + geom_bar(aes(y = Country, x = PPP_per_capita), stat = &quot;identity&quot;) + labs(x = &quot;一人あたり購買力平価GDP&quot;, y = &quot;国&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) Country_df %&gt;% filter(Continent == &quot;Europe&quot;) %&gt;% drop_na(PPP_per_capita) %&gt;% ggplot() + geom_segment(aes(y = Country, yend = Country, x = 0, xend = PPP_per_capita)) + geom_point(aes(y = Country, x = PPP_per_capita), color = &quot;orange&quot;) + labs(x = &quot;一人あたり購買力平価GDP (USD)&quot;, y = &quot;国&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) + theme(panel.grid.major.y = element_blank(), panel.border = element_blank(), axis.ticks.y = element_blank()) Country_df %&gt;% filter(Continent == &quot;Europe&quot;) %&gt;% drop_na(PPP_per_capita) %&gt;% arrange(PPP_per_capita) %&gt;% mutate(Country = fct_inorder(Country)) %&gt;% ggplot() + geom_segment(aes(y = Country, yend = Country, x = 0, xend = PPP_per_capita)) + geom_point(aes(y = Country, x = PPP_per_capita), color = &quot;orange&quot;) + labs(x = &quot;一人あたり購買力平価GDP (USD)&quot;, y = &quot;国&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) + theme(panel.grid.major.y = element_blank(), panel.border = element_blank(), axis.ticks.y = element_blank()) 20.7 平滑化ライン Country_df %&gt;% ggplot(aes(x = FH_Total, y = PPP_per_capita)) + geom_point() + geom_smooth(formula = y ~ x, method = &quot;loess&quot;, se = TRUE) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + guides(fill = &quot;none&quot;) + theme_minimal(base_size = 12) Country_df %&gt;% mutate(OECD = if_else(OECD == 1, &quot;加盟国&quot;, &quot;非加盟国&quot;)) %&gt;% ggplot(aes(x = FH_Total, y = PPP_per_capita, color = OECD)) + geom_point() + geom_smooth(formula = y ~ x, method = &quot;lm&quot;, se = TRUE) + labs(x = &quot;Freedom House Score&quot;, y = &quot;PPP per capita (USD)&quot;) + scale_y_continuous(breaks = seq(0, 120000, by = 10000), labels = seq(0, 120000, by = 10000)) + coord_cartesian(ylim = c(0, 120000)) + guides(fill = &quot;none&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 12) 20.8 ヒートマップ 離散変数\\(\\times\\)離散変数の同時分布 COVID19_df %&gt;% left_join(Country_df, by = &quot;Country&quot;) %&gt;% filter(Continent == &quot;Asia&quot;) %&gt;% separate(col = Date, into = c(&quot;Year&quot;, &quot;Month&quot;, &quot;Day&quot;)) %&gt;% mutate(Confirmed_per_capita = Confirmed_Day / Population * 1000000) %&gt;% group_by(Country, Month) %&gt;% summarise(Confirmed = sum(Confirmed_per_capita), .groups = &quot;drop&quot;) %&gt;% mutate(Confirmed = log10(Confirmed + 1), Country = fct_inorder(Country), Country = fct_rev(Country)) %&gt;% ggplot() + geom_tile(aes(x = Month, y = Country, fill = Confirmed)) + scale_fill_gradient2(low = &quot;cornflowerblue&quot;, mid = &quot;cornsilk&quot;, high = &quot;brown3&quot;, midpoint = 2) 20.9 等高線図 連続変数\\(\\times\\)連続変数の同時分布 20.10 地図 20.10.1 世界地図 pacman::p_load(rnaturalearth, rnaturalearthdata, rgeos) world_map &lt;- ne_countries(scale = &quot;small&quot;, returnclass = &quot;sf&quot;) class(world_map) ## [1] &quot;sf&quot; &quot;data.frame&quot; world_map %&gt;% ggplot() + geom_sf(aes(fill = pop_est)) + scale_fill_gradient(low = &quot;cornflowerblue&quot;, high = &quot;brown3&quot;) + labs(fill = &quot;人口&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) + theme(legend.position = &quot;bottom&quot;) world_map %&gt;% ggplot() + geom_sf(aes(fill = pop_est)) + scale_fill_gradient(low = &quot;cornflowerblue&quot;, high = &quot;brown3&quot;) + labs(fill = &quot;人口&quot;) + coord_sf(xlim = c(90, 150), ylim = c(10, 50)) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) + theme(legend.position = &quot;bottom&quot;) world_map2 &lt;- ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) world_map2 %&gt;% mutate(Population = case_when(pop_est &lt; 10000000 ~ &quot;1千万未満&quot;, pop_est &lt; 50000000 ~ &quot;5千万未満&quot;, pop_est &lt; 100000000 ~ &quot;1億未満&quot;, pop_est &lt; 500000000 ~ &quot;5億未満&quot;, TRUE ~ &quot;5億以上&quot;), Population = factor(Population, levels = c(&quot;1千万未満&quot;, &quot;5千万未満&quot;, &quot;1億未満&quot;, &quot;5億未満&quot;, &quot;5億以上&quot;))) %&gt;% ggplot() + geom_sf(aes(fill = Population)) + scale_fill_brewer(palette = &quot;Blues&quot;, drop = FALSE) + labs(fill = &quot;人口&quot;) + coord_sf(xlim = c(90, 150), ylim = c(10, 50)) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) + theme(legend.position = &quot;bottom&quot;) scale_fill_brewer()のpalette引数は{RColorBrewer}パッケージが提供するパレート名を指定する。パレート一覧はRColorBrewer::display.brewer.all()で確認可能。自分で作成したパレートを使いたい場合はscale_fill_manual()を使用する。 RColorBrewer::display.brewer.all() 図 20.1: {RColorBrewer}が提供するパレート一覧 20.10.2 日本地図 20.11 非巡回有向グラフ pacman::p_load(dagitty, ggdag) DAG_data1 &lt;- dagify(X ~ Z, Y ~ Z, Y ~ X, exposure = &quot;X&quot;, outcome = &quot;Y&quot;) ggdag(DAG_data1) ggdag(DAG_data1) + theme_dag_blank() 20.11.1 ノードの位置を指定する DAG_Pos2 &lt;- list(x = c(X = 1, Y = 3, Z = 2), y = c(X = 1, Y = 1, Z = 2)) DAG_data2 &lt;- dagify(X ~ Z, Y ~ X + Z, exposure = &quot;X&quot;, outcome = &quot;Y&quot;, coords = DAG_Pos2) ggdag(DAG_data2) + theme_dag_blank() DAG_Pos3 &lt;- list(x = c(X1 = 3, X2 = 3, X3 = 1, T = 2, Y = 4), y = c(X1 = 1, X2 = 2, X3 = 2, T = 3, Y = 3)) DAG_data3 &lt;- dagify(Y ~ T + X1 + X2, T ~ X2 + X3, X2 ~ X1 + X3, exposure = &quot;T&quot;, outcome = &quot;Y&quot;, coords = DAG_Pos3) ggdag(DAG_data3, stylized = TRUE) + theme_dag_blank() 20.12 バンプチャート 20.13 沖積図 pacman::p_load(ggalluvial) Vote_0910 &lt;- read_csv(&quot;Data/Vote_09_10.csv&quot;) Vote_0910 データは 中澤 (2014) の表3を元に筆者が作成したもの 変数名 説明 ID 回答者ID Vote09 2009年衆院選における投票先 Vote10 2010年参院選における投票先 たとえば、1番目の回答者は2009年に棄権し、2010年も棄権したことを意味する。また、5番目の回答者は2009年に自民党に投票し、2010年は共産党または社民党に投票したことを意味する。 Vote_0910 &lt;- Vote_0910 %&gt;% group_by(Vote09, Vote10) %&gt;% summarise(Freq = n(), .groups = &quot;drop&quot;) Vote_0910 ## # A tibble: 47 x 3 ## Vote09 Vote10 Freq ## * &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 DK DK 111 ## 2 DK その他 8 ## 3 DK 棄権 57 ## 4 DK 共産・社民 15 ## 5 DK 公明 7 ## 6 DK 自民 29 ## 7 DK 民主 116 ## 8 その他 DK 18 ## 9 その他 その他 73 ## 10 その他 棄権 18 ## # … with 37 more rows Vote_0910 &lt;- Vote_0910 %&gt;% mutate(Vote09 = factor(Vote09, levels = c(&quot;自民&quot;, &quot;民主&quot;, &quot;公明&quot;, &quot;共産・社民&quot;, &quot;その他&quot;, &quot;棄権&quot;, &quot;DK&quot;)), Vote10 = factor(Vote10, levels = c(&quot;自民&quot;, &quot;民主&quot;, &quot;公明&quot;, &quot;共産・社民&quot;, &quot;その他&quot;, &quot;棄権&quot;, &quot;DK&quot;))) Vote_0910 %&gt;% ggplot(aes(y = Freq, axis1 = Vote09, axis2 = Vote10)) + geom_alluvium() + geom_stratum() + geom_text(aes(label = after_stat(stratum)), stat = &quot;stratum&quot;, family = &quot;HiraKakuProN-W3&quot;) Vote_0910 %&gt;% ggplot(aes(y = Freq, axis1 = Vote09, axis2 = Vote10)) + geom_alluvium(aes(fill = Vote09)) + geom_stratum() + geom_text(aes(label = after_stat(stratum)), stat = &quot;stratum&quot;, family = &quot;HiraKakuProN-W3&quot;) Alluvial_Plot &lt;- Vote_0910 %&gt;% ggplot(aes(y = Freq, axis1 = Vote09, axis2 = Vote10)) + geom_alluvium(aes(fill = Vote10)) + geom_stratum() + geom_text(aes(label = after_stat(stratum)), stat = &quot;stratum&quot;, family = &quot;HiraKakuProN-W3&quot;) Alluvial_Plot Alluvial_Plot + ggtitle(&quot;個人レベルにおける投票先の変化&quot;) + scale_x_continuous(breaks = 1:2, labels = c(&quot;2009年衆院選&quot;, &quot;2010年参院選&quot;)) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;, base_size = 16) + theme(legend.position = &quot;none&quot;, panel.grid = element_blank(), axis.title = element_blank(), axis.text.y = element_blank()) 20.14 デンドログラム 20.15 ツリーマップ pacman::p_load(treemapify) Country_df %&gt;% filter(Continent == &quot;Asia&quot;) %&gt;% ggplot(aes(area = Population, label = Country)) + geom_treemap() + geom_treemap_text(colour = &quot;white&quot;, place = &quot;centre&quot;) Country_df %&gt;% filter(Continent == &quot;Asia&quot;) %&gt;% ggplot(aes(area = Population, label = Country)) + geom_treemap() + geom_treemap_text(colour = &quot;white&quot;, place = &quot;centre&quot;, grow = TRUE) Country_df %&gt;% filter(Continent == &quot;Asia&quot;) %&gt;% ggplot(aes(area = Population, fill = HDI_2018, label = Country)) + geom_treemap() + geom_treemap_text(colour = &quot;white&quot;, place = &quot;centre&quot;, grow = TRUE) + scale_fill_gradient2(low = &quot;brown3&quot;, mid = &quot;cornsilk&quot;, high = &quot;cornflowerblue&quot;, midpoint = 0.7) + labs(fill = &quot;UN Human Development Index (2018)&quot;) + ggtitle(&quot;Population in Asia&quot;) + theme(legend.position = &quot;bottom&quot;) 20.16 モザイクプロット # CRANでなくGitHub経由でインストール remotes::install_github(&quot;haleyjeppson/ggmosaic&quot;) library(ggmosaic) Vote_0910 &lt;- read_csv(&quot;Data/Vote_09_10.csv&quot;) ## ## ─ Column specification ──────────────────────────── ## cols( ## ID = col_double(), ## Vote09 = col_character(), ## Vote10 = col_character() ## ) table(Vote_0910$Vote09, Vote_0910$Vote10) ## ## DK その他 棄権 共産・社民 公明 自民 民主 ## DK 111 8 57 15 7 29 116 ## その他 18 73 18 11 4 48 121 ## 棄権 41 8 372 7 5 26 125 ## 共産・社民 3 0 6 77 0 3 25 ## 公明 1 2 9 1 100 10 16 ## 自民 19 11 44 7 4 363 106 ## 民主 20 9 33 19 3 38 802 table(Vote_0910$Vote09, Vote_0910$Vote10) %&gt;% plot() Vote_0910 &lt;- Vote_0910 %&gt;% mutate(Vote09 = factor(Vote09, levels = c(&quot;自民&quot;, &quot;民主&quot;, &quot;公明&quot;, &quot;共産・社民&quot;, &quot;その他&quot;, &quot;棄権&quot;, &quot;DK&quot;)), Vote10 = factor(Vote10, levels = c(&quot;自民&quot;, &quot;民主&quot;, &quot;公明&quot;, &quot;共産・社民&quot;, &quot;その他&quot;, &quot;棄権&quot;, &quot;DK&quot;))) Vote_0910 %&gt;% ggplot() + geom_mosaic(aes(x = product(Vote09, Vote10)), na.rm = TRUE) + labs(x = &quot;2009年衆院選の投票先&quot;, y = &quot;2010年参院選の投票先&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) + theme(panel.grid = element_blank()) Vote_0910 %&gt;% ggplot() + geom_mosaic(aes(x = product(Vote10, Vote09), fill = Vote10), na.rm = TRUE) + labs(x = &quot;2009年衆院選の投票先&quot;, y = &quot;2010年参院選の投票先&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) + theme(legend.position = &quot;none&quot;, panel.grid = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) 20.17 その他のグラフ The R Graph Galleryでは本書で紹介できなかった様々な図のサンプルおよびコードを見ることができます。ここまで読み終わった方なら問題なくコードの意味が理解できるでしょう。{ggplot2}では作成できないグラフ（アニメーションや3次元図、インタラクティブなグラフ）についても、他のパッケージを利用した作成方法について紹介されているので、「こんな図が作りたいけど、作り方が分からん！」の時には、まずThe R Graph Galleryに目を通してみましょう。 "]]
