[
["visualization3.html", "19. 可視化[応用] 19.1 labs(): ラベルの修正 19.2 coord_*(): 座標系の調整 19.3 scale_*_*(): スケールの調整 19.4 theme_*()とtheme(): テーマの指定 19.5 図の結合", " 19. 可視化[応用] 第17章と第18章では{ggplot2}の概念と5つの代表的なグラフ（棒、ヒストグラム、箱ひげ図、散布図、折れ線）の作り方について説明しました。本章では軸の調整、座標系の調整など、幾何オブジェクト以外のレイヤーについて説明します。第18章で紹介しなかった図の作成方法については第20章で解説します。 ラベル 座標系 スケール テーマ 図の結合 本章で使用するデータは第18章で使用したものと同じデータを使います。データの詳細については第18章を参照してください。 library(tidyverse) Country_df &lt;- read_csv(&quot;Data/Countries.csv&quot;) COVID19_df &lt;- read_csv(&quot;Data/COVID19_Worldwide.csv&quot;, guess_max = 10000) 19.1 labs(): ラベルの修正 既にlabs()レイヤーは第18章で使ったことがあるでしょう。ここではlabs()の仕組みについて簡単に解説します。 labs()関数は軸、凡例、プロットのラベル（タイトルなど）を修正する際に使用する関数です。軸ラベルは横軸（x）と縦軸（y）のラベルを意味します。指定しない場合は、マッピングで指定した変数名がそのまま出力されます。これは凡例ラベルも同じです。{ggplot2}は2次元のグラフの出力に特化したパッケージであるため、出力される図には必ず横軸と縦軸があります。したがって、引数としてxとyは常に指定可能です。 一方、凡例はマッピングされない場合、表示されません。幾何オブジェクトのaes()内にcolor、size、linetypeなどの要素がマッピングされてから初めて凡例で表示されます。凡例が存在することは何かの要素にマッピングがされていることを意味します。このマッピング要素名（color、size、linetypeなど）をlabs()の引数として使うことで凡例のラベルが修正されます。マッピングされていない要素に対してラベルを指定しても、図に影響はありません。たとえば、Country_dfの一人あたりGDP（GDP_per_capita）を横軸、フリーダムハウスのスコア（FH_Total）を縦軸にした散布図を作成します。 Country_df %&gt;% ggplot() + geom_point(aes(x = FH_Total, y = GDP_per_capita)) + labs(x = &quot;フリーダムハウススコア&quot;,y = &quot;一人あたりGDP (USD)&quot;, color = &quot;大陸&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;) ## Warning: Removed 1 rows containing missing values (geom_point). geom_point()は横軸と縦軸のみにマッピングをしているため、labs()にcolor =を指定しても何の変化もありません。そもそも凡例が存在しないからです。それでは大陸ごとに色分けした散布図に修正してみましょう。 Country_df %&gt;% ggplot() + geom_point(aes(x = FH_Total, y = GDP_per_capita, color = Continent)) + labs(x = &quot;フリーダムハウススコア&quot;,y = &quot;一人あたりGDP (USD)&quot;, color = &quot;大陸&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;) ## Warning: Removed 1 rows containing missing values (geom_point). colorにContinent変数をマッピングすることによって、各点の色は何らかの情報を持つようになりました。そして各色がContinentのどの値に対応しているかを示すために凡例が表示されます。凡例のラベルはデフォルトは変数名（この例の場合、「Continent」）ですが、ここでは「大陸」と修正されました。 ここまでが第18章で使用しましたlabs()レイヤーの使い方です。他にもlabs()はプロットのラベルを指定することもできます。ここでいう「プロットのラベル」とはプロットのタイトルとほぼ同じです。使用可能な引数はtitle、subtitle、tagです。 Country_df %&gt;% ggplot() + geom_point(aes(x = FH_Total, y = GDP_per_capita, color = Continent)) + labs(x = &quot;フリーダムハウススコア&quot;,y = &quot;一人あたりGDP (USD)&quot;, color = &quot;大陸&quot;, title = &quot;民主主義の度合いと所得の関係&quot;, subtitle = &quot;大陸別の傾向&quot;, tag = &quot;(a)&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;) ## Warning: Removed 1 rows containing missing values (geom_point). titleは図のメインタイトルとおり、プロットのタイトルを意味します。上の図だと「民主主義の度合いと所得の関係」です。また、subtitle引数を指定することでサブタイトルを付けることも可能です。上の図の「大陸別の傾向」がサブタイトルです。最後のtagは複数の図を並べる際に便利な引数です。図が横に2つ並んでいる場合、それぞれ(a)と(b)という識別子を付けると、文中において「図3(a)は…」のように、引用しやすくなります。この「(a)」がtag引数に対応します。複数の図を並べる方法は本章の後半にて説明します。 19.2 coord_*(): 座標系の調整 {ggplot2}はいくつかの座標系を提供しています。円グラフを作成する際に使われる極座標系（coord_polar()）や地図の出力によく使われるcoord_map()やcoord_sf()がその例です。中でも最も頻繁に使われる座標系はやはり縦軸と横軸は直交する直交座標系（デカルト座標系）でしょう。ここでは直交座標系の扱い方について解説します。 19.2.1 直交座標系の操作 まずは座標系の上限と下限を指定する方法から考えましょう。日米中間のCOVID-19累積感染者数の折れ線グラフを作成してみましょう。 Fig1 &lt;- COVID19_df %&gt;% mutate(Date = as.Date(Date)) %&gt;% filter(Country %in% c(&quot;Japan&quot;, &quot;South Korea&quot;, &quot;China&quot;, &quot;United States&quot;)) %&gt;% ggplot() + geom_line(aes(x = Date, y = Confirmed_Total, color = Country)) + labs(x = &quot;月&quot;, y = &quot;累積感染者数 (人)&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) print(Fig1) アメリカの感染者が圧倒的に多いこともあり、日韓がほぼ同じ線に見えます。これを是正するために対数変換などを行うわけですが、対数変換したグラフは直感的ではないというデメリットがあります。それでもう一つの方法として、アメリカに関する情報は一部失われますが、縦軸の上限を10万にすることが考えられます。直交座標系の上限・下限を調整する関数がcoord_cartesian()です。横軸はxlim、縦軸はylim引数を指定し、実引数としては長さ2のnumericベクトルを指定します。たとえば、縦軸の下限を0、上限を10万にするなら、ylim = c(0, 100000)となります。先ほどの図は既にFig1という名のオブジェクトとして保存されているため、ここにcoord_cartesian()レイヤーを追加してみましょう。 Fig1 + coord_cartesian(ylim = c(0, 100000)) 3月下旬以降、アメリカの情報は図から失われましたが、日中韓についてはよりトレンドの差が区別できるようになりました。{ggplot2}は座標系の上限と下限をデータの最小値と最大値に合わせて自動的に調整してくれます。たとえば、以下のような例を考えてみましょう。 Fig2 &lt;- tibble(Class = paste0(LETTERS[1:5], &quot;組&quot;), Score = c(78, 80, 85, 77, 70)) %&gt;% ggplot() + geom_bar(aes(x = Class, y = Score), stat = &quot;identity&quot;) + labs(x = &quot;クラス&quot;, y = &quot;数学成績の平均 (点)&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) print(Fig2) 数学成績平均値は最大100点までありえますが、手元のデータにおける最高得点が85店であるため、棒グラフの縦軸の上限が85点程度となります。この場合、上限は満点である100点に調整した方が良いでしょう。 Fig2 + coord_cartesian(ylim = c(0, 100)) このように上限を調整すると、成績の満点が何点かに関する情報が含まれ、グラフにより豊富な情報を持たせることが可能です。 19.2.2 座標系の変換 続きまして座標系の変換について説明します。座標系の変換については実は第18章でも取り上げました。対数化がその例です。例えば、連続型変数でマッピングされた横軸を底が10の対数化する場合、以下のような方法が考えれます。 log10()関数を使用し、データレベルで値を対数化する scale_x_continuous()レイヤーを重ね、trans = \"log10\"引数を指定する scale_x_log10()レイヤーを重ねる coord_trans()レイヤーを重ね、x = \"log10\"引数を指定する どの方法でも得られる結果はさほど変わりませんが、coord_trans()は座標系全般を調整することができます。たとえば、xlimやylim引数を使って座標系の上限と下限を同時に指定することも可能です。たとえば、座標系の上限を横軸は[0, 100]、縦軸は[-100, 100]とし、全て対数化を行うとします。方法はいくつか考えられます。たとえば、scale_*_log10()とcoord_cartesian()を組み合わせることもできます。 # coord_trans()を使用しない場合 ggplotオブジェクト + scale_x_log10() + scale_y_log10() + coord_cartesian(xlim = c(0, 100), ylim = c(-100, 100)) しかし、上のコードはcoord_trans()を使うと一行にまとめることができます。 # coord_trans()を使用する場合 ggplotオブジェクト + coord_trans(x = &quot;log10&quot;, y = &quot;log10&quot;, xlim = c(0, 100), ylim = c(-100, 100)) coord_trans()のx、y引数は\"log10\"以外にもあります。自然対数変換の\"log\"、反転を意味する\"reverse\"、平方根へ変換する\"sqrt\"などがあります。グラフを上下、または左右に反転する\"reverse\"は覚えておいて損はないでしょう。こちらは具体的には{tidyverse}パッケージ群に含まれている{scales}パッケージにある*_trans()関数に対応することになります。詳細は{scales}パッケージのヘルプを参照してください。 19.2.3 座標系の回転 続きまして座標系を反時計方向回転するcoord_flip()について紹介します。以下はCountry_dfを用い、大陸（Continent）ごとにPolity IVスコア（Polity_Score）の平均値を示した棒グラフです。 Flip_Fig &lt;- Country_df %&gt;% group_by(Continent) %&gt;% summarise(Democracy = mean(Polity_Score, na.rm = TRUE), .groups = &quot;drop&quot;) %&gt;% ggplot() + geom_bar(aes(x = Continent, y = Democracy), stat = &quot;identity&quot;) + labs(x = &quot;大陸&quot;, y = &quot;Polity IV スコアの平均値&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) print(Flip_Fig) この図を反時計方向回転する場合は以上のプロットにcoord_flip()レイヤーを追加します。 Flip_Fig + coord_flip() # 座標系の回転 非常に簡単な方法で図を回転させることができました。しかし、実はこのcoord_flip()関数、最近になって使う場面がどんどん減っています。たとえば、先ほどのgeom_bar()幾何オブジェクトの場合、xをPolity IVスコアの平均値で、yを大陸名でマッピングすることが可能です。昔の{ggplot2}は横軸と縦軸にマッピングでいるデータ型が厳格に決まっていましたが、最近になってはますます柔軟となってきました1。coord_flip()を使用する前に、各幾何オブジェクトのヘルプを確認し、coord_flip()を用いた回転が必要か否かを予め調べておくのも良いでしょう。 19.2.4 座標系の固定 他にも地味に便利な機能として座標系比を固定するcoord_fixed()を紹介します。これは出力される座標系の「横:縦」を調整するレイヤーです。たとえば、以下のような散布図を考えてみましょう。 ggplot() + geom_point(aes(x = 1:10, y = 1:10)) こちらは横と縦が同じスケールでありますが、図の大きさに応じて、見た目が変わってきます。たとえば、上の図だと、横軸における1間隔は縦軸のそれの約2倍です。もし、図を上下に大きくし、左右を縮小したら同じ図でありながら随分と見た目が変わってきます。 ggplot() + geom_point(aes(x = 1:10, y = 1:10)) 2つの図は本質的に同じですが、図の見せ方によって、傾きが緩やかに見せたり、急に見せたりすることができます。ここで活躍するレイヤーがcoord_fixed()です。これを追加すると横を1とした場合の縦の比率を指定することができます。 ggplot() + geom_point(aes(x = 1:10, y = 1:10)) + coord_fixed(ratio = 1) ratio = 1を指定すると縦横比は1:1となり、図の高さや幅を変更してもこの軸は変わりません。たとえば、RStudioのPlotsペインの大きさを変更すると図の大きさが変わりますが、coord_fixed(ratio = 1)を指定すると1:1の比率は維持されるまま図が拡大・縮小されます。直接やってみましょう。 19.3 scale_*_*(): スケールの調整 続いてscale_*_*()関数群を用いたスケールを解説しますが、こちらの関数は非常に多く、全てのスケールレイヤーについて解説すことは難しいです。しかし、共通する部分も非常に多いです。本説ではこの共通項に注目します。 連続変数でマッピングされた横軸のスケールを調整する関数ははscale_x_continuous()です。ここでxが横軸を意味し、continuousが連続であることを意味します。このxの箇所は幾何オブジェクトのaes()内で指定した仮引数と一致します。つまり、scale_x_continuous()のxの箇所にはy、alpha、linetype、sizeなどがあります。そして、実引数として与えられた変数のデータ型がcontinuousの箇所に相当します。もし、離散変数ならdiscrete、時系列ならtime、全て手動で調整する場合はmanualを使います。他にも2020年10月現在、最近追加されたものとしてbinnedがあり、こちらはヒストグラムに特化したものです（scale_x_binned()とscale_y_binned()）。つまり、スケール調整関数はaes()内に登場した仮引数名とそのデータ型の組み合わせで出来ています。 たとえば、時系列の折れ線グラフにおいて横軸のスケールを調整するなら、sacle_x_time()を使います。また、棒グラフのように横軸が名目変数ならscale_x_manual()、順序変数のような離散変数ならscale_x_discrete()を使います。また、連続変数の縦軸のスケール調整ならscale_y_continuous()を使います。グラフによってはaes()内にxまたはyを指定しないケースもあります。前章において度数の棒グラフや1つの箱ひげ図を出す場合、前者はx、後者はyのみを指定しました。これは指定されていないyやxが存在しないことを意味しません。{ggplot2}が自動的に計算しマッピングを行ってくれることを意味します。{ggplot2}で出来上がった図は2次元座標系を持つため、横軸と縦軸は必ず存在します。したがって、aes()内の引数と関係なくscale_x_*()とscale_y_*()関数群は使用することが出来ます。 19.3.1 横軸・縦軸スケールの調整 軸のスケールを調整する目的は1) 目盛りの調整、2) 目盛りラベルの調整、3) 第2軸の追加などがありますが、主な目的は1と2です。第2軸の追加はスケールが異なるグラフが重なる場合に使用しますが、一般的に推奨されません。したがって、ここでは1と2について説明します。 19.3.1.1 連続変数の場合 軸に連続変数がマッピングされている場合はscale_*_continuous()レイヤーを追加します。*の箇所は横軸の場合はx、縦軸の場合はyとなります。それではCountry_dfのFH_Totalを横軸、GDP_per_capitaを縦軸にした散布図を作成し、Scale_Fig1という名のオブジェクトに格納します。 Scale_Fig1 &lt;- Country_df %&gt;% ggplot() + geom_point(aes(x = FH_Total, y = GDP_per_capita)) + labs(x = &quot;フリーダムハウススコア&quot;,y = &quot;一人あたりGDP (USD)&quot;) + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;) print(Scale_Fig1) ## Warning: Removed 1 rows containing missing values (geom_point). Scale_Fig1の横軸の場合、最小値0、最大値100であり、目盛りは25間隔となっております。ここではこの横軸を調整したいと思います。まず、プロットにおける最小値と最大値はスケールではなく座標系の問題ですので、coord_*()を使用します。ここでは目盛りを修正してみましょう。たとえば、目盛りを10間隔にし、そのラベルも0、10、20、…、100にします。FH_Totalは連続変数ですので、scale_x_continuous()を使います。使い方は以下の通りです。 Scale_Fig1 + scale_x_continuous(breaks = 目盛りの位置, labels = 目盛りのラベル) breaksとlabelsの実引数としては数値型ベクトルを指定します。0から100まで10刻みの目盛りとラベルなら、seq(0, 100, by = 10)、またはc(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)と指定します。 Scale_Fig1 + scale_x_continuous(breaks = seq(0, 100, by = 10), labels = seq(0, 100, by = 10)) ## Warning: Removed 1 rows containing missing values (geom_point). 目盛りのラベルを文字型にすることも可能です。例えば、目盛りを0、50、100にし、それぞれ「最低」、「中間」、「最高」としたい場合は以下のようにします。 Scale_Fig1 + scale_x_continuous(breaks = c(0, 50, 100), labels = c(&quot;最低&quot;, &quot;中間&quot;, &quot;最高&quot;)) ## Warning: Removed 1 rows containing missing values (geom_point). scale_x_continuous()は目盛りの調整が主な使い道ですが、他にも様々な機能を提供しています。たとえば、座標系の最小値と最大値の指定はcoord_*()を使うと説明しましたが、実はscale_*_continuous()でもlimits引数で指定することも可能です。たとえば、縦軸の範囲を0ドルから10万ドルにしたい場合はscale_y_continuous()の中にlimits = c(0, 100000)を指定します。 Scale_Fig1 + scale_x_continuous(breaks = seq(0, 100, by = 10), labels = seq(0, 100, by = 10)) + scale_y_continuous(limits = c(0, 100000)) ## Warning: Removed 4 rows containing missing values (geom_point). 他にも目盛りと目盛りラベルの位置を変更することも可能です。これはposition引数を使います。基本的に横軸の目盛りは下（\"bottom\"）、縦軸は左（\"left\"）ですが、\"top\"や\"right\"を使うことも可能です。もし、縦軸の目盛りとラベル、軸のラベルを右側にしたい場合はscale_y_continuous()の中にposition = \"right\"を指定します。 Scale_Fig1 + scale_y_continuous(position = &quot;right&quot;) ## Warning: Removed 1 rows containing missing values (geom_point). 19.3.1.2 離散変数の場合 もし、軸が名目変数や順序変数のような離散変数でマッピングされている場合は、scale_*_discrete()を使います。たとえば、座標系の回転の例で使いましたFlip_Figの場合、横軸の大陸名が英語のままになっています。これを日本語にする場合、データレベルで大陸名を日本語で置換することも可能ですが、scale_x_discrete()を使うことも可能です。使い方はscale_*_continuous()と同じであり、breaksとlabels引数を指定するだけです。 Flip_Fig + scale_x_discrete(breaks = c(&quot;Africa&quot;, &quot;America&quot;, &quot;Asia&quot;, &quot;Europe&quot;, &quot;Oceania&quot;), labels = c(&quot;アフリカ&quot;, &quot;アメリカ&quot;, &quot;アジア&quot;, &quot;ヨーロッパ&quot;, &quot;オセアニア&quot;)) 今回は大陸名が文字型の列でしたが、factor型の場合、いくつか便利な機能が使えます。たとえば、Polity_Typeごとに国数を計算し、棒グラフを作成するとします。 Scale_df1 &lt;- Country_df %&gt;% group_by(Polity_Type) %&gt;% summarise(N = n(), .groups = &quot;drop&quot;) Scale_df1 ## # A tibble: 6 x 2 ## Polity_Type N ## &lt;chr&gt; &lt;int&gt; ## 1 Autocracy 19 ## 2 Closed Anocracy 23 ## 3 Democracy 65 ## 4 Full Democracy 31 ## 5 Open Anocracy 20 ## 6 &lt;NA&gt; 28 続きまして、Polity_Type列をfactor型にします。最もスコアの低い独裁（Autocracy）から最もスコアの高い完全な民主主義（Full Democracy）の順番のfactorにします。 Scale_df1 &lt;- Scale_df1 %&gt;% mutate(Polity_Type = factor(Polity_Type, ordered = TRUE, levels = c(&quot;Autocracy&quot;, &quot;Closed Anocracy&quot;, &quot;Open Anocracy&quot;, &quot;Democracy&quot;, &quot;Full Democracy&quot;))) Scale_df1$Polity_Type ## [1] Autocracy Closed Anocracy Democracy Full Democracy ## [5] Open Anocracy &lt;NA&gt; ## 5 Levels: Autocracy &lt; Closed Anocracy &lt; ... &lt; Full Democracy 問題なくfactor化も出来たので、それでは作図をしてみましょう。 Scale_df1 %&gt;% ggplot() + geom_bar(aes(x = Polity_Type, y = N), stat = &quot;identity&quot;) Polityプロジェクトの対象外があり、この場合は欠損値（NA）になります。そして、問題はこの欠損値も表示されることです。むろん、欠損値のカテゴリも出力したいケースもありますが、もし欠損値カテゴリの棒を消すにはどうすれば良いでしょうか。1つ目の方法はScale_df1 %&gt;% drop_na()で欠損値を含む行を除去してから作図する方法です。2つ目の方法はscale_x_discrete()でna.translate = FALSEを指定する方法です。ここでは横軸の目盛りラベルも日本語に変更し、欠損値のカテゴリを除外してみましょう。また、地味に便利な機能として、軸ラベルもscale_*_*()で指定可能です。第1引数として長さ1の文字ベクトルを指定すると、自動的に軸ラベルが修正され、labs()が不要となります。 Scale_df1 %&gt;% ggplot() + geom_bar(aes(x = Polity_Type, y = N), stat = &quot;identity&quot;) + scale_x_discrete(&quot;Polity IV スコア&quot;, # 第1引数で軸ラベルも指定可能 breaks = c(&quot;Autocracy&quot;, &quot;Closed Anocracy&quot;, &quot;Open Anocracy&quot;, &quot;Democracy&quot;, &quot;Full Democracy&quot;), labels = c(&quot;独裁&quot;, &quot;閉じられたアノクラシー&quot;, &quot;開かれたアノクラシー&quot;, &quot;民主主義&quot;, &quot;完全な民主主義&quot;), na.translate = FALSE) + scale_y_continuous(&quot;国数&quot;) + theme_minimal(base_family = &quot;HiraKakuProN-W3&quot;) ## Warning: Removed 1 rows containing missing values (position_stack). これで欠損値を除外することができました。目盛りラベルが重なる箇所があり、多少気になりますが、この問題に関しては第19.4節で取り上げます。 19.3.2 その他のスケール調整 19.3.2.1 colorスケール グラフの次元を増やす際において広く使われている方法は変数の値に応じて色分けをすることでした。この場合、幾何オブジェクトのaes()内にcolor = マッピングする変数名を指定することになります。このように色が変数でマッピングされている場合は、色分けのスケールも調整可能です。たとえば、折れ線グラフにおいて日本が赤い線だったのを青い線に変更することが考えられます。ここでもcolorにマッピングされている変数のデータ型によって使用する関数が変わります。ここでは連続変数、順序付き離散変数、順序なし離散変数について説明します。 まずは、連続変数からです。横軸は底10の対数変換した一人あたりGDP（GDP_per_capita）、縦軸は人間開発指数（HDI_2018）にした散布図を作成し、Polity IVスコア（Polity_Score）で点の色分けをしてみましょう。 Scale_Fig2 &lt;- Country_df %&gt;% ggplot() + geom_point(aes(x = GDP_per_capita, y = HDI_2018, color = Polity_Score)) + labs(x = &quot;一人あたりGDP (USD)&quot;,y = &quot;人間開発指数&quot;, color = &quot;Polity IVスコア&quot;) + scale_x_log10() + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;) Scale_Fig2 ## Warning: Removed 6 rows containing missing values (geom_point). これまではcolor引数を離散変数でしかマッピングしませんでしたが、このように連続変数でマッピングすることも可能です。ただし、この場合は値に応じてはっきりした色分けがされるのではなく、グラデーションで色分けされます。この例だと、青に近いほどPolity IVスコアが高く、黒に近いほど低いことが分かります。この場合、colorのスケール調整は最小値と最大値における色を指定するだけです。その間の色については{ggplot2}が自動的に計算してくれます。 今回使用する関数はscale_x_gradient()です。これまでの例だとscale_color_continuous()かと思う方も多いでしょう。実際、scale_color_continuous()関数も提供されており、使い方もほぼ同じです。ただし、scale_color_continuous()を使う際は引数としてtype = \"gradient\"を指定する必要があります。scale_x_gradient()の場合、最小値における色をlow、最大値のそれをhighで指定します。数値は\"red\"や\"blue\"なども可能であり、\"#132B43\"のような書き方も使えます。たとえば、先ほどのScale_Fig2においてPolity IVスコアが高いほどbrown3、低いほどcornflowerblueになるようにする場合は以下のように書きます。 Scale_Fig2 + scale_color_gradient(high = &quot;brown3&quot;, low = &quot;cornflowerblue&quot;) ## Warning: Removed 6 rows containing missing values (geom_point). このような書き方だとどのような色名で使えるかを事前に知っておく必要があります。使える色名のリストはcolors()から確認できます。全部で657種類がありますが、ここでは最初の50個のみを出力します。 head(colors(), 50) ## [1] &quot;white&quot; &quot;aliceblue&quot; &quot;antiquewhite&quot; ## [4] &quot;antiquewhite1&quot; &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; ## [7] &quot;antiquewhite4&quot; &quot;aquamarine&quot; &quot;aquamarine1&quot; ## [10] &quot;aquamarine2&quot; &quot;aquamarine3&quot; &quot;aquamarine4&quot; ## [13] &quot;azure&quot; &quot;azure1&quot; &quot;azure2&quot; ## [16] &quot;azure3&quot; &quot;azure4&quot; &quot;beige&quot; ## [19] &quot;bisque&quot; &quot;bisque1&quot; &quot;bisque2&quot; ## [22] &quot;bisque3&quot; &quot;bisque4&quot; &quot;black&quot; ## [25] &quot;blanchedalmond&quot; &quot;blue&quot; &quot;blue1&quot; ## [28] &quot;blue2&quot; &quot;blue3&quot; &quot;blue4&quot; ## [31] &quot;blueviolet&quot; &quot;brown&quot; &quot;brown1&quot; ## [34] &quot;brown2&quot; &quot;brown3&quot; &quot;brown4&quot; ## [37] &quot;burlywood&quot; &quot;burlywood1&quot; &quot;burlywood2&quot; ## [40] &quot;burlywood3&quot; &quot;burlywood4&quot; &quot;cadetblue&quot; ## [43] &quot;cadetblue1&quot; &quot;cadetblue2&quot; &quot;cadetblue3&quot; ## [46] &quot;cadetblue4&quot; &quot;chartreuse&quot; &quot;chartreuse1&quot; ## [49] &quot;chartreuse2&quot; &quot;chartreuse3&quot; scale_x_gradient()から派生した関数としてscale_x_gradient2()というものもあります。これは最小値と最大値だけでなく、mid引数を使って中間における色も指定可能な関数です。例えば、先ほどの例で真ん中をseagreenにしてみましょう。 Scale_Fig2 + scale_color_gradient2(high = &quot;brown3&quot;, mid = &quot;seagreen&quot;, low = &quot;cornflowerblue&quot;) ## Warning: Removed 6 rows containing missing values (geom_point). 色は\"seagreen\"、\"red\"でなく、\"#00AC97\"、\"#FF0000\"のように具体的なRGB値で指定することもできます。これは色を赤（R）、緑（G）、青（B）の3つの原色を混ぜて様々な色を表現する方法です。\"#FF0000\"の場合、最初の#はRGB表記であることを意味し、FFは赤が255であることの16進法表記、次の00と最後の00は緑と青が0であることの16進法表記です。各原色は0から255までの値を取ります。{ggplot2}でよく見る色としては#F8766D、#00BFC4、#C77CFF、#7CAE00があります。他にもGoogleなどで「RGB color list」などを検索すれば様々な色を見ることができます。 他にも{ggplot2}は様々なユーザー指定のパレットが使用可能であり、実際、パッケージの形式として提供される場合もあります。たとえば、ジブリ風のカラーパレットが{ghibli}パッケージとして提供されており、install.packages(\"ghibli\")でインストール可能です。 Scale_Fig2 + # 連続変数（_c）用の「もののけ姫」パレット（medium） ghibli::scale_color_ghibli_c(&quot;MononokeMedium&quot;) ## Warning: Removed 6 rows containing missing values (geom_point). 順序付き離散変数 連続変数のようにグラデーションではあるものの、それぞれの値に対して具体的な色が指定されている。 scale_color_hue() Scale_Fig3 &lt;- Country_df %&gt;% mutate(Polity_Type = factor(Polity_Type, ordered = TRUE, levels = c(&quot;Autocracy&quot;, &quot;Closed Anocracy&quot;, &quot;Open Anocracy&quot;, &quot;Democracy&quot;, &quot;Full Democracy&quot;))) %&gt;% drop_na(Polity_Type) %&gt;% ggplot() + geom_point(aes(x = GDP_per_capita, y = HDI_2018, color = Polity_Type)) + labs(x = &quot;一人あたりGDP (USD)&quot;,y = &quot;人間開発指数&quot;, color = &quot;Polity IVタイプ&quot;) + scale_x_log10() + theme_bw(base_family = &quot;HiraKakuProN-W3&quot;) Scale_Fig3 ## Warning: Removed 2 rows containing missing values (geom_point). Scale_Fig3 + scale_color_hue(h = c(0, 360), c = 100, l = 65) ## Warning: Removed 2 rows containing missing values (geom_point). Hueの色は以下の通り。左端が0で、右端が360。hは実引数として長さ2の数値型ベクトルを指定し、どの範囲を使用するかを指定する。cは色相の強度。0に近いほどグレイへ近づき、色間の区別がしにくくなる。lは明るさ。 ## ## 次のパッケージを付け加えます: &#39;scales&#39; ## 以下のオブジェクトは &#39;package:purrr&#39; からマスクされています: ## ## discard ## 以下のオブジェクトは &#39;package:readr&#39; からマスクされています: ## ## col_factor 他にもmpl colormapsを使うことも可能。optionの場合、デフォルトは\"D\"であり、これはVIRIDIS colormapを意味する。beginとendでcolormapの使用範囲を指定する。 Scale_Fig3 + # PLASMA colormapを使用する（option = &quot;C&quot;） scale_color_viridis_d(begin = 0, end = 1, option = &quot;C&quot;) ## Warning: Removed 2 rows containing missing values (geom_point). 離散変数 scale_color_manual() {ggplot2}におけるcolorスケールは非常に細かく調整可能であり、関連関数やパッケージも多く提供されています。本書では全てを紹介することはできませんが、ここまで紹介してきました例だけでも、かなり自分好みに色を調整できるでしょう。 19.3.2.2 sizeスケール 19.3.2.3 linetypeスケール 19.4 theme_*()とtheme(): テーマの指定 19.5 図の結合 gridExtraは古いかな 19.5.1 ggpubrパッケージ 19.5.2 patchworkパッケージ 19.5.3 eggパッケージ 例えば、回帰係数の点推定値と信頼区間を示す係数プロット（キャタピラー・プロット）を作成する際はgeom_pointrange()とcoord_flip()を組み合わせてきましたが、今の{ggplot2}はgeom_pointrange()のみで自由自在に作成できます。↩︎ "]
]
