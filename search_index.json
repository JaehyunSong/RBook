[
["solution.html", "17. 演習問題の回答 17.1 基本的な操作 17.2 データの構造 17.3 Rプログラミングの基礎", " 17. 演習問題の回答 結果は載せておりません。自分で結果を確認しましょう。 17.1 基本的な操作 (myVec1 &lt;- c(3, 9, 10, 8, 3, 5, 8)) # 問1 myVec1[c(2, 4, 6)] # 問2 sum(myVec1) # 問3 sum(myVec1[(myVec1 %% 2 == 1)]) # 問4 (myVec2 &lt;- c(1, 2, 3, 4, 3, 2, 1)) # 問5 (myVec3 &lt;- myVec1 + myVec2) # 問6 myVec3[myVec3 &lt; 10] # 問7 myVec4 &lt;- 1:100 # 問8 sum(myVec4^2) # 問9 sum((myVec4[myVec4 %% 2 == 1])^2) # 問10 17.2 データの構造 17.2.1 ベクトル # 問1 1から10までの公差1の等差数列を作成し、myVec1と名付けよ。 myVec1 &lt;- 1:10 # 問2 myVec1の長さを求めよ。 length(myVec1) # 問3 myVec1から偶数のみを抽出せよ myVec1[myVec1 %% 2 == 0] # 問4 myVec1をmyVec2という名でコピーし、myVec2の偶数を全て0に置換せよ。 myVec2 &lt;- myVec1 myVec2[myVec2 %% 2 == 0] &lt;- 0 # 問5 myVec1の全要素から1を引し、myVec3と名付けよ。 myVec3 &lt;- myVec1 - 1 # 問6 myVec1の奇数番目の要素には1を、偶数番目の要素には2を足し、myVec4と名付けよ。 myVec4 &lt;- myVec1 + c(1, 2) # 問7 myVec4からmyVec1を引け。 myVec4 - myVec1 17.2.2 行列 問1 以下のような2つの行列を作成せよ。 \\[ \\text{myMat1} = \\left[ \\begin{matrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\end{matrix} \\right], \\text{myMat2} = \\left[ \\begin{matrix} 1 &amp; 4 &amp; 7 \\\\ 2 &amp; 5 &amp; 8 \\\\ 3 &amp; 6 &amp; 9 \\end{matrix} \\right] \\] # myMat1: byrow = を指定する場合 myMat1 &lt;- matrix(1:6, nrow = 2, byrow = TRUE) # myMat1: byrow = を指定しない場合 myMat1 &lt;- matrix(c(1, 4, 2, 5, 3, 6), nrow = 2) # myMat2: byrow = を指定する場合 myMat2 &lt;- matrix(c(1, 4, 7, 2, 5, 8, 3, 6, 9), nrow = 3, byrow = TRUE) # myMat2: byrow = を指定しない場合 myMat2 &lt;- matrix(1:9, nrow = 3) 問2 myMat1とmyMat2の掛け算を行い、myMat3と名付けよ。 myMat3 &lt;- myMat1 %*% myMat2 問3 # 問3-1 myMat4 &lt;- matrix(c(3, -1, 2, 1, 2, 3, 2, -1, -1), nrow = 3, byrow = TRUE) myMat5 &lt;- matrix(c(12, 11, 2), nrow = 3) # 問3-2 solve(myMat4) # 問3-3 myMat6 &lt;- solve(myMat4) %*% myMat5 # 問3-4 myMat4 %*% myMat6 17.2.3 データフレーム # 問1. 以下のようなデータフレームを作成し、myDF1と名付けよ。 myDF1 &lt;- data.frame( ID = 1:10, Name = c(&quot;Australia&quot;, &quot;China&quot;, &quot;Iran&quot;, &quot;Iraq&quot;, &quot;Japan&quot;, &quot;Qatar&quot;, &quot;Saudi Arabia&quot;, &quot;South Korea&quot;, &quot;Syria&quot;, &quot;UAE&quot;), Rank = c(42, 76, 33, 70, 28, 55, 67, 40, 79, 71), Socre = c(1457, 1323, 1489, 1344, 1500, 1396, 1351, 1464, 1314, 1334) ) # 問2. myDF1からName列を抽出せよ。 myDF1$Name # 問3. myDF1のName列から3番目の要素を抽出せよ。 myDF1$Name[3] # 問4. myDF1の3行目を抽出せよ。 myDF1[3, ] # 問5. FIFA_Women.csvをtibble型として読み込み、myTbl1と名付けよ。 myTbl1 &lt;- read_csv(&quot;Data/FIFA_Women.csv&quot;) # 問6. myTbl1のRank列を抽出し、それぞれの要素が20より小さいかを判定せよ。 myTbl1$Rank &lt; 20 # 問7. Rankが20より小さい国名を抽出せよ。 myTbl1$Team[myTbl1$Rank &lt; 20] # 問8. myTbl1からランキングが20位以内の行を抽出せよ。 myTbl1[myTbl1$Rank &lt; 20, ] 17.3 Rプログラミングの基礎 問1 while()を使う場合 Trial &lt;- 1 Total &lt;- 0 while (Total != 15) { Dice &lt;- sample(1:6, 3, replace = TRUE) Total &lt;- sum(Dice) print(paste0(Trial, &quot;目のサイコロ投げの結果: &quot;, Dice[1], &quot;, &quot;, Dice[2], &quot;, &quot;, Dice[3], &quot; (合計: &quot;, Total, &quot;)&quot;)) Trial &lt;- Trial + 1 } for()を使う場合 for (Trial in 1:10000) { Dice &lt;- sample(1:6, 3, replace = TRUE) Total &lt;- sum(Dice) print(paste0(Trial, &quot;目のサイコロ投げの結果: &quot;, Dice[1], &quot;, &quot;, Dice[2], &quot;, &quot;, Dice[3], &quot; (合計: &quot;, Total, &quot;)&quot;)) if (Total == 15) { break } } 問2 # 問2-1 Cause &lt;- c(&quot;喫煙&quot;, &quot;飲酒&quot;, &quot;食べすぎ&quot;, &quot;寝不足&quot;, &quot;ストレス&quot;) for (i in Cause) { Text &lt;- sprintf(&quot;肥満の原因は%sでしょう。&quot;, i) print(Text) } # 問2-2 Effect &lt;- c(&quot;肥満&quot;, &quot;ハゲ&quot;, &quot;不人気&quot;, &quot;金欠&quot;) for (i in Effect) { for (j in Cause) { Text &lt;- sprintf(&quot;%sの原因は%sでしょう。&quot;, i, j) print(Text) } } # 問2-3 Solution &lt;- c(&quot;この薬を飲めば&quot;, &quot;一日一麺すれば&quot;, &quot;Songに100万円振り込めば&quot;) for (i in Effect) { for (j in Cause) { for (k in Solution) { Text &lt;- sprintf(&quot;%sの原因は%sですが、%s改善されるでしょう。&quot;, i, j, k) print(Text) } } } 問3 Data &lt;- c(5, 3) if (Data[1] &gt; Data[2]) { Temp &lt;- Data[1] Data[1] &lt;- Data[2] Data[2] &lt;- Temp } Data 問4 Data &lt;- c(5, 2, 4, 1) for (i in (length(Data)-1):1) { for (j in 1:i) { if (Data[j] &gt; Data[j+1]) { Temp &lt;- Data[j] Data[j] &lt;- Data[j + 1] Data[j+1] &lt;- Temp } } } Data 問5 mySort &lt;- function(x) { for (i in (length(x)-1):1) { for (j in 1:i) { if (x[j] &gt; x[j+1]) { Temp &lt;- x[j] x[j] &lt;- x[j + 1] x[j+1] &lt;- Temp } } } x } # Bubble Sortの例 Data &lt;- c(28, 92, 29, 84, 29, 27, 19, 23, 32, 30) mySort(Data) 問6 DQ_Attack2 &lt;- function(attack, defence, hp, enemy) { DefaultDamage &lt;- (attack / 2) - (defence / 4) DefaultDamage &lt;- ifelse(DefaultDamage &lt; 0, 0, DefaultDamage) DamageWidth &lt;- floor(DefaultDamage / 16) + 1 DamageMin &lt;- DefaultDamage - DamageWidth DamageMin &lt;- ifelse(DamageMin &lt; 0, 0, DamageMin) DamageMax &lt;- DefaultDamage + DamageWidth CurrentHP &lt;- hp while (CurrentHP &gt; 0) { Kaisin &lt;- runif(n = 1, min = 0, max = 1) if (Kaisin &lt;= (1/32)) { Damage &lt;- runif(n = 1, min = attack * 0.95, max = attack * 1.05) } else { Damage &lt;- runif(n = 1, min = DamageMin, max = DamageMax) } Damage &lt;- round(Damage, 0) CurrentHP &lt;- CurrentHP - Damage if (Kaisin &lt;= (1/32)) { print(paste0(&quot;かいしんのいちげき!&quot;, enemy, &quot;に&quot;, Damage, &quot;のダメージ!!&quot;)) } else{ print(paste0(enemy, &quot;に&quot;, Damage, &quot;のダメージ!!&quot;)) } } paste0(enemy, &quot;をやっつけた！&quot;) } 問7 mySample &lt;- function(x, n, seed) { # 以下の条件が満たされない場合、エラーメッセージを出力し、関数を停止 stopifnot( # length(n) == 1が満たされない場合 &quot;a length of n must be 1.&quot; = (length(n) == 1), # length(seed) == 1が満たされない場合 &quot;a length of seed must be 1.&quot; = (length(seed) == 1), # is.numeric(seed) == TRUEが満たされない場合 &quot;seed must be integer of double.&quot; = is.numeric(seed), # ceiling(n) == nが満たされない場合 &quot;n must be interger.&quot; = (ceiling(n) == n) ) # LCG()を用いてn個の乱数を生成し、xの長さだけ倍にする index &lt;- LCG(n = n, seed = seed) * length(x) # 得られた疑似乱数を切り上げる index &lt;- ceiling(index) # ベクトルxのindex番目要素を抽出し、Resultに格納 Result &lt;- x[index] Result } "]
]
